/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FFTFREQS swig_types[0]
#define SWIGTYPE_p_FFTwrapper swig_types[1]
#define SWIGTYPE_p_FILE swig_types[2]
#define SWIGTYPE_p_a_7__float swig_types[3]
#define SWIGTYPE_p_char swig_types[4]
#define SWIGTYPE_p_double swig_types[5]
#define SWIGTYPE_p_f_p_sp_data_p_void__void swig_types[6]
#define SWIGTYPE_p_f_p_void__void swig_types[7]
#define SWIGTYPE_p_f_p_void_p_float__void swig_types[8]
#define SWIGTYPE_p_float swig_types[9]
#define SWIGTYPE_p_int16_t swig_types[10]
#define SWIGTYPE_p_int32_t swig_types[11]
#define SWIGTYPE_p_kiss_fft_cpx swig_types[12]
#define SWIGTYPE_p_kiss_fftr_state swig_types[13]
#define SWIGTYPE_p_nano_dict swig_types[14]
#define SWIGTYPE_p_nano_entry swig_types[15]
#define SWIGTYPE_p_nanosamp swig_types[16]
#define SWIGTYPE_p_openlpc_d_state swig_types[17]
#define SWIGTYPE_p_openlpc_e_state swig_types[18]
#define SWIGTYPE_p_p_FFTwrapper swig_types[19]
#define SWIGTYPE_p_p_float swig_types[20]
#define SWIGTYPE_p_p_nano_entry swig_types[21]
#define SWIGTYPE_p_p_sp_adsr swig_types[22]
#define SWIGTYPE_p_p_sp_allpass swig_types[23]
#define SWIGTYPE_p_p_sp_atone swig_types[24]
#define SWIGTYPE_p_p_sp_autowah swig_types[25]
#define SWIGTYPE_p_p_sp_bal swig_types[26]
#define SWIGTYPE_p_p_sp_bar swig_types[27]
#define SWIGTYPE_p_p_sp_biquad swig_types[28]
#define SWIGTYPE_p_p_sp_biscale swig_types[29]
#define SWIGTYPE_p_p_sp_bitcrush swig_types[30]
#define SWIGTYPE_p_p_sp_blsaw swig_types[31]
#define SWIGTYPE_p_p_sp_blsquare swig_types[32]
#define SWIGTYPE_p_p_sp_bltriangle swig_types[33]
#define SWIGTYPE_p_p_sp_brown swig_types[34]
#define SWIGTYPE_p_p_sp_butbp swig_types[35]
#define SWIGTYPE_p_p_sp_butbr swig_types[36]
#define SWIGTYPE_p_p_sp_buthp swig_types[37]
#define SWIGTYPE_p_p_sp_butlp swig_types[38]
#define SWIGTYPE_p_p_sp_clip swig_types[39]
#define SWIGTYPE_p_p_sp_clock swig_types[40]
#define SWIGTYPE_p_p_sp_comb swig_types[41]
#define SWIGTYPE_p_p_sp_compressor swig_types[42]
#define SWIGTYPE_p_p_sp_conv swig_types[43]
#define SWIGTYPE_p_p_sp_count swig_types[44]
#define SWIGTYPE_p_p_sp_crossfade swig_types[45]
#define SWIGTYPE_p_p_sp_data swig_types[46]
#define SWIGTYPE_p_p_sp_dcblock swig_types[47]
#define SWIGTYPE_p_p_sp_delay swig_types[48]
#define SWIGTYPE_p_p_sp_diode swig_types[49]
#define SWIGTYPE_p_p_sp_diskin swig_types[50]
#define SWIGTYPE_p_p_sp_dist swig_types[51]
#define SWIGTYPE_p_p_sp_dmetro swig_types[52]
#define SWIGTYPE_p_p_sp_drip swig_types[53]
#define SWIGTYPE_p_p_sp_dtrig swig_types[54]
#define SWIGTYPE_p_p_sp_dust swig_types[55]
#define SWIGTYPE_p_p_sp_eqfil swig_types[56]
#define SWIGTYPE_p_p_sp_expon swig_types[57]
#define SWIGTYPE_p_p_sp_fof swig_types[58]
#define SWIGTYPE_p_p_sp_fofilt swig_types[59]
#define SWIGTYPE_p_p_sp_fog swig_types[60]
#define SWIGTYPE_p_p_sp_fold swig_types[61]
#define SWIGTYPE_p_p_sp_foo swig_types[62]
#define SWIGTYPE_p_p_sp_fosc swig_types[63]
#define SWIGTYPE_p_p_sp_ftbl swig_types[64]
#define SWIGTYPE_p_p_sp_gbuzz swig_types[65]
#define SWIGTYPE_p_p_sp_hilbert swig_types[66]
#define SWIGTYPE_p_p_sp_in swig_types[67]
#define SWIGTYPE_p_p_sp_incr swig_types[68]
#define SWIGTYPE_p_p_sp_jcrev swig_types[69]
#define SWIGTYPE_p_p_sp_jitter swig_types[70]
#define SWIGTYPE_p_p_sp_line swig_types[71]
#define SWIGTYPE_p_p_sp_lpc swig_types[72]
#define SWIGTYPE_p_p_sp_lpf18 swig_types[73]
#define SWIGTYPE_p_p_sp_maygate swig_types[74]
#define SWIGTYPE_p_p_sp_metro swig_types[75]
#define SWIGTYPE_p_p_sp_mincer swig_types[76]
#define SWIGTYPE_p_p_sp_mode swig_types[77]
#define SWIGTYPE_p_p_sp_moogladder swig_types[78]
#define SWIGTYPE_p_p_sp_noise swig_types[79]
#define SWIGTYPE_p_p_sp_nsmp swig_types[80]
#define SWIGTYPE_p_p_sp_osc swig_types[81]
#define SWIGTYPE_p_p_sp_oscmorph swig_types[82]
#define SWIGTYPE_p_p_sp_pan2 swig_types[83]
#define SWIGTYPE_p_p_sp_panst swig_types[84]
#define SWIGTYPE_p_p_sp_pareq swig_types[85]
#define SWIGTYPE_p_p_sp_paulstretch swig_types[86]
#define SWIGTYPE_p_p_sp_pdhalf swig_types[87]
#define SWIGTYPE_p_p_sp_peaklim swig_types[88]
#define SWIGTYPE_p_p_sp_phaser swig_types[89]
#define SWIGTYPE_p_p_sp_phasor swig_types[90]
#define SWIGTYPE_p_p_sp_pinknoise swig_types[91]
#define SWIGTYPE_p_p_sp_pitchamdf swig_types[92]
#define SWIGTYPE_p_p_sp_pluck swig_types[93]
#define SWIGTYPE_p_p_sp_port swig_types[94]
#define SWIGTYPE_p_p_sp_posc3 swig_types[95]
#define SWIGTYPE_p_p_sp_progress swig_types[96]
#define SWIGTYPE_p_p_sp_prop swig_types[97]
#define SWIGTYPE_p_p_sp_pshift swig_types[98]
#define SWIGTYPE_p_p_sp_ptrack swig_types[99]
#define SWIGTYPE_p_p_sp_randh swig_types[100]
#define SWIGTYPE_p_p_sp_randi swig_types[101]
#define SWIGTYPE_p_p_sp_random swig_types[102]
#define SWIGTYPE_p_p_sp_reson swig_types[103]
#define SWIGTYPE_p_p_sp_reverse swig_types[104]
#define SWIGTYPE_p_p_sp_revsc swig_types[105]
#define SWIGTYPE_p_p_sp_rms swig_types[106]
#define SWIGTYPE_p_p_sp_rpt swig_types[107]
#define SWIGTYPE_p_p_sp_rspline swig_types[108]
#define SWIGTYPE_p_p_sp_samphold swig_types[109]
#define SWIGTYPE_p_p_sp_saturator swig_types[110]
#define SWIGTYPE_p_p_sp_scale swig_types[111]
#define SWIGTYPE_p_p_sp_sdelay swig_types[112]
#define SWIGTYPE_p_p_sp_slice swig_types[113]
#define SWIGTYPE_p_p_sp_smoothdelay swig_types[114]
#define SWIGTYPE_p_p_sp_spa swig_types[115]
#define SWIGTYPE_p_p_sp_sparec swig_types[116]
#define SWIGTYPE_p_p_sp_streson swig_types[117]
#define SWIGTYPE_p_p_sp_switch swig_types[118]
#define SWIGTYPE_p_p_sp_tabread swig_types[119]
#define SWIGTYPE_p_p_sp_tadsr swig_types[120]
#define SWIGTYPE_p_p_sp_talkbox swig_types[121]
#define SWIGTYPE_p_p_sp_tblrec swig_types[122]
#define SWIGTYPE_p_p_sp_tbvcf swig_types[123]
#define SWIGTYPE_p_p_sp_tdiv swig_types[124]
#define SWIGTYPE_p_p_sp_tenv swig_types[125]
#define SWIGTYPE_p_p_sp_tenv2 swig_types[126]
#define SWIGTYPE_p_p_sp_tenvx swig_types[127]
#define SWIGTYPE_p_p_sp_tevent swig_types[128]
#define SWIGTYPE_p_p_sp_tgate swig_types[129]
#define SWIGTYPE_p_p_sp_thresh swig_types[130]
#define SWIGTYPE_p_p_sp_timer swig_types[131]
#define SWIGTYPE_p_p_sp_tin swig_types[132]
#define SWIGTYPE_p_p_sp_tone swig_types[133]
#define SWIGTYPE_p_p_sp_trand swig_types[134]
#define SWIGTYPE_p_p_sp_tseg swig_types[135]
#define SWIGTYPE_p_p_sp_tseq swig_types[136]
#define SWIGTYPE_p_p_sp_vdelay swig_types[137]
#define SWIGTYPE_p_p_sp_voc swig_types[138]
#define SWIGTYPE_p_p_sp_vocoder swig_types[139]
#define SWIGTYPE_p_p_sp_waveset swig_types[140]
#define SWIGTYPE_p_p_sp_wavin swig_types[141]
#define SWIGTYPE_p_p_sp_wavout swig_types[142]
#define SWIGTYPE_p_p_sp_wpkorg35 swig_types[143]
#define SWIGTYPE_p_p_sp_zitarev swig_types[144]
#define SWIGTYPE_p_prop_data swig_types[145]
#define SWIGTYPE_p_prop_entry swig_types[146]
#define SWIGTYPE_p_prop_event swig_types[147]
#define SWIGTYPE_p_prop_list swig_types[148]
#define SWIGTYPE_p_prop_stack swig_types[149]
#define SWIGTYPE_p_prop_val swig_types[150]
#define SWIGTYPE_p_short swig_types[151]
#define SWIGTYPE_p_sp_adsr swig_types[152]
#define SWIGTYPE_p_sp_allpass swig_types[153]
#define SWIGTYPE_p_sp_atone swig_types[154]
#define SWIGTYPE_p_sp_audio swig_types[155]
#define SWIGTYPE_p_sp_autowah swig_types[156]
#define SWIGTYPE_p_sp_auxdata swig_types[157]
#define SWIGTYPE_p_sp_bal swig_types[158]
#define SWIGTYPE_p_sp_bar swig_types[159]
#define SWIGTYPE_p_sp_biquad swig_types[160]
#define SWIGTYPE_p_sp_biscale swig_types[161]
#define SWIGTYPE_p_sp_bitcrush swig_types[162]
#define SWIGTYPE_p_sp_blsaw swig_types[163]
#define SWIGTYPE_p_sp_blsquare swig_types[164]
#define SWIGTYPE_p_sp_bltriangle swig_types[165]
#define SWIGTYPE_p_sp_brown swig_types[166]
#define SWIGTYPE_p_sp_butbp swig_types[167]
#define SWIGTYPE_p_sp_butbr swig_types[168]
#define SWIGTYPE_p_sp_buthp swig_types[169]
#define SWIGTYPE_p_sp_butlp swig_types[170]
#define SWIGTYPE_p_sp_clip swig_types[171]
#define SWIGTYPE_p_sp_clock swig_types[172]
#define SWIGTYPE_p_sp_comb swig_types[173]
#define SWIGTYPE_p_sp_compressor swig_types[174]
#define SWIGTYPE_p_sp_conv swig_types[175]
#define SWIGTYPE_p_sp_count swig_types[176]
#define SWIGTYPE_p_sp_crossfade swig_types[177]
#define SWIGTYPE_p_sp_data swig_types[178]
#define SWIGTYPE_p_sp_dcblock swig_types[179]
#define SWIGTYPE_p_sp_delay swig_types[180]
#define SWIGTYPE_p_sp_diode swig_types[181]
#define SWIGTYPE_p_sp_diskin swig_types[182]
#define SWIGTYPE_p_sp_dist swig_types[183]
#define SWIGTYPE_p_sp_dmetro swig_types[184]
#define SWIGTYPE_p_sp_drip swig_types[185]
#define SWIGTYPE_p_sp_dtrig swig_types[186]
#define SWIGTYPE_p_sp_dust swig_types[187]
#define SWIGTYPE_p_sp_eqfil swig_types[188]
#define SWIGTYPE_p_sp_expon swig_types[189]
#define SWIGTYPE_p_sp_fft swig_types[190]
#define SWIGTYPE_p_sp_fof swig_types[191]
#define SWIGTYPE_p_sp_fof_overlap swig_types[192]
#define SWIGTYPE_p_sp_fofilt swig_types[193]
#define SWIGTYPE_p_sp_fog swig_types[194]
#define SWIGTYPE_p_sp_fog_overlap swig_types[195]
#define SWIGTYPE_p_sp_fold swig_types[196]
#define SWIGTYPE_p_sp_foo swig_types[197]
#define SWIGTYPE_p_sp_fosc swig_types[198]
#define SWIGTYPE_p_sp_ftbl swig_types[199]
#define SWIGTYPE_p_sp_gbuzz swig_types[200]
#define SWIGTYPE_p_sp_hilbert swig_types[201]
#define SWIGTYPE_p_sp_in swig_types[202]
#define SWIGTYPE_p_sp_incr swig_types[203]
#define SWIGTYPE_p_sp_jcrev swig_types[204]
#define SWIGTYPE_p_sp_jitter swig_types[205]
#define SWIGTYPE_p_sp_line swig_types[206]
#define SWIGTYPE_p_sp_lpc swig_types[207]
#define SWIGTYPE_p_sp_lpf18 swig_types[208]
#define SWIGTYPE_p_sp_maygate swig_types[209]
#define SWIGTYPE_p_sp_metro swig_types[210]
#define SWIGTYPE_p_sp_mincer swig_types[211]
#define SWIGTYPE_p_sp_mode swig_types[212]
#define SWIGTYPE_p_sp_moogladder swig_types[213]
#define SWIGTYPE_p_sp_noise swig_types[214]
#define SWIGTYPE_p_sp_nsmp swig_types[215]
#define SWIGTYPE_p_sp_osc swig_types[216]
#define SWIGTYPE_p_sp_oscmorph swig_types[217]
#define SWIGTYPE_p_sp_padsynth swig_types[218]
#define SWIGTYPE_p_sp_pan2 swig_types[219]
#define SWIGTYPE_p_sp_panst swig_types[220]
#define SWIGTYPE_p_sp_param swig_types[221]
#define SWIGTYPE_p_sp_pareq swig_types[222]
#define SWIGTYPE_p_sp_paulstretch swig_types[223]
#define SWIGTYPE_p_sp_pdhalf swig_types[224]
#define SWIGTYPE_p_sp_peaklim swig_types[225]
#define SWIGTYPE_p_sp_phaser swig_types[226]
#define SWIGTYPE_p_sp_phasor swig_types[227]
#define SWIGTYPE_p_sp_pinknoise swig_types[228]
#define SWIGTYPE_p_sp_pitchamdf swig_types[229]
#define SWIGTYPE_p_sp_pluck swig_types[230]
#define SWIGTYPE_p_sp_port swig_types[231]
#define SWIGTYPE_p_sp_posc3 swig_types[232]
#define SWIGTYPE_p_sp_progress swig_types[233]
#define SWIGTYPE_p_sp_prop swig_types[234]
#define SWIGTYPE_p_sp_pshift swig_types[235]
#define SWIGTYPE_p_sp_ptrack swig_types[236]
#define SWIGTYPE_p_sp_randh swig_types[237]
#define SWIGTYPE_p_sp_randi swig_types[238]
#define SWIGTYPE_p_sp_randmt swig_types[239]
#define SWIGTYPE_p_sp_random swig_types[240]
#define SWIGTYPE_p_sp_reson swig_types[241]
#define SWIGTYPE_p_sp_reverse swig_types[242]
#define SWIGTYPE_p_sp_revsc swig_types[243]
#define SWIGTYPE_p_sp_revsc_dl swig_types[244]
#define SWIGTYPE_p_sp_rms swig_types[245]
#define SWIGTYPE_p_sp_rpt swig_types[246]
#define SWIGTYPE_p_sp_rspline swig_types[247]
#define SWIGTYPE_p_sp_samphold swig_types[248]
#define SWIGTYPE_p_sp_saturator swig_types[249]
#define SWIGTYPE_p_sp_scale swig_types[250]
#define SWIGTYPE_p_sp_sdelay swig_types[251]
#define SWIGTYPE_p_sp_slice swig_types[252]
#define SWIGTYPE_p_sp_smoothdelay swig_types[253]
#define SWIGTYPE_p_sp_spa swig_types[254]
#define SWIGTYPE_p_sp_sparec swig_types[255]
#define SWIGTYPE_p_sp_streson swig_types[256]
#define SWIGTYPE_p_sp_switch swig_types[257]
#define SWIGTYPE_p_sp_tabread swig_types[258]
#define SWIGTYPE_p_sp_tadsr swig_types[259]
#define SWIGTYPE_p_sp_talkbox swig_types[260]
#define SWIGTYPE_p_sp_tblrec swig_types[261]
#define SWIGTYPE_p_sp_tbvcf swig_types[262]
#define SWIGTYPE_p_sp_tdiv swig_types[263]
#define SWIGTYPE_p_sp_tenv swig_types[264]
#define SWIGTYPE_p_sp_tenv2 swig_types[265]
#define SWIGTYPE_p_sp_tenvx swig_types[266]
#define SWIGTYPE_p_sp_tevent swig_types[267]
#define SWIGTYPE_p_sp_tgate swig_types[268]
#define SWIGTYPE_p_sp_thresh swig_types[269]
#define SWIGTYPE_p_sp_timer swig_types[270]
#define SWIGTYPE_p_sp_tin swig_types[271]
#define SWIGTYPE_p_sp_tone swig_types[272]
#define SWIGTYPE_p_sp_trand swig_types[273]
#define SWIGTYPE_p_sp_tseg swig_types[274]
#define SWIGTYPE_p_sp_tseq swig_types[275]
#define SWIGTYPE_p_sp_vdelay swig_types[276]
#define SWIGTYPE_p_sp_voc swig_types[277]
#define SWIGTYPE_p_sp_vocoder swig_types[278]
#define SWIGTYPE_p_sp_waveset swig_types[279]
#define SWIGTYPE_p_sp_wavin swig_types[280]
#define SWIGTYPE_p_sp_wavout swig_types[281]
#define SWIGTYPE_p_sp_wpkorg35 swig_types[282]
#define SWIGTYPE_p_sp_zitarev swig_types[283]
#define SWIGTYPE_p_spa_header swig_types[284]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[285]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[286]
#define SWIGTYPE_p_std__vector_iteratorT_double_t swig_types[287]
#define SWIGTYPE_p_std__vector_iteratorT_float_t swig_types[288]
#define SWIGTYPE_p_uint16_t swig_types[289]
#define SWIGTYPE_p_uint32_t swig_types[290]
#define SWIGTYPE_p_unsigned_char swig_types[291]
#define SWIGTYPE_p_unsigned_int swig_types[292]
#define SWIGTYPE_p_unsigned_long swig_types[293]
#define SWIGTYPE_p_void swig_types[294]
static swig_type_info *swig_types[296];
static swig_module_info swig_module = {swig_types, 295, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "soundpipe"
#define SWIG_init      luaopen_soundpipe
#define SWIG_init_user luaopen_soundpipe_user

#define SWIG_LUACODE   luaopen_soundpipe_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


extern "C" {
#include "soundpipe.h"
}


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T>
    struct vector_iterator
    {
        typename std::vector<T>::iterator iter;
        std::vector<T> v;

        vector_iterator(const std::vector<T> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T> & vec, const typename std::vector<T>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T>& operator = (const vector_iterator<T>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}
SWIGINTERN float std_vector_Sl_float_Sg____getitem__SWIG(std::vector< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_float_Sg____setitem__SWIG(std::vector< float > *self,size_t i,float val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_float_Sg__begin__SWIG(std::vector< float > *self){
                std::vector_iterator<float> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_float_Sg__end__SWIG(std::vector< float > *self){
                std::vector_iterator<float> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_0(std::vector< float > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_1(std::vector< float > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN double std_vector_Sl_double_Sg____getitem__SWIG(std::vector< double > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_double_Sg____setitem__SWIG(std::vector< double > *self,size_t i,double val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< double > std_vector_Sl_double_Sg__begin__SWIG(std::vector< double > *self){
                std::vector_iterator<double> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< double > std_vector_Sl_double_Sg__end__SWIG(std::vector< double > *self){
                std::vector_iterator<double> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }

#include <string.h>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::vector",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< float > *)new std::vector< float >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::vector(size_t,float const &)\n"
    "    std::vector< float >::vector(size_t)\n"
    "    std::vector< float >::vector(std::vector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__getitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___getitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_vector_Sl_float_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__setitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::__setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___setitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< float >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::begin",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_begin",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_float_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< float >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::end",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_c_end",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_float_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_float_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< float >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::erase(size_t)\n"
    "    std::vector< float >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::front",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_front",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("std::vector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::push_back",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::push_back",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_push_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::pop_back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::at",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_at",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::vector< float >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::assign",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::assign",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_assign",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::data",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_data",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::empty",1,"std::vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_empty",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (bool)((std::vector< float > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::resize",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_resize",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::clear",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_clear",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< float >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::swap",1,"std::vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< float >::swap",2,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_swap",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_swap",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::shrink_to_fit",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::reserve",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_reserve",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::max_size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_max_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::capacity",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_capacity",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector(void *obj) {
std::vector< float > *arg1 = (std::vector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_vector_methods[]= {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    { "begin", _wrap_float_vector_begin},
    { "c_end", _wrap_float_vector_c_end},
    { "erase", _wrap_float_vector_erase},
    { "front", _wrap_float_vector_front},
    { "back", _wrap_float_vector_back},
    { "push_back", _wrap_float_vector_push_back},
    { "pop_back", _wrap_float_vector_pop_back},
    { "at", _wrap_float_vector_at},
    { "assign", _wrap_float_vector_assign},
    { "data", _wrap_float_vector_data},
    { "size", _wrap_float_vector_size},
    { "empty", _wrap_float_vector_empty},
    { "resize", _wrap_float_vector_resize},
    { "clear", _wrap_float_vector_clear},
    { "swap", _wrap_float_vector_swap},
    { "shrink_to_fit", _wrap_float_vector_shrink_to_fit},
    { "reserve", _wrap_float_vector_reserve},
    { "max_size", _wrap_float_vector_max_size},
    { "capacity", _wrap_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_float_vector_meta[] = {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_Sf_SwigStatic = {
    "float_vector",
    swig_float_vector_Sf_SwigStatic_methods,
    swig_float_vector_Sf_SwigStatic_attributes,
    swig_float_vector_Sf_SwigStatic_constants,
    swig_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_bases[] = {0};
static const char *swig_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector = { "float_vector", "float_vector", &SWIGTYPE_p_std__vectorT_float_t,_proxy__wrap_new_float_vector, swig_delete_float_vector, swig_float_vector_methods, swig_float_vector_attributes, &swig_float_vector_Sf_SwigStatic, swig_float_vector_meta, swig_float_vector_bases, swig_float_vector_base_names };

static int _wrap_new_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::vector",2,"double const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector(size_t,double const &)\n"
    "    std::vector< double >::vector(size_t)\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__getitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___getitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)std_vector_Sl_double_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__setitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::__setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___setitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double > > result;
  
  SWIG_check_num_args("std::vector< double >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::begin",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_begin",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = std_vector_Sl_double_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< double > * resultptr = new std::vector_iterator< double >((const std::vector_iterator< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double > > result;
  
  SWIG_check_num_args("std::vector< double >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::end",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_c_end",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = std_vector_Sl_double_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< double > * resultptr = new std::vector_iterator< double >((const std::vector_iterator< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< double >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(size_t)\n"
    "    std::vector< double >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::front",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_front",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("std::vector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::push_back",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_push_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::pop_back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::at",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_at",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("std::vector< double >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::assign",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::assign",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_assign",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::data",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_data",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::empty",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_empty",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::resize",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_resize",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::clear",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_clear",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< double >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::swap",1,"std::vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< double >::swap",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_swap",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_swap",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::shrink_to_fit",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::reserve",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_reserve",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::max_size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_max_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::capacity",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_capacity",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_vector(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_vector_methods[]= {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    { "begin", _wrap_double_vector_begin},
    { "c_end", _wrap_double_vector_c_end},
    { "erase", _wrap_double_vector_erase},
    { "front", _wrap_double_vector_front},
    { "back", _wrap_double_vector_back},
    { "push_back", _wrap_double_vector_push_back},
    { "pop_back", _wrap_double_vector_pop_back},
    { "at", _wrap_double_vector_at},
    { "assign", _wrap_double_vector_assign},
    { "data", _wrap_double_vector_data},
    { "size", _wrap_double_vector_size},
    { "empty", _wrap_double_vector_empty},
    { "resize", _wrap_double_vector_resize},
    { "clear", _wrap_double_vector_clear},
    { "swap", _wrap_double_vector_swap},
    { "shrink_to_fit", _wrap_double_vector_shrink_to_fit},
    { "reserve", _wrap_double_vector_reserve},
    { "max_size", _wrap_double_vector_max_size},
    { "capacity", _wrap_double_vector_capacity},
    {0,0}
};
static swig_lua_method swig_double_vector_meta[] = {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_vector_Sf_SwigStatic = {
    "double_vector",
    swig_double_vector_Sf_SwigStatic_methods,
    swig_double_vector_Sf_SwigStatic_attributes,
    swig_double_vector_Sf_SwigStatic_constants,
    swig_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_vector_bases[] = {0};
static const char *swig_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_double_vector = { "double_vector", "double_vector", &SWIGTYPE_p_std__vectorT_double_t,_proxy__wrap_new_double_vector, swig_delete_double_vector, swig_double_vector_methods, swig_double_vector_attributes, &swig_double_vector_Sf_SwigStatic, swig_double_vector_meta, swig_double_vector_bases, swig_double_vector_base_names };

static int _wrap_sp_auxdata_size_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_auxdata *arg1 = (sp_auxdata *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("sp_auxdata::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_auxdata::size",1,"sp_auxdata *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_auxdata::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_auxdata_size_set",1,SWIGTYPE_p_sp_auxdata);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_auxdata_size_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_auxdata *arg1 = (sp_auxdata *) 0 ;
  size_t result;
  
  SWIG_check_num_args("sp_auxdata::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_auxdata::size",1,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_auxdata_size_get",1,SWIGTYPE_p_sp_auxdata);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_auxdata_ptr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_auxdata *arg1 = (sp_auxdata *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("sp_auxdata::ptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_auxdata::ptr",1,"sp_auxdata *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_auxdata::ptr",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_auxdata_ptr_set",1,SWIGTYPE_p_sp_auxdata);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_auxdata_ptr_set");
  if (arg1) (arg1)->ptr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_auxdata_ptr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_auxdata *arg1 = (sp_auxdata *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("sp_auxdata::ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_auxdata::ptr",1,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_auxdata_ptr_get",1,SWIGTYPE_p_sp_auxdata);
  }
  
  result = (void *) ((arg1)->ptr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_auxdata(lua_State* L) {
  int SWIG_arg = 0;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_auxdata::sp_auxdata",0,0)
  result = (sp_auxdata *)new sp_auxdata();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_auxdata(void *obj) {
sp_auxdata *arg1 = (sp_auxdata *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_auxdata(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_auxdata);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_auxdata_attributes[] = {
    { "size", _wrap_sp_auxdata_size_get, _wrap_sp_auxdata_size_set },
    { "ptr", _wrap_sp_auxdata_ptr_get, _wrap_sp_auxdata_ptr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_auxdata_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_auxdata_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_auxdata_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_auxdata_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_auxdata_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_auxdata_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_auxdata_Sf_SwigStatic = {
    "sp_auxdata",
    swig_sp_auxdata_Sf_SwigStatic_methods,
    swig_sp_auxdata_Sf_SwigStatic_attributes,
    swig_sp_auxdata_Sf_SwigStatic_constants,
    swig_sp_auxdata_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_auxdata_bases[] = {0};
static const char *swig_sp_auxdata_base_names[] = {0};
static swig_lua_class _wrap_class_sp_auxdata = { "sp_auxdata", "sp_auxdata", &SWIGTYPE_p_sp_auxdata,_proxy__wrap_new_sp_auxdata, swig_delete_sp_auxdata, swig_sp_auxdata_methods, swig_sp_auxdata_attributes, &swig_sp_auxdata_Sf_SwigStatic, swig_sp_auxdata_meta, swig_sp_auxdata_bases, swig_sp_auxdata_base_names };

static int _wrap_sp_data_out_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_data::out",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_data::out",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_data::out",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_data_out_set",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_data_out_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->out = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_data_out_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_data::out",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_data::out",1,"sp_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_data_out_get",1,SWIGTYPE_p_sp_data);
  }
  
  result = (float *) ((arg1)->out);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_data_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_data::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_data::sr",1,"sp_data *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_data::sr",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_data_sr_set",1,SWIGTYPE_p_sp_data);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_data_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_data::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_data::sr",1,"sp_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_data_sr_get",1,SWIGTYPE_p_sp_data);
  }
  
  result = (int) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_data_nchan_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_data::nchan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_data::nchan",1,"sp_data *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_data::nchan",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_data_nchan_set",1,SWIGTYPE_p_sp_data);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nchan = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_data_nchan_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_data::nchan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_data::nchan",1,"sp_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_data_nchan_get",1,SWIGTYPE_p_sp_data);
  }
  
  result = (int) ((arg1)->nchan);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_data_len_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("sp_data::len",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_data::len",1,"sp_data *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_data::len",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_data_len_set",1,SWIGTYPE_p_sp_data);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  if (arg1) (arg1)->len = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_data_len_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("sp_data::len",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_data::len",1,"sp_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_data_len_get",1,SWIGTYPE_p_sp_data);
  }
  
  result = (unsigned long) ((arg1)->len);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_data_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("sp_data::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_data::pos",1,"sp_data *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_data::pos",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_data_pos_set",1,SWIGTYPE_p_sp_data);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_data_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("sp_data::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_data::pos",1,"sp_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_data_pos_get",1,SWIGTYPE_p_sp_data);
  }
  
  result = (unsigned long) ((arg1)->pos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_data_filename_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("sp_data::filename",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_data::filename",1,"sp_data *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("sp_data::filename",2,"char [200]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_data_filename_set",1,SWIGTYPE_p_sp_data);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->filename, (const char *)arg2, 200-1);
      arg1->filename[200-1] = 0;
    } else {
      arg1->filename[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_data_filename_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("sp_data::filename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_data::filename",1,"sp_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_data_filename_get",1,SWIGTYPE_p_sp_data);
  }
  
  result = (char *)(char *) ((arg1)->filename);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_data_rand_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_data::rand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_data::rand",1,"sp_data *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_data::rand",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_data_rand_set",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_data_rand_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->rand = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_data_rand_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_data::rand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_data::rand",1,"sp_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_data_rand_get",1,SWIGTYPE_p_sp_data);
  }
  
  result =  ((arg1)->rand);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_data(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *result = 0 ;
  
  SWIG_check_num_args("sp_data::sp_data",0,0)
  result = (sp_data *)new sp_data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_data,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_data(void *obj) {
sp_data *arg1 = (sp_data *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_data(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_data);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_data_attributes[] = {
    { "out", _wrap_sp_data_out_get, _wrap_sp_data_out_set },
    { "sr", _wrap_sp_data_sr_get, _wrap_sp_data_sr_set },
    { "nchan", _wrap_sp_data_nchan_get, _wrap_sp_data_nchan_set },
    { "len", _wrap_sp_data_len_get, _wrap_sp_data_len_set },
    { "pos", _wrap_sp_data_pos_get, _wrap_sp_data_pos_set },
    { "filename", _wrap_sp_data_filename_get, _wrap_sp_data_filename_set },
    { "rand", _wrap_sp_data_rand_get, _wrap_sp_data_rand_set },
    {0,0,0}
};
static swig_lua_method swig_sp_data_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_data_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_data_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_data_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_data_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_data_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_data_Sf_SwigStatic = {
    "sp_data",
    swig_sp_data_Sf_SwigStatic_methods,
    swig_sp_data_Sf_SwigStatic_attributes,
    swig_sp_data_Sf_SwigStatic_constants,
    swig_sp_data_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_data_bases[] = {0};
static const char *swig_sp_data_base_names[] = {0};
static swig_lua_class _wrap_class_sp_data = { "sp_data", "sp_data", &SWIGTYPE_p_sp_data,_proxy__wrap_new_sp_data, swig_delete_sp_data, swig_sp_data_methods, swig_sp_data_attributes, &swig_sp_data_Sf_SwigStatic, swig_sp_data_meta, swig_sp_data_bases, swig_sp_data_base_names };

static int _wrap_sp_param_state_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_param *arg1 = (sp_param *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("sp_param::state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_param::state",1,"sp_param *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("sp_param::state",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_param,0))){
    SWIG_fail_ptr("sp_param_state_set",1,SWIGTYPE_p_sp_param);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_param_state_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_param *arg1 = (sp_param *) 0 ;
  char result;
  
  SWIG_check_num_args("sp_param::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_param::state",1,"sp_param *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_param,0))){
    SWIG_fail_ptr("sp_param_state_get",1,SWIGTYPE_p_sp_param);
  }
  
  result = (char) ((arg1)->state);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_param_val_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_param *arg1 = (sp_param *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_param::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_param::val",1,"sp_param *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_param::val",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_param,0))){
    SWIG_fail_ptr("sp_param_val_set",1,SWIGTYPE_p_sp_param);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_param_val_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_param *arg1 = (sp_param *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_param::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_param::val",1,"sp_param *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_param,0))){
    SWIG_fail_ptr("sp_param_val_get",1,SWIGTYPE_p_sp_param);
  }
  
  result = (float) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_param(lua_State* L) {
  int SWIG_arg = 0;
  sp_param *result = 0 ;
  
  SWIG_check_num_args("sp_param::sp_param",0,0)
  result = (sp_param *)new sp_param();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_param,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_param(void *obj) {
sp_param *arg1 = (sp_param *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_param(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_param);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_param_attributes[] = {
    { "state", _wrap_sp_param_state_get, _wrap_sp_param_state_set },
    { "val", _wrap_sp_param_val_get, _wrap_sp_param_val_set },
    {0,0,0}
};
static swig_lua_method swig_sp_param_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_param_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_param_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_param_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_param_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_param_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_param_Sf_SwigStatic = {
    "sp_param",
    swig_sp_param_Sf_SwigStatic_methods,
    swig_sp_param_Sf_SwigStatic_attributes,
    swig_sp_param_Sf_SwigStatic_constants,
    swig_sp_param_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_param_bases[] = {0};
static const char *swig_sp_param_base_names[] = {0};
static swig_lua_class _wrap_class_sp_param = { "sp_param", "sp_param", &SWIGTYPE_p_sp_param,_proxy__wrap_new_sp_param, swig_delete_sp_param, swig_sp_param_methods, swig_sp_param_attributes, &swig_sp_param_Sf_SwigStatic, swig_sp_param_meta, swig_sp_param_bases, swig_sp_param_base_names };

static int _wrap_sp_auxdata_alloc(lua_State* L) {
  int SWIG_arg = 0;
  sp_auxdata *arg1 = (sp_auxdata *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("sp_auxdata_alloc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_auxdata_alloc",1,"sp_auxdata *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_auxdata_alloc",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_auxdata_alloc",1,SWIGTYPE_p_sp_auxdata);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)sp_auxdata_alloc(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_auxdata_free(lua_State* L) {
  int SWIG_arg = 0;
  sp_auxdata *arg1 = (sp_auxdata *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_auxdata_free",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_auxdata_free",1,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_auxdata_free",1,SWIGTYPE_p_sp_auxdata);
  }
  
  result = (int)sp_auxdata_free(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_data **arg1 = (sp_data **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_create",1,"sp_data **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_data,0))){
    SWIG_fail_ptr("sp_create",1,SWIGTYPE_p_p_sp_data);
  }
  
  result = (int)sp_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_createn(lua_State* L) {
  int SWIG_arg = 0;
  sp_data **arg1 = (sp_data **) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("sp_createn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_createn",1,"sp_data **");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_createn",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_data,0))){
    SWIG_fail_ptr("sp_createn",1,SWIGTYPE_p_p_sp_data);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)sp_createn(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_data **arg1 = (sp_data **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_destroy",1,"sp_data **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_data,0))){
    SWIG_fail_ptr("sp_destroy",1,SWIGTYPE_p_p_sp_data);
  }
  
  result = (int)sp_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_process(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  void *arg2 = (void *) 0 ;
  void (*arg3)(sp_data *,void *) = (void (*)(sp_data *,void *)) 0 ;
  int result;
  
  SWIG_check_num_args("sp_process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_process",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_process",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_process",3,"void (*)(sp_data *,void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_process",1,SWIGTYPE_p_sp_data);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_process");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_sp_data_p_void__void,0))){
    SWIG_fail_ptr("sp_process",3,SWIGTYPE_p_f_p_sp_data_p_void__void);
  }
  
  result = (int)sp_process(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_process_raw(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  void *arg2 = (void *) 0 ;
  void (*arg3)(sp_data *,void *) = (void (*)(sp_data *,void *)) 0 ;
  int result;
  
  SWIG_check_num_args("sp_process_raw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_process_raw",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_process_raw",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_process_raw",3,"void (*)(sp_data *,void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_process_raw",1,SWIGTYPE_p_sp_data);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_process_raw");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_sp_data_p_void__void,0))){
    SWIG_fail_ptr("sp_process_raw",3,SWIGTYPE_p_f_p_sp_data_p_void__void);
  }
  
  result = (int)sp_process_raw(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_process_plot(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  void *arg2 = (void *) 0 ;
  void (*arg3)(sp_data *,void *) = (void (*)(sp_data *,void *)) 0 ;
  int result;
  
  SWIG_check_num_args("sp_process_plot",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_process_plot",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_process_plot",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_process_plot",3,"void (*)(sp_data *,void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_process_plot",1,SWIGTYPE_p_sp_data);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_process_plot");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_sp_data_p_void__void,0))){
    SWIG_fail_ptr("sp_process_plot",3,SWIGTYPE_p_f_p_sp_data_p_void__void);
  }
  
  result = (int)sp_process_plot(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_process_spa(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  void *arg2 = (void *) 0 ;
  void (*arg3)(sp_data *,void *) = (void (*)(sp_data *,void *)) 0 ;
  int result;
  
  SWIG_check_num_args("sp_process_spa",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_process_spa",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_process_spa",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_process_spa",3,"void (*)(sp_data *,void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_process_spa",1,SWIGTYPE_p_sp_data);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_process_spa");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_sp_data_p_void__void,0))){
    SWIG_fail_ptr("sp_process_spa",3,SWIGTYPE_p_f_p_sp_data_p_void__void);
  }
  
  result = (int)sp_process_spa(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_midi2cps(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("sp_midi2cps",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sp_midi2cps",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)sp_midi2cps(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_param *arg1 = (sp_param *) 0 ;
  float arg2 ;
  int result;
  
  SWIG_check_num_args("sp_set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_set",1,"sp_param *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_set",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_param,0))){
    SWIG_fail_ptr("sp_set",1,SWIGTYPE_p_sp_param);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (int)sp_set(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_out(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  uint32_t arg2 ;
  float arg3 ;
  uint32_t *argp2 ;
  int result;
  
  SWIG_check_num_args("sp_out",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_out",1,"sp_data *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_out",2,"uint32_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_out",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_out",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_out",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)sp_out(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rand(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_rand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rand",1,"sp_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_rand",1,SWIGTYPE_p_sp_data);
  }
  
  result = sp_rand(arg1);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_srand(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_srand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_srand",1,"sp_data *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_srand",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_srand",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_srand",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  sp_srand(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fft_utbl_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fft *arg1 = (sp_fft *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_fft::utbl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fft::utbl",1,"sp_fft *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fft::utbl",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fft,0))){
    SWIG_fail_ptr("sp_fft_utbl_set",1,SWIGTYPE_p_sp_fft);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_fft_utbl_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->utbl = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fft_utbl_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fft *arg1 = (sp_fft *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_fft::utbl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fft::utbl",1,"sp_fft *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fft,0))){
    SWIG_fail_ptr("sp_fft_utbl_get",1,SWIGTYPE_p_sp_fft);
  }
  
  result = (float *) ((arg1)->utbl);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fft_BRLow_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fft *arg1 = (sp_fft *) 0 ;
  int16_t *arg2 = (int16_t *) 0 ;
  
  SWIG_check_num_args("sp_fft::BRLow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fft::BRLow",1,"sp_fft *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fft::BRLow",2,"int16_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fft,0))){
    SWIG_fail_ptr("sp_fft_BRLow_set",1,SWIGTYPE_p_sp_fft);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int16_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_fft_BRLow_set",2,SWIGTYPE_p_int16_t);
  }
  
  if (arg1) (arg1)->BRLow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fft_BRLow_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fft *arg1 = (sp_fft *) 0 ;
  int16_t *result = 0 ;
  
  SWIG_check_num_args("sp_fft::BRLow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fft::BRLow",1,"sp_fft *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fft,0))){
    SWIG_fail_ptr("sp_fft_BRLow_get",1,SWIGTYPE_p_sp_fft);
  }
  
  result = (int16_t *) ((arg1)->BRLow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int16_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fft_BRLowCpx_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fft *arg1 = (sp_fft *) 0 ;
  int16_t *arg2 = (int16_t *) 0 ;
  
  SWIG_check_num_args("sp_fft::BRLowCpx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fft::BRLowCpx",1,"sp_fft *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fft::BRLowCpx",2,"int16_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fft,0))){
    SWIG_fail_ptr("sp_fft_BRLowCpx_set",1,SWIGTYPE_p_sp_fft);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int16_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_fft_BRLowCpx_set",2,SWIGTYPE_p_int16_t);
  }
  
  if (arg1) (arg1)->BRLowCpx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fft_BRLowCpx_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fft *arg1 = (sp_fft *) 0 ;
  int16_t *result = 0 ;
  
  SWIG_check_num_args("sp_fft::BRLowCpx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fft::BRLowCpx",1,"sp_fft *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fft,0))){
    SWIG_fail_ptr("sp_fft_BRLowCpx_get",1,SWIGTYPE_p_sp_fft);
  }
  
  result = (int16_t *) ((arg1)->BRLowCpx);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int16_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_fft(lua_State* L) {
  int SWIG_arg = 0;
  sp_fft *result = 0 ;
  
  SWIG_check_num_args("sp_fft::sp_fft",0,0)
  result = (sp_fft *)new sp_fft();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fft,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_fft(void *obj) {
sp_fft *arg1 = (sp_fft *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_fft(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_fft);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_fft_attributes[] = {
    { "utbl", _wrap_sp_fft_utbl_get, _wrap_sp_fft_utbl_set },
    { "BRLow", _wrap_sp_fft_BRLow_get, _wrap_sp_fft_BRLow_set },
    { "BRLowCpx", _wrap_sp_fft_BRLowCpx_get, _wrap_sp_fft_BRLowCpx_set },
    {0,0,0}
};
static swig_lua_method swig_sp_fft_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_fft_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_fft_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_fft_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_fft_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_fft_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_fft_Sf_SwigStatic = {
    "sp_fft",
    swig_sp_fft_Sf_SwigStatic_methods,
    swig_sp_fft_Sf_SwigStatic_attributes,
    swig_sp_fft_Sf_SwigStatic_constants,
    swig_sp_fft_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_fft_bases[] = {0};
static const char *swig_sp_fft_base_names[] = {0};
static swig_lua_class _wrap_class_sp_fft = { "sp_fft", "sp_fft", &SWIGTYPE_p_sp_fft,_proxy__wrap_new_sp_fft, swig_delete_sp_fft, swig_sp_fft_methods, swig_sp_fft_attributes, &swig_sp_fft_Sf_SwigStatic, swig_sp_fft_meta, swig_sp_fft_bases, swig_sp_fft_base_names };

static int _wrap_sp_fft_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_fft *arg1 = (sp_fft *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_fft_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fft_init",1,"sp_fft *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fft_init",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fft,0))){
    SWIG_fail_ptr("sp_fft_init",1,SWIGTYPE_p_sp_fft);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  sp_fft_init(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fftr(lua_State* L) {
  int SWIG_arg = 0;
  sp_fft *arg1 = (sp_fft *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("sp_fftr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fftr",1,"sp_fft *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fftr",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_fftr",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fft,0))){
    SWIG_fail_ptr("sp_fftr",1,SWIGTYPE_p_sp_fft);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_fftr",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  sp_fftr(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fft_cpx(lua_State* L) {
  int SWIG_arg = 0;
  sp_fft *arg1 = (sp_fft *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("sp_fft_cpx",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fft_cpx",1,"sp_fft *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fft_cpx",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_fft_cpx",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fft,0))){
    SWIG_fail_ptr("sp_fft_cpx",1,SWIGTYPE_p_sp_fft);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_fft_cpx",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  sp_fft_cpx(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ifftr(lua_State* L) {
  int SWIG_arg = 0;
  sp_fft *arg1 = (sp_fft *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("sp_ifftr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ifftr",1,"sp_fft *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ifftr",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_ifftr",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fft,0))){
    SWIG_fail_ptr("sp_ifftr",1,SWIGTYPE_p_sp_fft);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_ifftr",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  sp_ifftr(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fft_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_fft *arg1 = (sp_fft *) 0 ;
  
  SWIG_check_num_args("sp_fft_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fft_destroy",1,"sp_fft *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fft,0))){
    SWIG_fail_ptr("sp_fft_destroy",1,SWIGTYPE_p_sp_fft);
  }
  
  sp_fft_destroy(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kiss_fft_cpx_r_set(lua_State* L) {
  int SWIG_arg = 0;
  kiss_fft_cpx *arg1 = (kiss_fft_cpx *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("kiss_fft_cpx::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kiss_fft_cpx::r",1,"kiss_fft_cpx *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kiss_fft_cpx::r",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kiss_fft_cpx,0))){
    SWIG_fail_ptr("kiss_fft_cpx_r_set",1,SWIGTYPE_p_kiss_fft_cpx);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kiss_fft_cpx_r_get(lua_State* L) {
  int SWIG_arg = 0;
  kiss_fft_cpx *arg1 = (kiss_fft_cpx *) 0 ;
  float result;
  
  SWIG_check_num_args("kiss_fft_cpx::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kiss_fft_cpx::r",1,"kiss_fft_cpx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kiss_fft_cpx,0))){
    SWIG_fail_ptr("kiss_fft_cpx_r_get",1,SWIGTYPE_p_kiss_fft_cpx);
  }
  
  result = (float) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kiss_fft_cpx_i_set(lua_State* L) {
  int SWIG_arg = 0;
  kiss_fft_cpx *arg1 = (kiss_fft_cpx *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("kiss_fft_cpx::i",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kiss_fft_cpx::i",1,"kiss_fft_cpx *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kiss_fft_cpx::i",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kiss_fft_cpx,0))){
    SWIG_fail_ptr("kiss_fft_cpx_i_set",1,SWIGTYPE_p_kiss_fft_cpx);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->i = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kiss_fft_cpx_i_get(lua_State* L) {
  int SWIG_arg = 0;
  kiss_fft_cpx *arg1 = (kiss_fft_cpx *) 0 ;
  float result;
  
  SWIG_check_num_args("kiss_fft_cpx::i",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kiss_fft_cpx::i",1,"kiss_fft_cpx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kiss_fft_cpx,0))){
    SWIG_fail_ptr("kiss_fft_cpx_i_get",1,SWIGTYPE_p_kiss_fft_cpx);
  }
  
  result = (float) ((arg1)->i);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_kiss_fft_cpx(lua_State* L) {
  int SWIG_arg = 0;
  kiss_fft_cpx *result = 0 ;
  
  SWIG_check_num_args("kiss_fft_cpx::kiss_fft_cpx",0,0)
  result = (kiss_fft_cpx *)new kiss_fft_cpx();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kiss_fft_cpx,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_kiss_fft_cpx(void *obj) {
kiss_fft_cpx *arg1 = (kiss_fft_cpx *) obj;
delete arg1;
}
static int _proxy__wrap_new_kiss_fft_cpx(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_kiss_fft_cpx);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_kiss_fft_cpx_attributes[] = {
    { "r", _wrap_kiss_fft_cpx_r_get, _wrap_kiss_fft_cpx_r_set },
    { "i", _wrap_kiss_fft_cpx_i_get, _wrap_kiss_fft_cpx_i_set },
    {0,0,0}
};
static swig_lua_method swig_kiss_fft_cpx_methods[]= {
    {0,0}
};
static swig_lua_method swig_kiss_fft_cpx_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_kiss_fft_cpx_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_kiss_fft_cpx_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_kiss_fft_cpx_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_kiss_fft_cpx_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_kiss_fft_cpx_Sf_SwigStatic = {
    "kiss_fft_cpx",
    swig_kiss_fft_cpx_Sf_SwigStatic_methods,
    swig_kiss_fft_cpx_Sf_SwigStatic_attributes,
    swig_kiss_fft_cpx_Sf_SwigStatic_constants,
    swig_kiss_fft_cpx_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_kiss_fft_cpx_bases[] = {0};
static const char *swig_kiss_fft_cpx_base_names[] = {0};
static swig_lua_class _wrap_class_kiss_fft_cpx = { "kiss_fft_cpx", "kiss_fft_cpx", &SWIGTYPE_p_kiss_fft_cpx,_proxy__wrap_new_kiss_fft_cpx, swig_delete_kiss_fft_cpx, swig_kiss_fft_cpx_methods, swig_kiss_fft_cpx_attributes, &swig_kiss_fft_cpx_Sf_SwigStatic, swig_kiss_fft_cpx_meta, swig_kiss_fft_cpx_bases, swig_kiss_fft_cpx_base_names };

static int _wrap_spa_header_magic_set(lua_State* L) {
  int SWIG_arg = 0;
  spa_header *arg1 = (spa_header *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("spa_header::magic",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("spa_header::magic",1,"spa_header *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("spa_header::magic",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_spa_header,0))){
    SWIG_fail_ptr("spa_header_magic_set",1,SWIGTYPE_p_spa_header);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->magic = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_spa_header_magic_get(lua_State* L) {
  int SWIG_arg = 0;
  spa_header *arg1 = (spa_header *) 0 ;
  char result;
  
  SWIG_check_num_args("spa_header::magic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("spa_header::magic",1,"spa_header *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_spa_header,0))){
    SWIG_fail_ptr("spa_header_magic_get",1,SWIGTYPE_p_spa_header);
  }
  
  result = (char) ((arg1)->magic);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_spa_header_nchan_set(lua_State* L) {
  int SWIG_arg = 0;
  spa_header *arg1 = (spa_header *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("spa_header::nchan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("spa_header::nchan",1,"spa_header *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("spa_header::nchan",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_spa_header,0))){
    SWIG_fail_ptr("spa_header_nchan_set",1,SWIGTYPE_p_spa_header);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->nchan = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_spa_header_nchan_get(lua_State* L) {
  int SWIG_arg = 0;
  spa_header *arg1 = (spa_header *) 0 ;
  char result;
  
  SWIG_check_num_args("spa_header::nchan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("spa_header::nchan",1,"spa_header *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_spa_header,0))){
    SWIG_fail_ptr("spa_header_nchan_get",1,SWIGTYPE_p_spa_header);
  }
  
  result = (char) ((arg1)->nchan);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_spa_header_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  spa_header *arg1 = (spa_header *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  SWIG_check_num_args("spa_header::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("spa_header::sr",1,"spa_header *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("spa_header::sr",2,"uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_spa_header,0))){
    SWIG_fail_ptr("spa_header_sr_set",1,SWIGTYPE_p_spa_header);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint16_t,0))){
    SWIG_fail_ptr("spa_header_sr_set",2,SWIGTYPE_p_uint16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_spa_header_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  spa_header *arg1 = (spa_header *) 0 ;
  uint16_t result;
  
  SWIG_check_num_args("spa_header::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("spa_header::sr",1,"spa_header *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_spa_header,0))){
    SWIG_fail_ptr("spa_header_sr_get",1,SWIGTYPE_p_spa_header);
  }
  
  result =  ((arg1)->sr);
  {
    uint16_t * resultptr = new uint16_t((const uint16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_spa_header_len_set(lua_State* L) {
  int SWIG_arg = 0;
  spa_header *arg1 = (spa_header *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("spa_header::len",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("spa_header::len",1,"spa_header *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("spa_header::len",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_spa_header,0))){
    SWIG_fail_ptr("spa_header_len_set",1,SWIGTYPE_p_spa_header);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("spa_header_len_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->len = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_spa_header_len_get(lua_State* L) {
  int SWIG_arg = 0;
  spa_header *arg1 = (spa_header *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("spa_header::len",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("spa_header::len",1,"spa_header *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_spa_header,0))){
    SWIG_fail_ptr("spa_header_len_get",1,SWIGTYPE_p_spa_header);
  }
  
  result =  ((arg1)->len);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_spa_header(lua_State* L) {
  int SWIG_arg = 0;
  spa_header *result = 0 ;
  
  SWIG_check_num_args("spa_header::spa_header",0,0)
  result = (spa_header *)new spa_header();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_spa_header,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_spa_header(void *obj) {
spa_header *arg1 = (spa_header *) obj;
delete arg1;
}
static int _proxy__wrap_new_spa_header(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_spa_header);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_spa_header_attributes[] = {
    { "magic", _wrap_spa_header_magic_get, _wrap_spa_header_magic_set },
    { "nchan", _wrap_spa_header_nchan_get, _wrap_spa_header_nchan_set },
    { "sr", _wrap_spa_header_sr_get, _wrap_spa_header_sr_set },
    { "len", _wrap_spa_header_len_get, _wrap_spa_header_len_set },
    {0,0,0}
};
static swig_lua_method swig_spa_header_methods[]= {
    {0,0}
};
static swig_lua_method swig_spa_header_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_spa_header_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_spa_header_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_spa_header_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_spa_header_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_spa_header_Sf_SwigStatic = {
    "spa_header",
    swig_spa_header_Sf_SwigStatic_methods,
    swig_spa_header_Sf_SwigStatic_attributes,
    swig_spa_header_Sf_SwigStatic_constants,
    swig_spa_header_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_spa_header_bases[] = {0};
static const char *swig_spa_header_base_names[] = {0};
static swig_lua_class _wrap_class_spa_header = { "spa_header", "spa_header", &SWIGTYPE_p_spa_header,_proxy__wrap_new_spa_header, swig_delete_spa_header, swig_spa_header_methods, swig_spa_header_attributes, &swig_spa_header_Sf_SwigStatic, swig_spa_header_meta, swig_spa_header_bases, swig_spa_header_base_names };

static int _wrap_sp_audio_header_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_audio *arg1 = (sp_audio *) 0 ;
  spa_header *arg2 = (spa_header *) 0 ;
  
  SWIG_check_num_args("sp_audio::header",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_audio::header",1,"sp_audio *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_audio::header",2,"spa_header *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("sp_audio_header_set",1,SWIGTYPE_p_sp_audio);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_spa_header,0))){
    SWIG_fail_ptr("sp_audio_header_set",2,SWIGTYPE_p_spa_header);
  }
  
  if (arg1) (arg1)->header = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_audio_header_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_audio *arg1 = (sp_audio *) 0 ;
  spa_header *result = 0 ;
  
  SWIG_check_num_args("sp_audio::header",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_audio::header",1,"sp_audio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("sp_audio_header_get",1,SWIGTYPE_p_sp_audio);
  }
  
  result = (spa_header *)& ((arg1)->header);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_spa_header,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_audio_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_audio *arg1 = (sp_audio *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("sp_audio::offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_audio::offset",1,"sp_audio *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_audio::offset",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("sp_audio_offset_set",1,SWIGTYPE_p_sp_audio);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_audio_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_audio *arg1 = (sp_audio *) 0 ;
  size_t result;
  
  SWIG_check_num_args("sp_audio::offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_audio::offset",1,"sp_audio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("sp_audio_offset_get",1,SWIGTYPE_p_sp_audio);
  }
  
  result =  ((arg1)->offset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_audio_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_audio *arg1 = (sp_audio *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_audio::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_audio::mode",1,"sp_audio *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_audio::mode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("sp_audio_mode_set",1,SWIGTYPE_p_sp_audio);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_audio_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_audio *arg1 = (sp_audio *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_audio::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_audio::mode",1,"sp_audio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("sp_audio_mode_get",1,SWIGTYPE_p_sp_audio);
  }
  
  result = (int) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_audio_fp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_audio *arg1 = (sp_audio *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  SWIG_check_num_args("sp_audio::fp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_audio::fp",1,"sp_audio *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_audio::fp",2,"FILE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("sp_audio_fp_set",1,SWIGTYPE_p_sp_audio);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_audio_fp_set",2,SWIGTYPE_p_FILE);
  }
  
  if (arg1) (arg1)->fp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_audio_fp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_audio *arg1 = (sp_audio *) 0 ;
  FILE *result = 0 ;
  
  SWIG_check_num_args("sp_audio::fp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_audio::fp",1,"sp_audio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("sp_audio_fp_get",1,SWIGTYPE_p_sp_audio);
  }
  
  result = (FILE *) ((arg1)->fp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FILE,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_audio_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_audio *arg1 = (sp_audio *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_audio::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_audio::pos",1,"sp_audio *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_audio::pos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("sp_audio_pos_set",1,SWIGTYPE_p_sp_audio);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_audio_pos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_audio_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_audio *arg1 = (sp_audio *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_audio::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_audio::pos",1,"sp_audio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("sp_audio_pos_get",1,SWIGTYPE_p_sp_audio);
  }
  
  result =  ((arg1)->pos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_audio(lua_State* L) {
  int SWIG_arg = 0;
  sp_audio *result = 0 ;
  
  SWIG_check_num_args("sp_audio::sp_audio",0,0)
  result = (sp_audio *)new sp_audio();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_audio,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_audio(void *obj) {
sp_audio *arg1 = (sp_audio *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_audio(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_audio);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_audio_attributes[] = {
    { "header", _wrap_sp_audio_header_get, _wrap_sp_audio_header_set },
    { "offset", _wrap_sp_audio_offset_get, _wrap_sp_audio_offset_set },
    { "mode", _wrap_sp_audio_mode_get, _wrap_sp_audio_mode_set },
    { "fp", _wrap_sp_audio_fp_get, _wrap_sp_audio_fp_set },
    { "pos", _wrap_sp_audio_pos_get, _wrap_sp_audio_pos_set },
    {0,0,0}
};
static swig_lua_method swig_sp_audio_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_audio_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_audio_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_audio_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_audio_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_audio_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_audio_Sf_SwigStatic = {
    "sp_audio",
    swig_sp_audio_Sf_SwigStatic_methods,
    swig_sp_audio_Sf_SwigStatic_attributes,
    swig_sp_audio_Sf_SwigStatic_constants,
    swig_sp_audio_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_audio_bases[] = {0};
static const char *swig_sp_audio_base_names[] = {0};
static swig_lua_class _wrap_class_sp_audio = { "sp_audio", "sp_audio", &SWIGTYPE_p_sp_audio,_proxy__wrap_new_sp_audio, swig_delete_sp_audio, swig_sp_audio_methods, swig_sp_audio_attributes, &swig_sp_audio_Sf_SwigStatic, swig_sp_audio_meta, swig_sp_audio_bases, swig_sp_audio_base_names };

static int _wrap_sp_ftbl_size_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *arg1 = (sp_ftbl *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("sp_ftbl::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl::size",1,"sp_ftbl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ftbl::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_size_set",1,SWIGTYPE_p_sp_ftbl);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_size_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *arg1 = (sp_ftbl *) 0 ;
  size_t result;
  
  SWIG_check_num_args("sp_ftbl::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl::size",1,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_size_get",1,SWIGTYPE_p_sp_ftbl);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_lobits_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *arg1 = (sp_ftbl *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_ftbl::lobits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl::lobits",1,"sp_ftbl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_ftbl::lobits",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_lobits_set",1,SWIGTYPE_p_sp_ftbl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_ftbl_lobits_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->lobits = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_lobits_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *arg1 = (sp_ftbl *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_ftbl::lobits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl::lobits",1,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_lobits_get",1,SWIGTYPE_p_sp_ftbl);
  }
  
  result =  ((arg1)->lobits);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_lomask_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *arg1 = (sp_ftbl *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_ftbl::lomask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl::lomask",1,"sp_ftbl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_ftbl::lomask",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_lomask_set",1,SWIGTYPE_p_sp_ftbl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_ftbl_lomask_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->lomask = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_lomask_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *arg1 = (sp_ftbl *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_ftbl::lomask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl::lomask",1,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_lomask_get",1,SWIGTYPE_p_sp_ftbl);
  }
  
  result =  ((arg1)->lomask);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_lodiv_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *arg1 = (sp_ftbl *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_ftbl::lodiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl::lodiv",1,"sp_ftbl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ftbl::lodiv",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_lodiv_set",1,SWIGTYPE_p_sp_ftbl);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lodiv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_lodiv_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *arg1 = (sp_ftbl *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_ftbl::lodiv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl::lodiv",1,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_lodiv_get",1,SWIGTYPE_p_sp_ftbl);
  }
  
  result = (float) ((arg1)->lodiv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_sicvt_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *arg1 = (sp_ftbl *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_ftbl::sicvt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl::sicvt",1,"sp_ftbl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ftbl::sicvt",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_sicvt_set",1,SWIGTYPE_p_sp_ftbl);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sicvt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_sicvt_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *arg1 = (sp_ftbl *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_ftbl::sicvt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl::sicvt",1,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_sicvt_get",1,SWIGTYPE_p_sp_ftbl);
  }
  
  result = (float) ((arg1)->sicvt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_tbl_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *arg1 = (sp_ftbl *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_ftbl::tbl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl::tbl",1,"sp_ftbl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ftbl::tbl",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_tbl_set",1,SWIGTYPE_p_sp_ftbl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_ftbl_tbl_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->tbl = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_tbl_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *arg1 = (sp_ftbl *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_ftbl::tbl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl::tbl",1,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_tbl_get",1,SWIGTYPE_p_sp_ftbl);
  }
  
  result = (float *) ((arg1)->tbl);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_del_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *arg1 = (sp_ftbl *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("sp_ftbl::del",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl::del",1,"sp_ftbl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("sp_ftbl::del",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_del_set",1,SWIGTYPE_p_sp_ftbl);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->del = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_del_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *arg1 = (sp_ftbl *) 0 ;
  char result;
  
  SWIG_check_num_args("sp_ftbl::del",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl::del",1,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_del_get",1,SWIGTYPE_p_sp_ftbl);
  }
  
  result = (char) ((arg1)->del);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_ftbl(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_ftbl::sp_ftbl",0,0)
  result = (sp_ftbl *)new sp_ftbl();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_ftbl(void *obj) {
sp_ftbl *arg1 = (sp_ftbl *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_ftbl(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_ftbl);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_ftbl_attributes[] = {
    { "size", _wrap_sp_ftbl_size_get, _wrap_sp_ftbl_size_set },
    { "lobits", _wrap_sp_ftbl_lobits_get, _wrap_sp_ftbl_lobits_set },
    { "lomask", _wrap_sp_ftbl_lomask_get, _wrap_sp_ftbl_lomask_set },
    { "lodiv", _wrap_sp_ftbl_lodiv_get, _wrap_sp_ftbl_lodiv_set },
    { "sicvt", _wrap_sp_ftbl_sicvt_get, _wrap_sp_ftbl_sicvt_set },
    { "tbl", _wrap_sp_ftbl_tbl_get, _wrap_sp_ftbl_tbl_set },
    { "del", _wrap_sp_ftbl_del_get, _wrap_sp_ftbl_del_set },
    {0,0,0}
};
static swig_lua_method swig_sp_ftbl_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_ftbl_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_ftbl_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_ftbl_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_ftbl_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_ftbl_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_ftbl_Sf_SwigStatic = {
    "sp_ftbl",
    swig_sp_ftbl_Sf_SwigStatic_methods,
    swig_sp_ftbl_Sf_SwigStatic_attributes,
    swig_sp_ftbl_Sf_SwigStatic_constants,
    swig_sp_ftbl_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_ftbl_bases[] = {0};
static const char *swig_sp_ftbl_base_names[] = {0};
static swig_lua_class _wrap_class_sp_ftbl = { "sp_ftbl", "sp_ftbl", &SWIGTYPE_p_sp_ftbl,_proxy__wrap_new_sp_ftbl, swig_delete_sp_ftbl, swig_sp_ftbl_methods, swig_sp_ftbl_attributes, &swig_sp_ftbl_Sf_SwigStatic, swig_sp_ftbl_meta, swig_sp_ftbl_bases, swig_sp_ftbl_base_names };

static int _wrap_sp_ftbl_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl **arg2 = (sp_ftbl **) 0 ;
  size_t arg3 ;
  int result;
  
  SWIG_check_num_args("sp_ftbl_create",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl_create",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ftbl_create",2,"sp_ftbl **");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_ftbl_create",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_ftbl_create",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_create",2,SWIGTYPE_p_p_sp_ftbl);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (int)sp_ftbl_create(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  size_t arg3 ;
  int result;
  
  SWIG_check_num_args("sp_ftbl_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ftbl_init",2,"sp_ftbl *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_ftbl_init",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_ftbl_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_init",2,SWIGTYPE_p_sp_ftbl);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (int)sp_ftbl_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_bind(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl **arg2 = (sp_ftbl **) 0 ;
  float *arg3 = (float *) 0 ;
  size_t arg4 ;
  int result;
  
  SWIG_check_num_args("sp_ftbl_bind",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl_bind",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ftbl_bind",2,"sp_ftbl **");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_ftbl_bind",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("sp_ftbl_bind",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_ftbl_bind",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_bind",2,SWIGTYPE_p_p_sp_ftbl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_ftbl_bind",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (int)sp_ftbl_bind(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_ftbl **arg1 = (sp_ftbl **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_ftbl_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl_destroy",1,"sp_ftbl **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_destroy",1,SWIGTYPE_p_p_sp_ftbl);
  }
  
  result = (int)sp_ftbl_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gen_vals(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_gen_vals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gen_vals",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gen_vals",2,"sp_ftbl *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_gen_vals",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_gen_vals",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gen_vals",2,SWIGTYPE_p_sp_ftbl);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_gen_vals(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gen_sine(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_gen_sine",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gen_sine",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gen_sine",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_gen_sine",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gen_sine",2,SWIGTYPE_p_sp_ftbl);
  }
  
  result = (int)sp_gen_sine(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gen_file(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_gen_file",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gen_file",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gen_file",2,"sp_ftbl *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_gen_file",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_gen_file",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gen_file",2,SWIGTYPE_p_sp_ftbl);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_gen_file(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gen_sinesum(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_gen_sinesum",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gen_sinesum",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gen_sinesum",2,"sp_ftbl *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_gen_sinesum",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_gen_sinesum",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gen_sinesum",2,SWIGTYPE_p_sp_ftbl);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_gen_sinesum(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gen_line(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_gen_line",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gen_line",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gen_line",2,"sp_ftbl *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_gen_line",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_gen_line",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gen_line",2,SWIGTYPE_p_sp_ftbl);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_gen_line(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gen_xline(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_gen_xline",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gen_xline",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gen_xline",2,"sp_ftbl *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_gen_xline",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_gen_xline",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gen_xline",2,SWIGTYPE_p_sp_ftbl);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_gen_xline(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gen_gauss(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  float arg3 ;
  uint32_t arg4 ;
  uint32_t *argp4 ;
  int result;
  
  SWIG_check_num_args("sp_gen_gauss",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gen_gauss",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gen_gauss",2,"sp_ftbl *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_gen_gauss",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("sp_gen_gauss",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_gen_gauss",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gen_gauss",2,SWIGTYPE_p_sp_ftbl);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_gen_gauss",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  result = (int)sp_gen_gauss(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_loadfile(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl **arg2 = (sp_ftbl **) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_ftbl_loadfile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl_loadfile",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ftbl_loadfile",2,"sp_ftbl **");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_ftbl_loadfile",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_ftbl_loadfile",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_loadfile",2,SWIGTYPE_p_p_sp_ftbl);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_ftbl_loadfile(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ftbl_loadspa(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl **arg2 = (sp_ftbl **) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_ftbl_loadspa",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ftbl_loadspa",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ftbl_loadspa",2,"sp_ftbl **");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_ftbl_loadspa",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_ftbl_loadspa",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_ftbl_loadspa",2,SWIGTYPE_p_p_sp_ftbl);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_ftbl_loadspa(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gen_composite(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_gen_composite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gen_composite",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gen_composite",2,"sp_ftbl *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_gen_composite",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_gen_composite",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gen_composite",2,SWIGTYPE_p_sp_ftbl);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_gen_composite(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gen_rand(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_gen_rand",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gen_rand",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gen_rand",2,"sp_ftbl *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_gen_rand",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_gen_rand",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gen_rand",2,SWIGTYPE_p_sp_ftbl);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_gen_rand(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gen_triangle(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_gen_triangle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gen_triangle",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gen_triangle",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_gen_triangle",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gen_triangle",2,SWIGTYPE_p_sp_ftbl);
  }
  
  result = (int)sp_gen_triangle(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tevent_reinit_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tevent *arg1 = (sp_tevent *) 0 ;
  void (*arg2)(void *) = (void (*)(void *)) 0 ;
  
  SWIG_check_num_args("sp_tevent::reinit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tevent::reinit",1,"sp_tevent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tevent::reinit",2,"void (*)(void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tevent,0))){
    SWIG_fail_ptr("sp_tevent_reinit_set",1,SWIGTYPE_p_sp_tevent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void__void,0))){
    SWIG_fail_ptr("sp_tevent_reinit_set",2,SWIGTYPE_p_f_p_void__void);
  }
  
  if (arg1) (arg1)->reinit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tevent_reinit_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tevent *arg1 = (sp_tevent *) 0 ;
  void (*result)(void *) = 0 ;
  
  SWIG_check_num_args("sp_tevent::reinit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tevent::reinit",1,"sp_tevent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tevent,0))){
    SWIG_fail_ptr("sp_tevent_reinit_get",1,SWIGTYPE_p_sp_tevent);
  }
  
  result = (void (*)(void *)) ((arg1)->reinit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_void__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tevent_compute_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tevent *arg1 = (sp_tevent *) 0 ;
  void (*arg2)(void *,float *) = (void (*)(void *,float *)) 0 ;
  
  SWIG_check_num_args("sp_tevent::compute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tevent::compute",1,"sp_tevent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tevent::compute",2,"void (*)(void *,float *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tevent,0))){
    SWIG_fail_ptr("sp_tevent_compute_set",1,SWIGTYPE_p_sp_tevent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_p_float__void,0))){
    SWIG_fail_ptr("sp_tevent_compute_set",2,SWIGTYPE_p_f_p_void_p_float__void);
  }
  
  if (arg1) (arg1)->compute = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tevent_compute_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tevent *arg1 = (sp_tevent *) 0 ;
  void (*result)(void *,float *) = 0 ;
  
  SWIG_check_num_args("sp_tevent::compute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tevent::compute",1,"sp_tevent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tevent,0))){
    SWIG_fail_ptr("sp_tevent_compute_get",1,SWIGTYPE_p_sp_tevent);
  }
  
  result = (void (*)(void *,float *)) ((arg1)->compute);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_void_p_float__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tevent_ud_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tevent *arg1 = (sp_tevent *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("sp_tevent::ud",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tevent::ud",1,"sp_tevent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tevent::ud",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tevent,0))){
    SWIG_fail_ptr("sp_tevent_ud_set",1,SWIGTYPE_p_sp_tevent);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_tevent_ud_set");
  if (arg1) (arg1)->ud = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tevent_ud_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tevent *arg1 = (sp_tevent *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("sp_tevent::ud",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tevent::ud",1,"sp_tevent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tevent,0))){
    SWIG_fail_ptr("sp_tevent_ud_get",1,SWIGTYPE_p_sp_tevent);
  }
  
  result = (void *) ((arg1)->ud);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tevent_started_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tevent *arg1 = (sp_tevent *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_tevent::started",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tevent::started",1,"sp_tevent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tevent::started",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tevent,0))){
    SWIG_fail_ptr("sp_tevent_started_set",1,SWIGTYPE_p_sp_tevent);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->started = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tevent_started_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tevent *arg1 = (sp_tevent *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tevent::started",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tevent::started",1,"sp_tevent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tevent,0))){
    SWIG_fail_ptr("sp_tevent_started_get",1,SWIGTYPE_p_sp_tevent);
  }
  
  result = (int) ((arg1)->started);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_tevent(lua_State* L) {
  int SWIG_arg = 0;
  sp_tevent *result = 0 ;
  
  SWIG_check_num_args("sp_tevent::sp_tevent",0,0)
  result = (sp_tevent *)new sp_tevent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tevent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_tevent(void *obj) {
sp_tevent *arg1 = (sp_tevent *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_tevent(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_tevent);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_tevent_attributes[] = {
    { "reinit", _wrap_sp_tevent_reinit_get, _wrap_sp_tevent_reinit_set },
    { "compute", _wrap_sp_tevent_compute_get, _wrap_sp_tevent_compute_set },
    { "ud", _wrap_sp_tevent_ud_get, _wrap_sp_tevent_ud_set },
    { "started", _wrap_sp_tevent_started_get, _wrap_sp_tevent_started_set },
    {0,0,0}
};
static swig_lua_method swig_sp_tevent_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_tevent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_tevent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_tevent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_tevent_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_tevent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_tevent_Sf_SwigStatic = {
    "sp_tevent",
    swig_sp_tevent_Sf_SwigStatic_methods,
    swig_sp_tevent_Sf_SwigStatic_attributes,
    swig_sp_tevent_Sf_SwigStatic_constants,
    swig_sp_tevent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_tevent_bases[] = {0};
static const char *swig_sp_tevent_base_names[] = {0};
static swig_lua_class _wrap_class_sp_tevent = { "sp_tevent", "sp_tevent", &SWIGTYPE_p_sp_tevent,_proxy__wrap_new_sp_tevent, swig_delete_sp_tevent, swig_sp_tevent_methods, swig_sp_tevent_attributes, &swig_sp_tevent_Sf_SwigStatic, swig_sp_tevent_meta, swig_sp_tevent_bases, swig_sp_tevent_base_names };

static int _wrap_sp_tevent_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_tevent **arg1 = (sp_tevent **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tevent_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tevent_create",1,"sp_tevent **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tevent,0))){
    SWIG_fail_ptr("sp_tevent_create",1,SWIGTYPE_p_p_sp_tevent);
  }
  
  result = (int)sp_tevent_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tevent_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_tevent **arg1 = (sp_tevent **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tevent_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tevent_destroy",1,"sp_tevent **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tevent,0))){
    SWIG_fail_ptr("sp_tevent_destroy",1,SWIGTYPE_p_p_sp_tevent);
  }
  
  result = (int)sp_tevent_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tevent_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tevent *arg2 = (sp_tevent *) 0 ;
  void (*arg3)(void *) = (void (*)(void *)) 0 ;
  void (*arg4)(void *,float *) = (void (*)(void *,float *)) 0 ;
  void *arg5 = (void *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tevent_init",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tevent_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tevent_init",2,"sp_tevent *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tevent_init",3,"void (*)(void *)");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tevent_init",4,"void (*)(void *,float *)");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_tevent_init",5,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tevent_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tevent,0))){
    SWIG_fail_ptr("sp_tevent_init",2,SWIGTYPE_p_sp_tevent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_void__void,0))){
    SWIG_fail_ptr("sp_tevent_init",3,SWIGTYPE_p_f_p_void__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_f_p_void_p_float__void,0))){
    SWIG_fail_ptr("sp_tevent_init",4,SWIGTYPE_p_f_p_void_p_float__void);
  }
  
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"sp_tevent_init");
  result = (int)sp_tevent_init(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tevent_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tevent *arg2 = (sp_tevent *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tevent_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tevent_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tevent_compute",2,"sp_tevent *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tevent_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tevent_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tevent_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tevent,0))){
    SWIG_fail_ptr("sp_tevent_compute",2,SWIGTYPE_p_sp_tevent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tevent_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tevent_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_tevent_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_atk_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_adsr::atk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::atk",1,"sp_adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_adsr::atk",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_atk_set",1,SWIGTYPE_p_sp_adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->atk = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_atk_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_adsr::atk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::atk",1,"sp_adsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_atk_get",1,SWIGTYPE_p_sp_adsr);
  }
  
  result = (float) ((arg1)->atk);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_dec_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_adsr::dec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::dec",1,"sp_adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_adsr::dec",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_dec_set",1,SWIGTYPE_p_sp_adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_dec_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_adsr::dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::dec",1,"sp_adsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_dec_get",1,SWIGTYPE_p_sp_adsr);
  }
  
  result = (float) ((arg1)->dec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_sus_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_adsr::sus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::sus",1,"sp_adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_adsr::sus",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_sus_set",1,SWIGTYPE_p_sp_adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sus = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_sus_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_adsr::sus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::sus",1,"sp_adsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_sus_get",1,SWIGTYPE_p_sp_adsr);
  }
  
  result = (float) ((arg1)->sus);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_rel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_adsr::rel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::rel",1,"sp_adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_adsr::rel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_rel_set",1,SWIGTYPE_p_sp_adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_rel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_adsr::rel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::rel",1,"sp_adsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_rel_get",1,SWIGTYPE_p_sp_adsr);
  }
  
  result = (float) ((arg1)->rel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_timer_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_adsr::timer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::timer",1,"sp_adsr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_adsr::timer",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_timer_set",1,SWIGTYPE_p_sp_adsr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_adsr_timer_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->timer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_timer_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_adsr::timer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::timer",1,"sp_adsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_timer_get",1,SWIGTYPE_p_sp_adsr);
  }
  
  result =  ((arg1)->timer);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_atk_time_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_adsr::atk_time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::atk_time",1,"sp_adsr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_adsr::atk_time",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_atk_time_set",1,SWIGTYPE_p_sp_adsr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_adsr_atk_time_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->atk_time = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_atk_time_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_adsr::atk_time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::atk_time",1,"sp_adsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_atk_time_get",1,SWIGTYPE_p_sp_adsr);
  }
  
  result =  ((arg1)->atk_time);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_a_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_adsr::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::a",1,"sp_adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_adsr::a",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_a_set",1,SWIGTYPE_p_sp_adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_a_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_adsr::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::a",1,"sp_adsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_a_get",1,SWIGTYPE_p_sp_adsr);
  }
  
  result = (float) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_b_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_adsr::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::b",1,"sp_adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_adsr::b",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_b_set",1,SWIGTYPE_p_sp_adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_b_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_adsr::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::b",1,"sp_adsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_b_get",1,SWIGTYPE_p_sp_adsr);
  }
  
  result = (float) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_y_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_adsr::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::y",1,"sp_adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_adsr::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_y_set",1,SWIGTYPE_p_sp_adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_y_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_adsr::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::y",1,"sp_adsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_y_get",1,SWIGTYPE_p_sp_adsr);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_x_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_adsr::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::x",1,"sp_adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_adsr::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_x_set",1,SWIGTYPE_p_sp_adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_x_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_adsr::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::x",1,"sp_adsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_x_get",1,SWIGTYPE_p_sp_adsr);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_prev_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_adsr::prev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::prev",1,"sp_adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_adsr::prev",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_prev_set",1,SWIGTYPE_p_sp_adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prev = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_prev_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_adsr::prev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::prev",1,"sp_adsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_prev_get",1,SWIGTYPE_p_sp_adsr);
  }
  
  result = (float) ((arg1)->prev);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_adsr::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::mode",1,"sp_adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_adsr::mode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_mode_set",1,SWIGTYPE_p_sp_adsr);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *arg1 = (sp_adsr *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_adsr::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr::mode",1,"sp_adsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_mode_get",1,SWIGTYPE_p_sp_adsr);
  }
  
  result = (int) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_adsr(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr *result = 0 ;
  
  SWIG_check_num_args("sp_adsr::sp_adsr",0,0)
  result = (sp_adsr *)new sp_adsr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_adsr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_adsr(void *obj) {
sp_adsr *arg1 = (sp_adsr *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_adsr(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_adsr);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_adsr_attributes[] = {
    { "atk", _wrap_sp_adsr_atk_get, _wrap_sp_adsr_atk_set },
    { "dec", _wrap_sp_adsr_dec_get, _wrap_sp_adsr_dec_set },
    { "sus", _wrap_sp_adsr_sus_get, _wrap_sp_adsr_sus_set },
    { "rel", _wrap_sp_adsr_rel_get, _wrap_sp_adsr_rel_set },
    { "timer", _wrap_sp_adsr_timer_get, _wrap_sp_adsr_timer_set },
    { "atk_time", _wrap_sp_adsr_atk_time_get, _wrap_sp_adsr_atk_time_set },
    { "a", _wrap_sp_adsr_a_get, _wrap_sp_adsr_a_set },
    { "b", _wrap_sp_adsr_b_get, _wrap_sp_adsr_b_set },
    { "y", _wrap_sp_adsr_y_get, _wrap_sp_adsr_y_set },
    { "x", _wrap_sp_adsr_x_get, _wrap_sp_adsr_x_set },
    { "prev", _wrap_sp_adsr_prev_get, _wrap_sp_adsr_prev_set },
    { "mode", _wrap_sp_adsr_mode_get, _wrap_sp_adsr_mode_set },
    {0,0,0}
};
static swig_lua_method swig_sp_adsr_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_adsr_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_adsr_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_adsr_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_adsr_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_adsr_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_adsr_Sf_SwigStatic = {
    "sp_adsr",
    swig_sp_adsr_Sf_SwigStatic_methods,
    swig_sp_adsr_Sf_SwigStatic_attributes,
    swig_sp_adsr_Sf_SwigStatic_constants,
    swig_sp_adsr_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_adsr_bases[] = {0};
static const char *swig_sp_adsr_base_names[] = {0};
static swig_lua_class _wrap_class_sp_adsr = { "sp_adsr", "sp_adsr", &SWIGTYPE_p_sp_adsr,_proxy__wrap_new_sp_adsr, swig_delete_sp_adsr, swig_sp_adsr_methods, swig_sp_adsr_attributes, &swig_sp_adsr_Sf_SwigStatic, swig_sp_adsr_meta, swig_sp_adsr_bases, swig_sp_adsr_base_names };

static int _wrap_sp_adsr_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr **arg1 = (sp_adsr **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_adsr_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr_create",1,"sp_adsr **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_create",1,SWIGTYPE_p_p_sp_adsr);
  }
  
  result = (int)sp_adsr_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_adsr **arg1 = (sp_adsr **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_adsr_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr_destroy",1,"sp_adsr **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_destroy",1,SWIGTYPE_p_p_sp_adsr);
  }
  
  result = (int)sp_adsr_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_adsr *arg2 = (sp_adsr *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_adsr_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_adsr_init",2,"sp_adsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_adsr_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_init",2,SWIGTYPE_p_sp_adsr);
  }
  
  result = (int)sp_adsr_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_adsr_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_adsr *arg2 = (sp_adsr *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_adsr_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_adsr_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_adsr_compute",2,"sp_adsr *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_adsr_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_adsr_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_adsr_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_adsr,0))){
    SWIG_fail_ptr("sp_adsr_compute",2,SWIGTYPE_p_sp_adsr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_adsr_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_adsr_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_adsr_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_revtime_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *arg1 = (sp_allpass *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_allpass::revtime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass::revtime",1,"sp_allpass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_allpass::revtime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_revtime_set",1,SWIGTYPE_p_sp_allpass);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->revtime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_revtime_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *arg1 = (sp_allpass *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_allpass::revtime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass::revtime",1,"sp_allpass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_revtime_get",1,SWIGTYPE_p_sp_allpass);
  }
  
  result = (float) ((arg1)->revtime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_looptime_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *arg1 = (sp_allpass *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_allpass::looptime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass::looptime",1,"sp_allpass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_allpass::looptime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_looptime_set",1,SWIGTYPE_p_sp_allpass);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->looptime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_looptime_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *arg1 = (sp_allpass *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_allpass::looptime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass::looptime",1,"sp_allpass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_looptime_get",1,SWIGTYPE_p_sp_allpass);
  }
  
  result = (float) ((arg1)->looptime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_coef_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *arg1 = (sp_allpass *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_allpass::coef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass::coef",1,"sp_allpass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_allpass::coef",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_coef_set",1,SWIGTYPE_p_sp_allpass);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->coef = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_coef_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *arg1 = (sp_allpass *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_allpass::coef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass::coef",1,"sp_allpass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_coef_get",1,SWIGTYPE_p_sp_allpass);
  }
  
  result = (float) ((arg1)->coef);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_prvt_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *arg1 = (sp_allpass *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_allpass::prvt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass::prvt",1,"sp_allpass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_allpass::prvt",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_prvt_set",1,SWIGTYPE_p_sp_allpass);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prvt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_prvt_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *arg1 = (sp_allpass *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_allpass::prvt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass::prvt",1,"sp_allpass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_prvt_get",1,SWIGTYPE_p_sp_allpass);
  }
  
  result = (float) ((arg1)->prvt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_aux_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *arg1 = (sp_allpass *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_allpass::aux",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass::aux",1,"sp_allpass *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_allpass::aux",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_aux_set",1,SWIGTYPE_p_sp_allpass);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_allpass_aux_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->aux = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_aux_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *arg1 = (sp_allpass *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_allpass::aux",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass::aux",1,"sp_allpass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_aux_get",1,SWIGTYPE_p_sp_allpass);
  }
  
  result = (sp_auxdata *)& ((arg1)->aux);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_bufpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *arg1 = (sp_allpass *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_allpass::bufpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass::bufpos",1,"sp_allpass *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_allpass::bufpos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_bufpos_set",1,SWIGTYPE_p_sp_allpass);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_allpass_bufpos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bufpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_bufpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *arg1 = (sp_allpass *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_allpass::bufpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass::bufpos",1,"sp_allpass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_bufpos_get",1,SWIGTYPE_p_sp_allpass);
  }
  
  result =  ((arg1)->bufpos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_bufsize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *arg1 = (sp_allpass *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_allpass::bufsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass::bufsize",1,"sp_allpass *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_allpass::bufsize",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_bufsize_set",1,SWIGTYPE_p_sp_allpass);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_allpass_bufsize_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bufsize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_bufsize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *arg1 = (sp_allpass *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_allpass::bufsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass::bufsize",1,"sp_allpass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_bufsize_get",1,SWIGTYPE_p_sp_allpass);
  }
  
  result =  ((arg1)->bufsize);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_allpass(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass *result = 0 ;
  
  SWIG_check_num_args("sp_allpass::sp_allpass",0,0)
  result = (sp_allpass *)new sp_allpass();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_allpass,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_allpass(void *obj) {
sp_allpass *arg1 = (sp_allpass *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_allpass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_allpass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_allpass_attributes[] = {
    { "revtime", _wrap_sp_allpass_revtime_get, _wrap_sp_allpass_revtime_set },
    { "looptime", _wrap_sp_allpass_looptime_get, _wrap_sp_allpass_looptime_set },
    { "coef", _wrap_sp_allpass_coef_get, _wrap_sp_allpass_coef_set },
    { "prvt", _wrap_sp_allpass_prvt_get, _wrap_sp_allpass_prvt_set },
    { "aux", _wrap_sp_allpass_aux_get, _wrap_sp_allpass_aux_set },
    { "bufpos", _wrap_sp_allpass_bufpos_get, _wrap_sp_allpass_bufpos_set },
    { "bufsize", _wrap_sp_allpass_bufsize_get, _wrap_sp_allpass_bufsize_set },
    {0,0,0}
};
static swig_lua_method swig_sp_allpass_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_allpass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_allpass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_allpass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_allpass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_allpass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_allpass_Sf_SwigStatic = {
    "sp_allpass",
    swig_sp_allpass_Sf_SwigStatic_methods,
    swig_sp_allpass_Sf_SwigStatic_attributes,
    swig_sp_allpass_Sf_SwigStatic_constants,
    swig_sp_allpass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_allpass_bases[] = {0};
static const char *swig_sp_allpass_base_names[] = {0};
static swig_lua_class _wrap_class_sp_allpass = { "sp_allpass", "sp_allpass", &SWIGTYPE_p_sp_allpass,_proxy__wrap_new_sp_allpass, swig_delete_sp_allpass, swig_sp_allpass_methods, swig_sp_allpass_attributes, &swig_sp_allpass_Sf_SwigStatic, swig_sp_allpass_meta, swig_sp_allpass_bases, swig_sp_allpass_base_names };

static int _wrap_sp_allpass_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass **arg1 = (sp_allpass **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_allpass_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass_create",1,"sp_allpass **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_create",1,SWIGTYPE_p_p_sp_allpass);
  }
  
  result = (int)sp_allpass_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_allpass **arg1 = (sp_allpass **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_allpass_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass_destroy",1,"sp_allpass **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_destroy",1,SWIGTYPE_p_p_sp_allpass);
  }
  
  result = (int)sp_allpass_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_allpass *arg2 = (sp_allpass *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("sp_allpass_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_allpass_init",2,"sp_allpass *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_allpass_init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_allpass_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_init",2,SWIGTYPE_p_sp_allpass);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)sp_allpass_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_allpass_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_allpass *arg2 = (sp_allpass *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_allpass_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_allpass_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_allpass_compute",2,"sp_allpass *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_allpass_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_allpass_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_allpass_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_allpass,0))){
    SWIG_fail_ptr("sp_allpass_compute",2,SWIGTYPE_p_sp_allpass);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_allpass_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_allpass_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_allpass_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_hp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone *arg1 = (sp_atone *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_atone::hp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone::hp",1,"sp_atone *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_atone::hp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_hp_set",1,SWIGTYPE_p_sp_atone);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->hp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_hp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone *arg1 = (sp_atone *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_atone::hp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone::hp",1,"sp_atone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_hp_get",1,SWIGTYPE_p_sp_atone);
  }
  
  result = (float) ((arg1)->hp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_c1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone *arg1 = (sp_atone *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_atone::c1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone::c1",1,"sp_atone *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_atone::c1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_c1_set",1,SWIGTYPE_p_sp_atone);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_c1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone *arg1 = (sp_atone *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_atone::c1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone::c1",1,"sp_atone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_c1_get",1,SWIGTYPE_p_sp_atone);
  }
  
  result = (float) ((arg1)->c1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_c2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone *arg1 = (sp_atone *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_atone::c2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone::c2",1,"sp_atone *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_atone::c2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_c2_set",1,SWIGTYPE_p_sp_atone);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_c2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone *arg1 = (sp_atone *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_atone::c2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone::c2",1,"sp_atone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_c2_get",1,SWIGTYPE_p_sp_atone);
  }
  
  result = (float) ((arg1)->c2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_yt1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone *arg1 = (sp_atone *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_atone::yt1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone::yt1",1,"sp_atone *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_atone::yt1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_yt1_set",1,SWIGTYPE_p_sp_atone);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->yt1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_yt1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone *arg1 = (sp_atone *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_atone::yt1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone::yt1",1,"sp_atone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_yt1_get",1,SWIGTYPE_p_sp_atone);
  }
  
  result = (float) ((arg1)->yt1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_prvhp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone *arg1 = (sp_atone *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_atone::prvhp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone::prvhp",1,"sp_atone *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_atone::prvhp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_prvhp_set",1,SWIGTYPE_p_sp_atone);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prvhp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_prvhp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone *arg1 = (sp_atone *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_atone::prvhp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone::prvhp",1,"sp_atone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_prvhp_get",1,SWIGTYPE_p_sp_atone);
  }
  
  result = (float) ((arg1)->prvhp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_tpidsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone *arg1 = (sp_atone *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_atone::tpidsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone::tpidsr",1,"sp_atone *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_atone::tpidsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_tpidsr_set",1,SWIGTYPE_p_sp_atone);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tpidsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_tpidsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone *arg1 = (sp_atone *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_atone::tpidsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone::tpidsr",1,"sp_atone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_tpidsr_get",1,SWIGTYPE_p_sp_atone);
  }
  
  result = (float) ((arg1)->tpidsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_atone(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone *result = 0 ;
  
  SWIG_check_num_args("sp_atone::sp_atone",0,0)
  result = (sp_atone *)new sp_atone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_atone,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_atone(void *obj) {
sp_atone *arg1 = (sp_atone *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_atone(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_atone);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_atone_attributes[] = {
    { "hp", _wrap_sp_atone_hp_get, _wrap_sp_atone_hp_set },
    { "c1", _wrap_sp_atone_c1_get, _wrap_sp_atone_c1_set },
    { "c2", _wrap_sp_atone_c2_get, _wrap_sp_atone_c2_set },
    { "yt1", _wrap_sp_atone_yt1_get, _wrap_sp_atone_yt1_set },
    { "prvhp", _wrap_sp_atone_prvhp_get, _wrap_sp_atone_prvhp_set },
    { "tpidsr", _wrap_sp_atone_tpidsr_get, _wrap_sp_atone_tpidsr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_atone_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_atone_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_atone_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_atone_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_atone_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_atone_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_atone_Sf_SwigStatic = {
    "sp_atone",
    swig_sp_atone_Sf_SwigStatic_methods,
    swig_sp_atone_Sf_SwigStatic_attributes,
    swig_sp_atone_Sf_SwigStatic_constants,
    swig_sp_atone_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_atone_bases[] = {0};
static const char *swig_sp_atone_base_names[] = {0};
static swig_lua_class _wrap_class_sp_atone = { "sp_atone", "sp_atone", &SWIGTYPE_p_sp_atone,_proxy__wrap_new_sp_atone, swig_delete_sp_atone, swig_sp_atone_methods, swig_sp_atone_attributes, &swig_sp_atone_Sf_SwigStatic, swig_sp_atone_meta, swig_sp_atone_bases, swig_sp_atone_base_names };

static int _wrap_sp_atone_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone **arg1 = (sp_atone **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_atone_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone_create",1,"sp_atone **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_create",1,SWIGTYPE_p_p_sp_atone);
  }
  
  result = (int)sp_atone_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_atone **arg1 = (sp_atone **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_atone_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone_destroy",1,"sp_atone **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_destroy",1,SWIGTYPE_p_p_sp_atone);
  }
  
  result = (int)sp_atone_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_atone *arg2 = (sp_atone *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_atone_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_atone_init",2,"sp_atone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_atone_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_init",2,SWIGTYPE_p_sp_atone);
  }
  
  result = (int)sp_atone_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_atone_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_atone *arg2 = (sp_atone *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_atone_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_atone_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_atone_compute",2,"sp_atone *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_atone_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_atone_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_atone_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_atone,0))){
    SWIG_fail_ptr("sp_atone_compute",2,SWIGTYPE_p_sp_atone);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_atone_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_atone_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_atone_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_faust_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah *arg1 = (sp_autowah *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("sp_autowah::faust",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah::faust",1,"sp_autowah *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_autowah::faust",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_faust_set",1,SWIGTYPE_p_sp_autowah);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_autowah_faust_set");
  if (arg1) (arg1)->faust = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_faust_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah *arg1 = (sp_autowah *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("sp_autowah::faust",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah::faust",1,"sp_autowah *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_faust_get",1,SWIGTYPE_p_sp_autowah);
  }
  
  result = (void *) ((arg1)->faust);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_argpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah *arg1 = (sp_autowah *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_autowah::argpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah::argpos",1,"sp_autowah *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_autowah::argpos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_argpos_set",1,SWIGTYPE_p_sp_autowah);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->argpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_argpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah *arg1 = (sp_autowah *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_autowah::argpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah::argpos",1,"sp_autowah *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_argpos_get",1,SWIGTYPE_p_sp_autowah);
  }
  
  result = (int) ((arg1)->argpos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_args_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah *arg1 = (sp_autowah *) 0 ;
  float **arg2 ;
  
  SWIG_check_num_args("sp_autowah::args",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah::args",1,"sp_autowah *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_autowah::args",2,"float *[3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_args_set",1,SWIGTYPE_p_sp_autowah);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("sp_autowah_args_set",2,SWIGTYPE_p_p_float);
  }
  
  {
    size_t ii;
    float * *b = (float * *) arg1->args;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_args_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah *arg1 = (sp_autowah *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("sp_autowah::args",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah::args",1,"sp_autowah *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_args_get",1,SWIGTYPE_p_sp_autowah);
  }
  
  result = (float **)(float **) ((arg1)->args);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_level_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah *arg1 = (sp_autowah *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_autowah::level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah::level",1,"sp_autowah *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_autowah::level",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_level_set",1,SWIGTYPE_p_sp_autowah);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_autowah_level_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->level = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_level_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah *arg1 = (sp_autowah *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_autowah::level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah::level",1,"sp_autowah *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_level_get",1,SWIGTYPE_p_sp_autowah);
  }
  
  result = (float *) ((arg1)->level);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_wah_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah *arg1 = (sp_autowah *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_autowah::wah",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah::wah",1,"sp_autowah *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_autowah::wah",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_wah_set",1,SWIGTYPE_p_sp_autowah);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_autowah_wah_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->wah = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_wah_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah *arg1 = (sp_autowah *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_autowah::wah",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah::wah",1,"sp_autowah *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_wah_get",1,SWIGTYPE_p_sp_autowah);
  }
  
  result = (float *) ((arg1)->wah);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_mix_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah *arg1 = (sp_autowah *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_autowah::mix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah::mix",1,"sp_autowah *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_autowah::mix",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_mix_set",1,SWIGTYPE_p_sp_autowah);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_autowah_mix_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->mix = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_mix_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah *arg1 = (sp_autowah *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_autowah::mix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah::mix",1,"sp_autowah *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_mix_get",1,SWIGTYPE_p_sp_autowah);
  }
  
  result = (float *) ((arg1)->mix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_autowah(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah *result = 0 ;
  
  SWIG_check_num_args("sp_autowah::sp_autowah",0,0)
  result = (sp_autowah *)new sp_autowah();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_autowah,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_autowah(void *obj) {
sp_autowah *arg1 = (sp_autowah *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_autowah(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_autowah);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_autowah_attributes[] = {
    { "faust", _wrap_sp_autowah_faust_get, _wrap_sp_autowah_faust_set },
    { "argpos", _wrap_sp_autowah_argpos_get, _wrap_sp_autowah_argpos_set },
    { "args", _wrap_sp_autowah_args_get, _wrap_sp_autowah_args_set },
    { "level", _wrap_sp_autowah_level_get, _wrap_sp_autowah_level_set },
    { "wah", _wrap_sp_autowah_wah_get, _wrap_sp_autowah_wah_set },
    { "mix", _wrap_sp_autowah_mix_get, _wrap_sp_autowah_mix_set },
    {0,0,0}
};
static swig_lua_method swig_sp_autowah_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_autowah_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_autowah_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_autowah_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_autowah_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_autowah_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_autowah_Sf_SwigStatic = {
    "sp_autowah",
    swig_sp_autowah_Sf_SwigStatic_methods,
    swig_sp_autowah_Sf_SwigStatic_attributes,
    swig_sp_autowah_Sf_SwigStatic_constants,
    swig_sp_autowah_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_autowah_bases[] = {0};
static const char *swig_sp_autowah_base_names[] = {0};
static swig_lua_class _wrap_class_sp_autowah = { "sp_autowah", "sp_autowah", &SWIGTYPE_p_sp_autowah,_proxy__wrap_new_sp_autowah, swig_delete_sp_autowah, swig_sp_autowah_methods, swig_sp_autowah_attributes, &swig_sp_autowah_Sf_SwigStatic, swig_sp_autowah_meta, swig_sp_autowah_bases, swig_sp_autowah_base_names };

static int _wrap_sp_autowah_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah **arg1 = (sp_autowah **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_autowah_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah_create",1,"sp_autowah **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_create",1,SWIGTYPE_p_p_sp_autowah);
  }
  
  result = (int)sp_autowah_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_autowah **arg1 = (sp_autowah **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_autowah_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah_destroy",1,"sp_autowah **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_destroy",1,SWIGTYPE_p_p_sp_autowah);
  }
  
  result = (int)sp_autowah_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_autowah *arg2 = (sp_autowah *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_autowah_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_autowah_init",2,"sp_autowah *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_autowah_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_init",2,SWIGTYPE_p_sp_autowah);
  }
  
  result = (int)sp_autowah_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_autowah_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_autowah *arg2 = (sp_autowah *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_autowah_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_autowah_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_autowah_compute",2,"sp_autowah *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_autowah_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_autowah_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_autowah_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_autowah,0))){
    SWIG_fail_ptr("sp_autowah_compute",2,SWIGTYPE_p_sp_autowah);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_autowah_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_autowah_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_autowah_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_asig_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bal::asig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::asig",1,"sp_bal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bal::asig",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_asig_set",1,SWIGTYPE_p_sp_bal);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->asig = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_asig_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bal::asig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::asig",1,"sp_bal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_asig_get",1,SWIGTYPE_p_sp_bal);
  }
  
  result = (float) ((arg1)->asig);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_csig_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bal::csig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::csig",1,"sp_bal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bal::csig",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_csig_set",1,SWIGTYPE_p_sp_bal);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->csig = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_csig_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bal::csig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::csig",1,"sp_bal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_csig_get",1,SWIGTYPE_p_sp_bal);
  }
  
  result = (float) ((arg1)->csig);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_ihp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bal::ihp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::ihp",1,"sp_bal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bal::ihp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_ihp_set",1,SWIGTYPE_p_sp_bal);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ihp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_ihp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bal::ihp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::ihp",1,"sp_bal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_ihp_get",1,SWIGTYPE_p_sp_bal);
  }
  
  result = (float) ((arg1)->ihp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_c1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bal::c1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::c1",1,"sp_bal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bal::c1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_c1_set",1,SWIGTYPE_p_sp_bal);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_c1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bal::c1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::c1",1,"sp_bal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_c1_get",1,SWIGTYPE_p_sp_bal);
  }
  
  result = (float) ((arg1)->c1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_c2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bal::c2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::c2",1,"sp_bal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bal::c2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_c2_set",1,SWIGTYPE_p_sp_bal);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_c2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bal::c2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::c2",1,"sp_bal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_c2_get",1,SWIGTYPE_p_sp_bal);
  }
  
  result = (float) ((arg1)->c2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_prvq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bal::prvq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::prvq",1,"sp_bal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bal::prvq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_prvq_set",1,SWIGTYPE_p_sp_bal);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prvq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_prvq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bal::prvq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::prvq",1,"sp_bal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_prvq_get",1,SWIGTYPE_p_sp_bal);
  }
  
  result = (float) ((arg1)->prvq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_prvr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bal::prvr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::prvr",1,"sp_bal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bal::prvr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_prvr_set",1,SWIGTYPE_p_sp_bal);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prvr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_prvr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bal::prvr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::prvr",1,"sp_bal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_prvr_get",1,SWIGTYPE_p_sp_bal);
  }
  
  result = (float) ((arg1)->prvr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_prva_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bal::prva",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::prva",1,"sp_bal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bal::prva",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_prva_set",1,SWIGTYPE_p_sp_bal);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prva = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_prva_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *arg1 = (sp_bal *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bal::prva",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal::prva",1,"sp_bal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_prva_get",1,SWIGTYPE_p_sp_bal);
  }
  
  result = (float) ((arg1)->prva);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_bal(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal *result = 0 ;
  
  SWIG_check_num_args("sp_bal::sp_bal",0,0)
  result = (sp_bal *)new sp_bal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_bal,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_bal(void *obj) {
sp_bal *arg1 = (sp_bal *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_bal(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_bal);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_bal_attributes[] = {
    { "asig", _wrap_sp_bal_asig_get, _wrap_sp_bal_asig_set },
    { "csig", _wrap_sp_bal_csig_get, _wrap_sp_bal_csig_set },
    { "ihp", _wrap_sp_bal_ihp_get, _wrap_sp_bal_ihp_set },
    { "c1", _wrap_sp_bal_c1_get, _wrap_sp_bal_c1_set },
    { "c2", _wrap_sp_bal_c2_get, _wrap_sp_bal_c2_set },
    { "prvq", _wrap_sp_bal_prvq_get, _wrap_sp_bal_prvq_set },
    { "prvr", _wrap_sp_bal_prvr_get, _wrap_sp_bal_prvr_set },
    { "prva", _wrap_sp_bal_prva_get, _wrap_sp_bal_prva_set },
    {0,0,0}
};
static swig_lua_method swig_sp_bal_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_bal_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_bal_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_bal_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_bal_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_bal_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_bal_Sf_SwigStatic = {
    "sp_bal",
    swig_sp_bal_Sf_SwigStatic_methods,
    swig_sp_bal_Sf_SwigStatic_attributes,
    swig_sp_bal_Sf_SwigStatic_constants,
    swig_sp_bal_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_bal_bases[] = {0};
static const char *swig_sp_bal_base_names[] = {0};
static swig_lua_class _wrap_class_sp_bal = { "sp_bal", "sp_bal", &SWIGTYPE_p_sp_bal,_proxy__wrap_new_sp_bal, swig_delete_sp_bal, swig_sp_bal_methods, swig_sp_bal_attributes, &swig_sp_bal_Sf_SwigStatic, swig_sp_bal_meta, swig_sp_bal_bases, swig_sp_bal_base_names };

static int _wrap_sp_bal_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal **arg1 = (sp_bal **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bal_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal_create",1,"sp_bal **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_create",1,SWIGTYPE_p_p_sp_bal);
  }
  
  result = (int)sp_bal_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_bal **arg1 = (sp_bal **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bal_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal_destroy",1,"sp_bal **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_destroy",1,SWIGTYPE_p_p_sp_bal);
  }
  
  result = (int)sp_bal_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_bal *arg2 = (sp_bal *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bal_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bal_init",2,"sp_bal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_bal_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_init",2,SWIGTYPE_p_sp_bal);
  }
  
  result = (int)sp_bal_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bal_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_bal *arg2 = (sp_bal *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bal_compute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bal_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bal_compute",2,"sp_bal *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_bal_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_bal_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_bal_compute",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_bal_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_bal,0))){
    SWIG_fail_ptr("sp_bal_compute",2,SWIGTYPE_p_sp_bal);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_bal_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_bal_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_bal_compute",5,SWIGTYPE_p_float);
  }
  
  result = (int)sp_bal_compute(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_bcL_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bar::bcL",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::bcL",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::bcL",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_bcL_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->bcL = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_bcL_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bar::bcL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::bcL",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_bcL_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float) ((arg1)->bcL);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_bcR_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bar::bcR",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::bcR",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::bcR",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_bcR_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->bcR = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_bcR_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bar::bcR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::bcR",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_bcR_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float) ((arg1)->bcR);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_iK_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bar::iK",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::iK",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::iK",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_iK_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iK = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_iK_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bar::iK",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::iK",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_iK_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float) ((arg1)->iK);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_ib_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bar::ib",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::ib",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::ib",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_ib_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ib = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_ib_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bar::ib",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::ib",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_ib_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float) ((arg1)->ib);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_scan_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bar::scan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::scan",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::scan",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_scan_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->scan = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_scan_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bar::scan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::scan",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_scan_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float) ((arg1)->scan);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_T30_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bar::T30",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::T30",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::T30",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_T30_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->T30 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_T30_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bar::T30",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::T30",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_T30_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float) ((arg1)->T30);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bar::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::pos",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::pos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_pos_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bar::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::pos",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_pos_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float) ((arg1)->pos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_vel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bar::vel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::vel",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::vel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_vel_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->vel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_vel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bar::vel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::vel",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_vel_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float) ((arg1)->vel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_wid_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bar::wid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::wid",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::wid",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_wid_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->wid = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_wid_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bar::wid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::wid",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_wid_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float) ((arg1)->wid);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_w_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_bar::w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::w",1,"sp_bar *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bar::w",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_w_set",1,SWIGTYPE_p_sp_bar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_bar_w_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->w = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_w_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_bar::w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::w",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_w_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float *) ((arg1)->w);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_w1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_bar::w1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::w1",1,"sp_bar *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bar::w1",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_w1_set",1,SWIGTYPE_p_sp_bar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_bar_w1_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->w1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_w1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_bar::w1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::w1",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_w1_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float *) ((arg1)->w1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_w2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_bar::w2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::w2",1,"sp_bar *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bar::w2",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_w2_set",1,SWIGTYPE_p_sp_bar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_bar_w2_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->w2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_w2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_bar::w2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::w2",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_w2_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float *) ((arg1)->w2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_step_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_bar::step",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::step",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::step",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_step_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->step = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_step_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bar::step",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::step",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_step_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (int) ((arg1)->step);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_first_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_bar::first",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::first",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::first",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_first_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->first = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_first_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bar::first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::first",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_first_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (int) ((arg1)->first);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_s0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bar::s0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::s0",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::s0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_s0_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->s0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_s0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bar::s0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::s0",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_s0_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float) ((arg1)->s0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_s1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bar::s1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::s1",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::s1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_s1_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->s1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_s1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bar::s1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::s1",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_s1_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float) ((arg1)->s1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_s2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bar::s2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::s2",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::s2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_s2_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->s2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_s2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bar::s2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::s2",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_s2_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float) ((arg1)->s2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_t0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bar::t0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::t0",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::t0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_t0_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->t0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_t0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bar::t0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::t0",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_t0_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float) ((arg1)->t0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_t1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bar::t1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::t1",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::t1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_t1_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->t1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_t1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bar::t1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::t1",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_t1_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (float) ((arg1)->t1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_i_bcL_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_bar::i_bcL",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::i_bcL",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::i_bcL",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_i_bcL_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->i_bcL = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_i_bcL_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bar::i_bcL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::i_bcL",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_i_bcL_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (int) ((arg1)->i_bcL);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_i_bcR_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_bar::i_bcR",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::i_bcR",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::i_bcR",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_i_bcR_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->i_bcR = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_i_bcR_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bar::i_bcR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::i_bcR",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_i_bcR_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (int) ((arg1)->i_bcR);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_N_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_bar::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::N",1,"sp_bar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bar::N",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_N_set",1,SWIGTYPE_p_sp_bar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_N_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bar::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::N",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_N_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (int) ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_w_aux_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_bar::w_aux",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::w_aux",1,"sp_bar *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bar::w_aux",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_w_aux_set",1,SWIGTYPE_p_sp_bar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_bar_w_aux_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->w_aux = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_w_aux_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *arg1 = (sp_bar *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_bar::w_aux",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar::w_aux",1,"sp_bar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_w_aux_get",1,SWIGTYPE_p_sp_bar);
  }
  
  result = (sp_auxdata *)& ((arg1)->w_aux);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_bar(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar *result = 0 ;
  
  SWIG_check_num_args("sp_bar::sp_bar",0,0)
  result = (sp_bar *)new sp_bar();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_bar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_bar(void *obj) {
sp_bar *arg1 = (sp_bar *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_bar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_bar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_bar_attributes[] = {
    { "bcL", _wrap_sp_bar_bcL_get, _wrap_sp_bar_bcL_set },
    { "bcR", _wrap_sp_bar_bcR_get, _wrap_sp_bar_bcR_set },
    { "iK", _wrap_sp_bar_iK_get, _wrap_sp_bar_iK_set },
    { "ib", _wrap_sp_bar_ib_get, _wrap_sp_bar_ib_set },
    { "scan", _wrap_sp_bar_scan_get, _wrap_sp_bar_scan_set },
    { "T30", _wrap_sp_bar_T30_get, _wrap_sp_bar_T30_set },
    { "pos", _wrap_sp_bar_pos_get, _wrap_sp_bar_pos_set },
    { "vel", _wrap_sp_bar_vel_get, _wrap_sp_bar_vel_set },
    { "wid", _wrap_sp_bar_wid_get, _wrap_sp_bar_wid_set },
    { "w", _wrap_sp_bar_w_get, _wrap_sp_bar_w_set },
    { "w1", _wrap_sp_bar_w1_get, _wrap_sp_bar_w1_set },
    { "w2", _wrap_sp_bar_w2_get, _wrap_sp_bar_w2_set },
    { "step", _wrap_sp_bar_step_get, _wrap_sp_bar_step_set },
    { "first", _wrap_sp_bar_first_get, _wrap_sp_bar_first_set },
    { "s0", _wrap_sp_bar_s0_get, _wrap_sp_bar_s0_set },
    { "s1", _wrap_sp_bar_s1_get, _wrap_sp_bar_s1_set },
    { "s2", _wrap_sp_bar_s2_get, _wrap_sp_bar_s2_set },
    { "t0", _wrap_sp_bar_t0_get, _wrap_sp_bar_t0_set },
    { "t1", _wrap_sp_bar_t1_get, _wrap_sp_bar_t1_set },
    { "i_bcL", _wrap_sp_bar_i_bcL_get, _wrap_sp_bar_i_bcL_set },
    { "i_bcR", _wrap_sp_bar_i_bcR_get, _wrap_sp_bar_i_bcR_set },
    { "N", _wrap_sp_bar_N_get, _wrap_sp_bar_N_set },
    { "w_aux", _wrap_sp_bar_w_aux_get, _wrap_sp_bar_w_aux_set },
    {0,0,0}
};
static swig_lua_method swig_sp_bar_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_bar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_bar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_bar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_bar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_bar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_bar_Sf_SwigStatic = {
    "sp_bar",
    swig_sp_bar_Sf_SwigStatic_methods,
    swig_sp_bar_Sf_SwigStatic_attributes,
    swig_sp_bar_Sf_SwigStatic_constants,
    swig_sp_bar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_bar_bases[] = {0};
static const char *swig_sp_bar_base_names[] = {0};
static swig_lua_class _wrap_class_sp_bar = { "sp_bar", "sp_bar", &SWIGTYPE_p_sp_bar,_proxy__wrap_new_sp_bar, swig_delete_sp_bar, swig_sp_bar_methods, swig_sp_bar_attributes, &swig_sp_bar_Sf_SwigStatic, swig_sp_bar_meta, swig_sp_bar_bases, swig_sp_bar_base_names };

static int _wrap_sp_bar_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar **arg1 = (sp_bar **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bar_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar_create",1,"sp_bar **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_create",1,SWIGTYPE_p_p_sp_bar);
  }
  
  result = (int)sp_bar_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_bar **arg1 = (sp_bar **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bar_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar_destroy",1,"sp_bar **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_destroy",1,SWIGTYPE_p_p_sp_bar);
  }
  
  result = (int)sp_bar_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_bar *arg2 = (sp_bar *) 0 ;
  float arg3 ;
  float arg4 ;
  int result;
  
  SWIG_check_num_args("sp_bar_init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bar_init",2,"sp_bar *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_bar_init",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("sp_bar_init",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_bar_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_init",2,SWIGTYPE_p_sp_bar);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (int)sp_bar_init(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bar_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_bar *arg2 = (sp_bar *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bar_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bar_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bar_compute",2,"sp_bar *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_bar_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_bar_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_bar_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_bar,0))){
    SWIG_fail_ptr("sp_bar_compute",2,SWIGTYPE_p_sp_bar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_bar_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_bar_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_bar_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_b0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::b0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::b0",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::b0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_b0_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_b0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::b0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::b0",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_b0_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->b0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_b1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::b1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::b1",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::b1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_b1_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_b1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::b1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::b1",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_b1_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->b1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_b2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::b2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::b2",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::b2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_b2_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_b2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::b2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::b2",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_b2_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->b2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_a0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::a0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::a0",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::a0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_a0_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_a0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::a0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::a0",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_a0_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->a0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_a1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::a1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::a1",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::a1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_a1_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_a1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::a1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::a1",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_a1_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->a1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_a2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::a2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::a2",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::a2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_a2_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_a2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::a2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::a2",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_a2_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->a2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_reinit_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::reinit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::reinit",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::reinit",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_reinit_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->reinit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_reinit_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::reinit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::reinit",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_reinit_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->reinit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_xnm1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::xnm1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::xnm1",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::xnm1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_xnm1_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->xnm1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_xnm1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::xnm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::xnm1",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_xnm1_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->xnm1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_xnm2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::xnm2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::xnm2",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::xnm2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_xnm2_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->xnm2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_xnm2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::xnm2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::xnm2",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_xnm2_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->xnm2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_ynm1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::ynm1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::ynm1",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::ynm1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_ynm1_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ynm1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_ynm1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::ynm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::ynm1",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_ynm1_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->ynm1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_ynm2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::ynm2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::ynm2",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::ynm2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_ynm2_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ynm2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_ynm2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::ynm2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::ynm2",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_ynm2_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->ynm2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_cutoff_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::cutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::cutoff",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::cutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_cutoff_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->cutoff = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_cutoff_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::cutoff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::cutoff",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_cutoff_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->cutoff);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_res_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::res",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::res",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::res",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_res_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->res = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_res_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::res",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::res",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_res_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->res);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::sr",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_sr_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::sr",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_sr_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_tpidsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biquad::tpidsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::tpidsr",1,"sp_biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biquad::tpidsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_tpidsr_set",1,SWIGTYPE_p_sp_biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tpidsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_tpidsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *arg1 = (sp_biquad *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biquad::tpidsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad::tpidsr",1,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_tpidsr_get",1,SWIGTYPE_p_sp_biquad);
  }
  
  result = (float) ((arg1)->tpidsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_biquad(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad *result = 0 ;
  
  SWIG_check_num_args("sp_biquad::sp_biquad",0,0)
  result = (sp_biquad *)new sp_biquad();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_biquad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_biquad(void *obj) {
sp_biquad *arg1 = (sp_biquad *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_biquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_biquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_biquad_attributes[] = {
    { "b0", _wrap_sp_biquad_b0_get, _wrap_sp_biquad_b0_set },
    { "b1", _wrap_sp_biquad_b1_get, _wrap_sp_biquad_b1_set },
    { "b2", _wrap_sp_biquad_b2_get, _wrap_sp_biquad_b2_set },
    { "a0", _wrap_sp_biquad_a0_get, _wrap_sp_biquad_a0_set },
    { "a1", _wrap_sp_biquad_a1_get, _wrap_sp_biquad_a1_set },
    { "a2", _wrap_sp_biquad_a2_get, _wrap_sp_biquad_a2_set },
    { "reinit", _wrap_sp_biquad_reinit_get, _wrap_sp_biquad_reinit_set },
    { "xnm1", _wrap_sp_biquad_xnm1_get, _wrap_sp_biquad_xnm1_set },
    { "xnm2", _wrap_sp_biquad_xnm2_get, _wrap_sp_biquad_xnm2_set },
    { "ynm1", _wrap_sp_biquad_ynm1_get, _wrap_sp_biquad_ynm1_set },
    { "ynm2", _wrap_sp_biquad_ynm2_get, _wrap_sp_biquad_ynm2_set },
    { "cutoff", _wrap_sp_biquad_cutoff_get, _wrap_sp_biquad_cutoff_set },
    { "res", _wrap_sp_biquad_res_get, _wrap_sp_biquad_res_set },
    { "sr", _wrap_sp_biquad_sr_get, _wrap_sp_biquad_sr_set },
    { "tpidsr", _wrap_sp_biquad_tpidsr_get, _wrap_sp_biquad_tpidsr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_biquad_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_biquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_biquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_biquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_biquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_biquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_biquad_Sf_SwigStatic = {
    "sp_biquad",
    swig_sp_biquad_Sf_SwigStatic_methods,
    swig_sp_biquad_Sf_SwigStatic_attributes,
    swig_sp_biquad_Sf_SwigStatic_constants,
    swig_sp_biquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_biquad_bases[] = {0};
static const char *swig_sp_biquad_base_names[] = {0};
static swig_lua_class _wrap_class_sp_biquad = { "sp_biquad", "sp_biquad", &SWIGTYPE_p_sp_biquad,_proxy__wrap_new_sp_biquad, swig_delete_sp_biquad, swig_sp_biquad_methods, swig_sp_biquad_attributes, &swig_sp_biquad_Sf_SwigStatic, swig_sp_biquad_meta, swig_sp_biquad_bases, swig_sp_biquad_base_names };

static int _wrap_sp_biquad_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad **arg1 = (sp_biquad **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_biquad_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad_create",1,"sp_biquad **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_create",1,SWIGTYPE_p_p_sp_biquad);
  }
  
  result = (int)sp_biquad_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_biquad **arg1 = (sp_biquad **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_biquad_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad_destroy",1,"sp_biquad **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_destroy",1,SWIGTYPE_p_p_sp_biquad);
  }
  
  result = (int)sp_biquad_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_biquad *arg2 = (sp_biquad *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_biquad_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_biquad_init",2,"sp_biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_biquad_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_init",2,SWIGTYPE_p_sp_biquad);
  }
  
  result = (int)sp_biquad_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biquad_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_biquad *arg2 = (sp_biquad *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_biquad_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biquad_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_biquad_compute",2,"sp_biquad *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_biquad_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_biquad_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_biquad_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_biquad,0))){
    SWIG_fail_ptr("sp_biquad_compute",2,SWIGTYPE_p_sp_biquad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_biquad_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_biquad_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_biquad_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biscale_min_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biscale *arg1 = (sp_biscale *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biscale::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biscale::min",1,"sp_biscale *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biscale::min",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biscale,0))){
    SWIG_fail_ptr("sp_biscale_min_set",1,SWIGTYPE_p_sp_biscale);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->min = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biscale_min_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biscale *arg1 = (sp_biscale *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biscale::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biscale::min",1,"sp_biscale *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biscale,0))){
    SWIG_fail_ptr("sp_biscale_min_get",1,SWIGTYPE_p_sp_biscale);
  }
  
  result = (float) ((arg1)->min);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biscale_max_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_biscale *arg1 = (sp_biscale *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_biscale::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biscale::max",1,"sp_biscale *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_biscale::max",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biscale,0))){
    SWIG_fail_ptr("sp_biscale_max_set",1,SWIGTYPE_p_sp_biscale);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biscale_max_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_biscale *arg1 = (sp_biscale *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_biscale::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biscale::max",1,"sp_biscale *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_biscale,0))){
    SWIG_fail_ptr("sp_biscale_max_get",1,SWIGTYPE_p_sp_biscale);
  }
  
  result = (float) ((arg1)->max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_biscale(lua_State* L) {
  int SWIG_arg = 0;
  sp_biscale *result = 0 ;
  
  SWIG_check_num_args("sp_biscale::sp_biscale",0,0)
  result = (sp_biscale *)new sp_biscale();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_biscale,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_biscale(void *obj) {
sp_biscale *arg1 = (sp_biscale *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_biscale(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_biscale);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_biscale_attributes[] = {
    { "min", _wrap_sp_biscale_min_get, _wrap_sp_biscale_min_set },
    { "max", _wrap_sp_biscale_max_get, _wrap_sp_biscale_max_set },
    {0,0,0}
};
static swig_lua_method swig_sp_biscale_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_biscale_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_biscale_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_biscale_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_biscale_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_biscale_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_biscale_Sf_SwigStatic = {
    "sp_biscale",
    swig_sp_biscale_Sf_SwigStatic_methods,
    swig_sp_biscale_Sf_SwigStatic_attributes,
    swig_sp_biscale_Sf_SwigStatic_constants,
    swig_sp_biscale_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_biscale_bases[] = {0};
static const char *swig_sp_biscale_base_names[] = {0};
static swig_lua_class _wrap_class_sp_biscale = { "sp_biscale", "sp_biscale", &SWIGTYPE_p_sp_biscale,_proxy__wrap_new_sp_biscale, swig_delete_sp_biscale, swig_sp_biscale_methods, swig_sp_biscale_attributes, &swig_sp_biscale_Sf_SwigStatic, swig_sp_biscale_meta, swig_sp_biscale_bases, swig_sp_biscale_base_names };

static int _wrap_sp_biscale_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_biscale **arg1 = (sp_biscale **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_biscale_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biscale_create",1,"sp_biscale **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_biscale,0))){
    SWIG_fail_ptr("sp_biscale_create",1,SWIGTYPE_p_p_sp_biscale);
  }
  
  result = (int)sp_biscale_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biscale_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_biscale **arg1 = (sp_biscale **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_biscale_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biscale_destroy",1,"sp_biscale **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_biscale,0))){
    SWIG_fail_ptr("sp_biscale_destroy",1,SWIGTYPE_p_p_sp_biscale);
  }
  
  result = (int)sp_biscale_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biscale_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_biscale *arg2 = (sp_biscale *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_biscale_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biscale_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_biscale_init",2,"sp_biscale *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_biscale_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_biscale,0))){
    SWIG_fail_ptr("sp_biscale_init",2,SWIGTYPE_p_sp_biscale);
  }
  
  result = (int)sp_biscale_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_biscale_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_biscale *arg2 = (sp_biscale *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_biscale_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_biscale_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_biscale_compute",2,"sp_biscale *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_biscale_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_biscale_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_biscale_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_biscale,0))){
    SWIG_fail_ptr("sp_biscale_compute",2,SWIGTYPE_p_sp_biscale);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_biscale_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_biscale_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_biscale_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsaw_ud_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsaw *arg1 = (sp_blsaw *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("sp_blsaw::ud",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsaw::ud",1,"sp_blsaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_blsaw::ud",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsaw,0))){
    SWIG_fail_ptr("sp_blsaw_ud_set",1,SWIGTYPE_p_sp_blsaw);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_blsaw_ud_set");
  if (arg1) (arg1)->ud = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsaw_ud_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsaw *arg1 = (sp_blsaw *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("sp_blsaw::ud",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsaw::ud",1,"sp_blsaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsaw,0))){
    SWIG_fail_ptr("sp_blsaw_ud_get",1,SWIGTYPE_p_sp_blsaw);
  }
  
  result = (void *) ((arg1)->ud);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsaw_argpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsaw *arg1 = (sp_blsaw *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_blsaw::argpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsaw::argpos",1,"sp_blsaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_blsaw::argpos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsaw,0))){
    SWIG_fail_ptr("sp_blsaw_argpos_set",1,SWIGTYPE_p_sp_blsaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->argpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsaw_argpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsaw *arg1 = (sp_blsaw *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_blsaw::argpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsaw::argpos",1,"sp_blsaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsaw,0))){
    SWIG_fail_ptr("sp_blsaw_argpos_get",1,SWIGTYPE_p_sp_blsaw);
  }
  
  result = (int) ((arg1)->argpos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsaw_args_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsaw *arg1 = (sp_blsaw *) 0 ;
  float **arg2 ;
  
  SWIG_check_num_args("sp_blsaw::args",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsaw::args",1,"sp_blsaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_blsaw::args",2,"float *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsaw,0))){
    SWIG_fail_ptr("sp_blsaw_args_set",1,SWIGTYPE_p_sp_blsaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("sp_blsaw_args_set",2,SWIGTYPE_p_p_float);
  }
  
  {
    size_t ii;
    float * *b = (float * *) arg1->args;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((float * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsaw_args_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsaw *arg1 = (sp_blsaw *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("sp_blsaw::args",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsaw::args",1,"sp_blsaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsaw,0))){
    SWIG_fail_ptr("sp_blsaw_args_get",1,SWIGTYPE_p_sp_blsaw);
  }
  
  result = (float **)(float **) ((arg1)->args);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsaw_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsaw *arg1 = (sp_blsaw *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_blsaw::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsaw::freq",1,"sp_blsaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_blsaw::freq",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsaw,0))){
    SWIG_fail_ptr("sp_blsaw_freq_set",1,SWIGTYPE_p_sp_blsaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_blsaw_freq_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsaw_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsaw *arg1 = (sp_blsaw *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_blsaw::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsaw::freq",1,"sp_blsaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsaw,0))){
    SWIG_fail_ptr("sp_blsaw_freq_get",1,SWIGTYPE_p_sp_blsaw);
  }
  
  result = (float *) ((arg1)->freq);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsaw_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsaw *arg1 = (sp_blsaw *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_blsaw::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsaw::amp",1,"sp_blsaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_blsaw::amp",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsaw,0))){
    SWIG_fail_ptr("sp_blsaw_amp_set",1,SWIGTYPE_p_sp_blsaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_blsaw_amp_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsaw_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsaw *arg1 = (sp_blsaw *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_blsaw::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsaw::amp",1,"sp_blsaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsaw,0))){
    SWIG_fail_ptr("sp_blsaw_amp_get",1,SWIGTYPE_p_sp_blsaw);
  }
  
  result = (float *) ((arg1)->amp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_blsaw(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsaw *result = 0 ;
  
  SWIG_check_num_args("sp_blsaw::sp_blsaw",0,0)
  result = (sp_blsaw *)new sp_blsaw();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_blsaw,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_blsaw(void *obj) {
sp_blsaw *arg1 = (sp_blsaw *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_blsaw(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_blsaw);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_blsaw_attributes[] = {
    { "ud", _wrap_sp_blsaw_ud_get, _wrap_sp_blsaw_ud_set },
    { "argpos", _wrap_sp_blsaw_argpos_get, _wrap_sp_blsaw_argpos_set },
    { "args", _wrap_sp_blsaw_args_get, _wrap_sp_blsaw_args_set },
    { "freq", _wrap_sp_blsaw_freq_get, _wrap_sp_blsaw_freq_set },
    { "amp", _wrap_sp_blsaw_amp_get, _wrap_sp_blsaw_amp_set },
    {0,0,0}
};
static swig_lua_method swig_sp_blsaw_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_blsaw_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_blsaw_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_blsaw_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_blsaw_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_blsaw_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_blsaw_Sf_SwigStatic = {
    "sp_blsaw",
    swig_sp_blsaw_Sf_SwigStatic_methods,
    swig_sp_blsaw_Sf_SwigStatic_attributes,
    swig_sp_blsaw_Sf_SwigStatic_constants,
    swig_sp_blsaw_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_blsaw_bases[] = {0};
static const char *swig_sp_blsaw_base_names[] = {0};
static swig_lua_class _wrap_class_sp_blsaw = { "sp_blsaw", "sp_blsaw", &SWIGTYPE_p_sp_blsaw,_proxy__wrap_new_sp_blsaw, swig_delete_sp_blsaw, swig_sp_blsaw_methods, swig_sp_blsaw_attributes, &swig_sp_blsaw_Sf_SwigStatic, swig_sp_blsaw_meta, swig_sp_blsaw_bases, swig_sp_blsaw_base_names };

static int _wrap_sp_blsaw_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsaw **arg1 = (sp_blsaw **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_blsaw_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsaw_create",1,"sp_blsaw **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_blsaw,0))){
    SWIG_fail_ptr("sp_blsaw_create",1,SWIGTYPE_p_p_sp_blsaw);
  }
  
  result = (int)sp_blsaw_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsaw_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsaw **arg1 = (sp_blsaw **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_blsaw_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsaw_destroy",1,"sp_blsaw **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_blsaw,0))){
    SWIG_fail_ptr("sp_blsaw_destroy",1,SWIGTYPE_p_p_sp_blsaw);
  }
  
  result = (int)sp_blsaw_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsaw_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_blsaw *arg2 = (sp_blsaw *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_blsaw_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsaw_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_blsaw_init",2,"sp_blsaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_blsaw_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_blsaw,0))){
    SWIG_fail_ptr("sp_blsaw_init",2,SWIGTYPE_p_sp_blsaw);
  }
  
  result = (int)sp_blsaw_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsaw_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_blsaw *arg2 = (sp_blsaw *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_blsaw_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsaw_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_blsaw_compute",2,"sp_blsaw *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_blsaw_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_blsaw_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_blsaw_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_blsaw,0))){
    SWIG_fail_ptr("sp_blsaw_compute",2,SWIGTYPE_p_sp_blsaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_blsaw_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_blsaw_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_blsaw_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_ud_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare *arg1 = (sp_blsquare *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("sp_blsquare::ud",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare::ud",1,"sp_blsquare *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_blsquare::ud",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_ud_set",1,SWIGTYPE_p_sp_blsquare);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_blsquare_ud_set");
  if (arg1) (arg1)->ud = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_ud_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare *arg1 = (sp_blsquare *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("sp_blsquare::ud",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare::ud",1,"sp_blsquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_ud_get",1,SWIGTYPE_p_sp_blsquare);
  }
  
  result = (void *) ((arg1)->ud);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_argpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare *arg1 = (sp_blsquare *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_blsquare::argpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare::argpos",1,"sp_blsquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_blsquare::argpos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_argpos_set",1,SWIGTYPE_p_sp_blsquare);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->argpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_argpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare *arg1 = (sp_blsquare *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_blsquare::argpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare::argpos",1,"sp_blsquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_argpos_get",1,SWIGTYPE_p_sp_blsquare);
  }
  
  result = (int) ((arg1)->argpos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_args_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare *arg1 = (sp_blsquare *) 0 ;
  float **arg2 ;
  
  SWIG_check_num_args("sp_blsquare::args",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare::args",1,"sp_blsquare *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_blsquare::args",2,"float *[3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_args_set",1,SWIGTYPE_p_sp_blsquare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("sp_blsquare_args_set",2,SWIGTYPE_p_p_float);
  }
  
  {
    size_t ii;
    float * *b = (float * *) arg1->args;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_args_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare *arg1 = (sp_blsquare *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("sp_blsquare::args",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare::args",1,"sp_blsquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_args_get",1,SWIGTYPE_p_sp_blsquare);
  }
  
  result = (float **)(float **) ((arg1)->args);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare *arg1 = (sp_blsquare *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_blsquare::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare::freq",1,"sp_blsquare *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_blsquare::freq",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_freq_set",1,SWIGTYPE_p_sp_blsquare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_blsquare_freq_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare *arg1 = (sp_blsquare *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_blsquare::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare::freq",1,"sp_blsquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_freq_get",1,SWIGTYPE_p_sp_blsquare);
  }
  
  result = (float *) ((arg1)->freq);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare *arg1 = (sp_blsquare *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_blsquare::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare::amp",1,"sp_blsquare *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_blsquare::amp",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_amp_set",1,SWIGTYPE_p_sp_blsquare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_blsquare_amp_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare *arg1 = (sp_blsquare *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_blsquare::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare::amp",1,"sp_blsquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_amp_get",1,SWIGTYPE_p_sp_blsquare);
  }
  
  result = (float *) ((arg1)->amp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_width_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare *arg1 = (sp_blsquare *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_blsquare::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare::width",1,"sp_blsquare *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_blsquare::width",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_width_set",1,SWIGTYPE_p_sp_blsquare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_blsquare_width_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->width = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_width_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare *arg1 = (sp_blsquare *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_blsquare::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare::width",1,"sp_blsquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_width_get",1,SWIGTYPE_p_sp_blsquare);
  }
  
  result = (float *) ((arg1)->width);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_blsquare(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare *result = 0 ;
  
  SWIG_check_num_args("sp_blsquare::sp_blsquare",0,0)
  result = (sp_blsquare *)new sp_blsquare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_blsquare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_blsquare(void *obj) {
sp_blsquare *arg1 = (sp_blsquare *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_blsquare(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_blsquare);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_blsquare_attributes[] = {
    { "ud", _wrap_sp_blsquare_ud_get, _wrap_sp_blsquare_ud_set },
    { "argpos", _wrap_sp_blsquare_argpos_get, _wrap_sp_blsquare_argpos_set },
    { "args", _wrap_sp_blsquare_args_get, _wrap_sp_blsquare_args_set },
    { "freq", _wrap_sp_blsquare_freq_get, _wrap_sp_blsquare_freq_set },
    { "amp", _wrap_sp_blsquare_amp_get, _wrap_sp_blsquare_amp_set },
    { "width", _wrap_sp_blsquare_width_get, _wrap_sp_blsquare_width_set },
    {0,0,0}
};
static swig_lua_method swig_sp_blsquare_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_blsquare_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_blsquare_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_blsquare_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_blsquare_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_blsquare_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_blsquare_Sf_SwigStatic = {
    "sp_blsquare",
    swig_sp_blsquare_Sf_SwigStatic_methods,
    swig_sp_blsquare_Sf_SwigStatic_attributes,
    swig_sp_blsquare_Sf_SwigStatic_constants,
    swig_sp_blsquare_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_blsquare_bases[] = {0};
static const char *swig_sp_blsquare_base_names[] = {0};
static swig_lua_class _wrap_class_sp_blsquare = { "sp_blsquare", "sp_blsquare", &SWIGTYPE_p_sp_blsquare,_proxy__wrap_new_sp_blsquare, swig_delete_sp_blsquare, swig_sp_blsquare_methods, swig_sp_blsquare_attributes, &swig_sp_blsquare_Sf_SwigStatic, swig_sp_blsquare_meta, swig_sp_blsquare_bases, swig_sp_blsquare_base_names };

static int _wrap_sp_blsquare_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare **arg1 = (sp_blsquare **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_blsquare_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare_create",1,"sp_blsquare **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_create",1,SWIGTYPE_p_p_sp_blsquare);
  }
  
  result = (int)sp_blsquare_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_blsquare **arg1 = (sp_blsquare **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_blsquare_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare_destroy",1,"sp_blsquare **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_destroy",1,SWIGTYPE_p_p_sp_blsquare);
  }
  
  result = (int)sp_blsquare_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_blsquare *arg2 = (sp_blsquare *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_blsquare_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_blsquare_init",2,"sp_blsquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_blsquare_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_init",2,SWIGTYPE_p_sp_blsquare);
  }
  
  result = (int)sp_blsquare_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_blsquare_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_blsquare *arg2 = (sp_blsquare *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_blsquare_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_blsquare_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_blsquare_compute",2,"sp_blsquare *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_blsquare_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_blsquare_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_blsquare_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_blsquare,0))){
    SWIG_fail_ptr("sp_blsquare_compute",2,SWIGTYPE_p_sp_blsquare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_blsquare_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_blsquare_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_blsquare_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bltriangle_ud_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bltriangle *arg1 = (sp_bltriangle *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("sp_bltriangle::ud",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bltriangle::ud",1,"sp_bltriangle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bltriangle::ud",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bltriangle,0))){
    SWIG_fail_ptr("sp_bltriangle_ud_set",1,SWIGTYPE_p_sp_bltriangle);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_bltriangle_ud_set");
  if (arg1) (arg1)->ud = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bltriangle_ud_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bltriangle *arg1 = (sp_bltriangle *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("sp_bltriangle::ud",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bltriangle::ud",1,"sp_bltriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bltriangle,0))){
    SWIG_fail_ptr("sp_bltriangle_ud_get",1,SWIGTYPE_p_sp_bltriangle);
  }
  
  result = (void *) ((arg1)->ud);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bltriangle_argpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bltriangle *arg1 = (sp_bltriangle *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_bltriangle::argpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bltriangle::argpos",1,"sp_bltriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bltriangle::argpos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bltriangle,0))){
    SWIG_fail_ptr("sp_bltriangle_argpos_set",1,SWIGTYPE_p_sp_bltriangle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->argpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bltriangle_argpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bltriangle *arg1 = (sp_bltriangle *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bltriangle::argpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bltriangle::argpos",1,"sp_bltriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bltriangle,0))){
    SWIG_fail_ptr("sp_bltriangle_argpos_get",1,SWIGTYPE_p_sp_bltriangle);
  }
  
  result = (int) ((arg1)->argpos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bltriangle_args_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bltriangle *arg1 = (sp_bltriangle *) 0 ;
  float **arg2 ;
  
  SWIG_check_num_args("sp_bltriangle::args",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bltriangle::args",1,"sp_bltriangle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bltriangle::args",2,"float *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bltriangle,0))){
    SWIG_fail_ptr("sp_bltriangle_args_set",1,SWIGTYPE_p_sp_bltriangle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("sp_bltriangle_args_set",2,SWIGTYPE_p_p_float);
  }
  
  {
    size_t ii;
    float * *b = (float * *) arg1->args;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((float * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bltriangle_args_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bltriangle *arg1 = (sp_bltriangle *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("sp_bltriangle::args",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bltriangle::args",1,"sp_bltriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bltriangle,0))){
    SWIG_fail_ptr("sp_bltriangle_args_get",1,SWIGTYPE_p_sp_bltriangle);
  }
  
  result = (float **)(float **) ((arg1)->args);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bltriangle_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bltriangle *arg1 = (sp_bltriangle *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_bltriangle::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bltriangle::freq",1,"sp_bltriangle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bltriangle::freq",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bltriangle,0))){
    SWIG_fail_ptr("sp_bltriangle_freq_set",1,SWIGTYPE_p_sp_bltriangle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_bltriangle_freq_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bltriangle_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bltriangle *arg1 = (sp_bltriangle *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_bltriangle::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bltriangle::freq",1,"sp_bltriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bltriangle,0))){
    SWIG_fail_ptr("sp_bltriangle_freq_get",1,SWIGTYPE_p_sp_bltriangle);
  }
  
  result = (float *) ((arg1)->freq);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bltriangle_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bltriangle *arg1 = (sp_bltriangle *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_bltriangle::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bltriangle::amp",1,"sp_bltriangle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bltriangle::amp",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bltriangle,0))){
    SWIG_fail_ptr("sp_bltriangle_amp_set",1,SWIGTYPE_p_sp_bltriangle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_bltriangle_amp_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bltriangle_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bltriangle *arg1 = (sp_bltriangle *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_bltriangle::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bltriangle::amp",1,"sp_bltriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bltriangle,0))){
    SWIG_fail_ptr("sp_bltriangle_amp_get",1,SWIGTYPE_p_sp_bltriangle);
  }
  
  result = (float *) ((arg1)->amp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_bltriangle(lua_State* L) {
  int SWIG_arg = 0;
  sp_bltriangle *result = 0 ;
  
  SWIG_check_num_args("sp_bltriangle::sp_bltriangle",0,0)
  result = (sp_bltriangle *)new sp_bltriangle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_bltriangle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_bltriangle(void *obj) {
sp_bltriangle *arg1 = (sp_bltriangle *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_bltriangle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_bltriangle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_bltriangle_attributes[] = {
    { "ud", _wrap_sp_bltriangle_ud_get, _wrap_sp_bltriangle_ud_set },
    { "argpos", _wrap_sp_bltriangle_argpos_get, _wrap_sp_bltriangle_argpos_set },
    { "args", _wrap_sp_bltriangle_args_get, _wrap_sp_bltriangle_args_set },
    { "freq", _wrap_sp_bltriangle_freq_get, _wrap_sp_bltriangle_freq_set },
    { "amp", _wrap_sp_bltriangle_amp_get, _wrap_sp_bltriangle_amp_set },
    {0,0,0}
};
static swig_lua_method swig_sp_bltriangle_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_bltriangle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_bltriangle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_bltriangle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_bltriangle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_bltriangle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_bltriangle_Sf_SwigStatic = {
    "sp_bltriangle",
    swig_sp_bltriangle_Sf_SwigStatic_methods,
    swig_sp_bltriangle_Sf_SwigStatic_attributes,
    swig_sp_bltriangle_Sf_SwigStatic_constants,
    swig_sp_bltriangle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_bltriangle_bases[] = {0};
static const char *swig_sp_bltriangle_base_names[] = {0};
static swig_lua_class _wrap_class_sp_bltriangle = { "sp_bltriangle", "sp_bltriangle", &SWIGTYPE_p_sp_bltriangle,_proxy__wrap_new_sp_bltriangle, swig_delete_sp_bltriangle, swig_sp_bltriangle_methods, swig_sp_bltriangle_attributes, &swig_sp_bltriangle_Sf_SwigStatic, swig_sp_bltriangle_meta, swig_sp_bltriangle_bases, swig_sp_bltriangle_base_names };

static int _wrap_sp_bltriangle_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_bltriangle **arg1 = (sp_bltriangle **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bltriangle_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bltriangle_create",1,"sp_bltriangle **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_bltriangle,0))){
    SWIG_fail_ptr("sp_bltriangle_create",1,SWIGTYPE_p_p_sp_bltriangle);
  }
  
  result = (int)sp_bltriangle_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bltriangle_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_bltriangle **arg1 = (sp_bltriangle **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bltriangle_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bltriangle_destroy",1,"sp_bltriangle **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_bltriangle,0))){
    SWIG_fail_ptr("sp_bltriangle_destroy",1,SWIGTYPE_p_p_sp_bltriangle);
  }
  
  result = (int)sp_bltriangle_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bltriangle_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_bltriangle *arg2 = (sp_bltriangle *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bltriangle_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bltriangle_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bltriangle_init",2,"sp_bltriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_bltriangle_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_bltriangle,0))){
    SWIG_fail_ptr("sp_bltriangle_init",2,SWIGTYPE_p_sp_bltriangle);
  }
  
  result = (int)sp_bltriangle_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bltriangle_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_bltriangle *arg2 = (sp_bltriangle *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bltriangle_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bltriangle_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bltriangle_compute",2,"sp_bltriangle *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_bltriangle_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_bltriangle_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_bltriangle_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_bltriangle,0))){
    SWIG_fail_ptr("sp_bltriangle_compute",2,SWIGTYPE_p_sp_bltriangle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_bltriangle_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_bltriangle_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_bltriangle_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fold_incr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fold *arg1 = (sp_fold *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fold::incr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fold::incr",1,"sp_fold *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fold::incr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fold,0))){
    SWIG_fail_ptr("sp_fold_incr_set",1,SWIGTYPE_p_sp_fold);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->incr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fold_incr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fold *arg1 = (sp_fold *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fold::incr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fold::incr",1,"sp_fold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fold,0))){
    SWIG_fail_ptr("sp_fold_incr_get",1,SWIGTYPE_p_sp_fold);
  }
  
  result = (float) ((arg1)->incr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fold_index_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fold *arg1 = (sp_fold *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fold::index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fold::index",1,"sp_fold *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fold::index",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fold,0))){
    SWIG_fail_ptr("sp_fold_index_set",1,SWIGTYPE_p_sp_fold);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->index = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fold_index_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fold *arg1 = (sp_fold *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fold::index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fold::index",1,"sp_fold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fold,0))){
    SWIG_fail_ptr("sp_fold_index_get",1,SWIGTYPE_p_sp_fold);
  }
  
  result = (float) ((arg1)->index);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fold_sample_index_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fold *arg1 = (sp_fold *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fold::sample_index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fold::sample_index",1,"sp_fold *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fold::sample_index",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fold,0))){
    SWIG_fail_ptr("sp_fold_sample_index_set",1,SWIGTYPE_p_sp_fold);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fold_sample_index_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->sample_index = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fold_sample_index_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fold *arg1 = (sp_fold *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fold::sample_index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fold::sample_index",1,"sp_fold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fold,0))){
    SWIG_fail_ptr("sp_fold_sample_index_get",1,SWIGTYPE_p_sp_fold);
  }
  
  result =  ((arg1)->sample_index);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fold_value_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fold *arg1 = (sp_fold *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fold::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fold::value",1,"sp_fold *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fold::value",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fold,0))){
    SWIG_fail_ptr("sp_fold_value_set",1,SWIGTYPE_p_sp_fold);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->value = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fold_value_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fold *arg1 = (sp_fold *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fold::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fold::value",1,"sp_fold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fold,0))){
    SWIG_fail_ptr("sp_fold_value_get",1,SWIGTYPE_p_sp_fold);
  }
  
  result = (float) ((arg1)->value);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_fold(lua_State* L) {
  int SWIG_arg = 0;
  sp_fold *result = 0 ;
  
  SWIG_check_num_args("sp_fold::sp_fold",0,0)
  result = (sp_fold *)new sp_fold();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fold,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_fold(void *obj) {
sp_fold *arg1 = (sp_fold *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_fold(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_fold);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_fold_attributes[] = {
    { "incr", _wrap_sp_fold_incr_get, _wrap_sp_fold_incr_set },
    { "index", _wrap_sp_fold_index_get, _wrap_sp_fold_index_set },
    { "sample_index", _wrap_sp_fold_sample_index_get, _wrap_sp_fold_sample_index_set },
    { "value", _wrap_sp_fold_value_get, _wrap_sp_fold_value_set },
    {0,0,0}
};
static swig_lua_method swig_sp_fold_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_fold_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_fold_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_fold_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_fold_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_fold_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_fold_Sf_SwigStatic = {
    "sp_fold",
    swig_sp_fold_Sf_SwigStatic_methods,
    swig_sp_fold_Sf_SwigStatic_attributes,
    swig_sp_fold_Sf_SwigStatic_constants,
    swig_sp_fold_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_fold_bases[] = {0};
static const char *swig_sp_fold_base_names[] = {0};
static swig_lua_class _wrap_class_sp_fold = { "sp_fold", "sp_fold", &SWIGTYPE_p_sp_fold,_proxy__wrap_new_sp_fold, swig_delete_sp_fold, swig_sp_fold_methods, swig_sp_fold_attributes, &swig_sp_fold_Sf_SwigStatic, swig_sp_fold_meta, swig_sp_fold_bases, swig_sp_fold_base_names };

static int _wrap_sp_fold_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_fold **arg1 = (sp_fold **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fold_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fold_create",1,"sp_fold **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_fold,0))){
    SWIG_fail_ptr("sp_fold_create",1,SWIGTYPE_p_p_sp_fold);
  }
  
  result = (int)sp_fold_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fold_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_fold **arg1 = (sp_fold **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fold_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fold_destroy",1,"sp_fold **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_fold,0))){
    SWIG_fail_ptr("sp_fold_destroy",1,SWIGTYPE_p_p_sp_fold);
  }
  
  result = (int)sp_fold_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fold_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_fold *arg2 = (sp_fold *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fold_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fold_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fold_init",2,"sp_fold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_fold_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fold,0))){
    SWIG_fail_ptr("sp_fold_init",2,SWIGTYPE_p_sp_fold);
  }
  
  result = (int)sp_fold_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fold_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_fold *arg2 = (sp_fold *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fold_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fold_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fold_compute",2,"sp_fold *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_fold_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_fold_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_fold_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fold,0))){
    SWIG_fail_ptr("sp_fold_compute",2,SWIGTYPE_p_sp_fold);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_fold_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_fold_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_fold_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bitcrush_bitdepth_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bitcrush *arg1 = (sp_bitcrush *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bitcrush::bitdepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bitcrush::bitdepth",1,"sp_bitcrush *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bitcrush::bitdepth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bitcrush,0))){
    SWIG_fail_ptr("sp_bitcrush_bitdepth_set",1,SWIGTYPE_p_sp_bitcrush);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->bitdepth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bitcrush_bitdepth_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bitcrush *arg1 = (sp_bitcrush *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bitcrush::bitdepth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bitcrush::bitdepth",1,"sp_bitcrush *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bitcrush,0))){
    SWIG_fail_ptr("sp_bitcrush_bitdepth_get",1,SWIGTYPE_p_sp_bitcrush);
  }
  
  result = (float) ((arg1)->bitdepth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bitcrush_srate_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bitcrush *arg1 = (sp_bitcrush *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_bitcrush::srate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bitcrush::srate",1,"sp_bitcrush *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_bitcrush::srate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bitcrush,0))){
    SWIG_fail_ptr("sp_bitcrush_srate_set",1,SWIGTYPE_p_sp_bitcrush);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->srate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bitcrush_srate_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bitcrush *arg1 = (sp_bitcrush *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_bitcrush::srate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bitcrush::srate",1,"sp_bitcrush *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bitcrush,0))){
    SWIG_fail_ptr("sp_bitcrush_srate_get",1,SWIGTYPE_p_sp_bitcrush);
  }
  
  result = (float) ((arg1)->srate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bitcrush_fold_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_bitcrush *arg1 = (sp_bitcrush *) 0 ;
  sp_fold *arg2 = (sp_fold *) 0 ;
  
  SWIG_check_num_args("sp_bitcrush::fold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bitcrush::fold",1,"sp_bitcrush *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bitcrush::fold",2,"sp_fold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bitcrush,0))){
    SWIG_fail_ptr("sp_bitcrush_fold_set",1,SWIGTYPE_p_sp_bitcrush);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fold,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_bitcrush_fold_set",2,SWIGTYPE_p_sp_fold);
  }
  
  if (arg1) (arg1)->fold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bitcrush_fold_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_bitcrush *arg1 = (sp_bitcrush *) 0 ;
  sp_fold *result = 0 ;
  
  SWIG_check_num_args("sp_bitcrush::fold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bitcrush::fold",1,"sp_bitcrush *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_bitcrush,0))){
    SWIG_fail_ptr("sp_bitcrush_fold_get",1,SWIGTYPE_p_sp_bitcrush);
  }
  
  result = (sp_fold *) ((arg1)->fold);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_bitcrush(lua_State* L) {
  int SWIG_arg = 0;
  sp_bitcrush *result = 0 ;
  
  SWIG_check_num_args("sp_bitcrush::sp_bitcrush",0,0)
  result = (sp_bitcrush *)new sp_bitcrush();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_bitcrush,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_bitcrush(void *obj) {
sp_bitcrush *arg1 = (sp_bitcrush *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_bitcrush(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_bitcrush);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_bitcrush_attributes[] = {
    { "bitdepth", _wrap_sp_bitcrush_bitdepth_get, _wrap_sp_bitcrush_bitdepth_set },
    { "srate", _wrap_sp_bitcrush_srate_get, _wrap_sp_bitcrush_srate_set },
    { "fold", _wrap_sp_bitcrush_fold_get, _wrap_sp_bitcrush_fold_set },
    {0,0,0}
};
static swig_lua_method swig_sp_bitcrush_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_bitcrush_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_bitcrush_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_bitcrush_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_bitcrush_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_bitcrush_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_bitcrush_Sf_SwigStatic = {
    "sp_bitcrush",
    swig_sp_bitcrush_Sf_SwigStatic_methods,
    swig_sp_bitcrush_Sf_SwigStatic_attributes,
    swig_sp_bitcrush_Sf_SwigStatic_constants,
    swig_sp_bitcrush_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_bitcrush_bases[] = {0};
static const char *swig_sp_bitcrush_base_names[] = {0};
static swig_lua_class _wrap_class_sp_bitcrush = { "sp_bitcrush", "sp_bitcrush", &SWIGTYPE_p_sp_bitcrush,_proxy__wrap_new_sp_bitcrush, swig_delete_sp_bitcrush, swig_sp_bitcrush_methods, swig_sp_bitcrush_attributes, &swig_sp_bitcrush_Sf_SwigStatic, swig_sp_bitcrush_meta, swig_sp_bitcrush_bases, swig_sp_bitcrush_base_names };

static int _wrap_sp_bitcrush_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_bitcrush **arg1 = (sp_bitcrush **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bitcrush_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bitcrush_create",1,"sp_bitcrush **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_bitcrush,0))){
    SWIG_fail_ptr("sp_bitcrush_create",1,SWIGTYPE_p_p_sp_bitcrush);
  }
  
  result = (int)sp_bitcrush_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bitcrush_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_bitcrush **arg1 = (sp_bitcrush **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bitcrush_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bitcrush_destroy",1,"sp_bitcrush **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_bitcrush,0))){
    SWIG_fail_ptr("sp_bitcrush_destroy",1,SWIGTYPE_p_p_sp_bitcrush);
  }
  
  result = (int)sp_bitcrush_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bitcrush_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_bitcrush *arg2 = (sp_bitcrush *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bitcrush_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bitcrush_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bitcrush_init",2,"sp_bitcrush *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_bitcrush_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_bitcrush,0))){
    SWIG_fail_ptr("sp_bitcrush_init",2,SWIGTYPE_p_sp_bitcrush);
  }
  
  result = (int)sp_bitcrush_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_bitcrush_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_bitcrush *arg2 = (sp_bitcrush *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_bitcrush_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_bitcrush_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_bitcrush_compute",2,"sp_bitcrush *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_bitcrush_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_bitcrush_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_bitcrush_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_bitcrush,0))){
    SWIG_fail_ptr("sp_bitcrush_compute",2,SWIGTYPE_p_sp_bitcrush);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_bitcrush_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_bitcrush_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_bitcrush_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_brown_brown_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_brown *arg1 = (sp_brown *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_brown::brown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_brown::brown",1,"sp_brown *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_brown::brown",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_brown,0))){
    SWIG_fail_ptr("sp_brown_brown_set",1,SWIGTYPE_p_sp_brown);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->brown = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_brown_brown_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_brown *arg1 = (sp_brown *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_brown::brown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_brown::brown",1,"sp_brown *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_brown,0))){
    SWIG_fail_ptr("sp_brown_brown_get",1,SWIGTYPE_p_sp_brown);
  }
  
  result = (float) ((arg1)->brown);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_brown(lua_State* L) {
  int SWIG_arg = 0;
  sp_brown *result = 0 ;
  
  SWIG_check_num_args("sp_brown::sp_brown",0,0)
  result = (sp_brown *)new sp_brown();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_brown,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_brown(void *obj) {
sp_brown *arg1 = (sp_brown *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_brown(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_brown);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_brown_attributes[] = {
    { "brown", _wrap_sp_brown_brown_get, _wrap_sp_brown_brown_set },
    {0,0,0}
};
static swig_lua_method swig_sp_brown_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_brown_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_brown_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_brown_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_brown_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_brown_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_brown_Sf_SwigStatic = {
    "sp_brown",
    swig_sp_brown_Sf_SwigStatic_methods,
    swig_sp_brown_Sf_SwigStatic_attributes,
    swig_sp_brown_Sf_SwigStatic_constants,
    swig_sp_brown_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_brown_bases[] = {0};
static const char *swig_sp_brown_base_names[] = {0};
static swig_lua_class _wrap_class_sp_brown = { "sp_brown", "sp_brown", &SWIGTYPE_p_sp_brown,_proxy__wrap_new_sp_brown, swig_delete_sp_brown, swig_sp_brown_methods, swig_sp_brown_attributes, &swig_sp_brown_Sf_SwigStatic, swig_sp_brown_meta, swig_sp_brown_bases, swig_sp_brown_base_names };

static int _wrap_sp_brown_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_brown **arg1 = (sp_brown **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_brown_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_brown_create",1,"sp_brown **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_brown,0))){
    SWIG_fail_ptr("sp_brown_create",1,SWIGTYPE_p_p_sp_brown);
  }
  
  result = (int)sp_brown_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_brown_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_brown **arg1 = (sp_brown **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_brown_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_brown_destroy",1,"sp_brown **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_brown,0))){
    SWIG_fail_ptr("sp_brown_destroy",1,SWIGTYPE_p_p_sp_brown);
  }
  
  result = (int)sp_brown_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_brown_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_brown *arg2 = (sp_brown *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_brown_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_brown_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_brown_init",2,"sp_brown *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_brown_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_brown,0))){
    SWIG_fail_ptr("sp_brown_init",2,SWIGTYPE_p_sp_brown);
  }
  
  result = (int)sp_brown_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_brown_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_brown *arg2 = (sp_brown *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_brown_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_brown_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_brown_compute",2,"sp_brown *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_brown_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_brown_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_brown_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_brown,0))){
    SWIG_fail_ptr("sp_brown_compute",2,SWIGTYPE_p_sp_brown);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_brown_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_brown_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_brown_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbp::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::sr",1,"sp_butbp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbp::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_sr_set",1,SWIGTYPE_p_sp_butbp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbp::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::sr",1,"sp_butbp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_sr_get",1,SWIGTYPE_p_sp_butbp);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbp::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::freq",1,"sp_butbp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbp::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_freq_set",1,SWIGTYPE_p_sp_butbp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbp::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::freq",1,"sp_butbp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_freq_get",1,SWIGTYPE_p_sp_butbp);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbp::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::bw",1,"sp_butbp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbp::bw",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_bw_set",1,SWIGTYPE_p_sp_butbp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbp::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::bw",1,"sp_butbp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_bw_get",1,SWIGTYPE_p_sp_butbp);
  }
  
  result = (float) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_istor_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbp::istor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::istor",1,"sp_butbp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbp::istor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_istor_set",1,SWIGTYPE_p_sp_butbp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->istor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_istor_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbp::istor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::istor",1,"sp_butbp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_istor_get",1,SWIGTYPE_p_sp_butbp);
  }
  
  result = (float) ((arg1)->istor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_lkf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbp::lkf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::lkf",1,"sp_butbp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbp::lkf",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_lkf_set",1,SWIGTYPE_p_sp_butbp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lkf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_lkf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbp::lkf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::lkf",1,"sp_butbp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_lkf_get",1,SWIGTYPE_p_sp_butbp);
  }
  
  result = (float) ((arg1)->lkf);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_lkb_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbp::lkb",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::lkb",1,"sp_butbp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbp::lkb",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_lkb_set",1,SWIGTYPE_p_sp_butbp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lkb = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_lkb_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbp::lkb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::lkb",1,"sp_butbp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_lkb_get",1,SWIGTYPE_p_sp_butbp);
  }
  
  result = (float) ((arg1)->lkb);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_a_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_butbp::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::a",1,"sp_butbp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_butbp::a",2,"float [8]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_a_set",1,SWIGTYPE_p_sp_butbp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_butbp_a_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->a;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_a_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_butbp::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::a",1,"sp_butbp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_a_get",1,SWIGTYPE_p_sp_butbp);
  }
  
  result = (float *)(float *) ((arg1)->a);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_pidsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbp::pidsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::pidsr",1,"sp_butbp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbp::pidsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_pidsr_set",1,SWIGTYPE_p_sp_butbp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pidsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_pidsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbp::pidsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::pidsr",1,"sp_butbp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_pidsr_get",1,SWIGTYPE_p_sp_butbp);
  }
  
  result = (float) ((arg1)->pidsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_tpidsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbp::tpidsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::tpidsr",1,"sp_butbp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbp::tpidsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_tpidsr_set",1,SWIGTYPE_p_sp_butbp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tpidsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_tpidsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *arg1 = (sp_butbp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbp::tpidsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp::tpidsr",1,"sp_butbp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_tpidsr_get",1,SWIGTYPE_p_sp_butbp);
  }
  
  result = (float) ((arg1)->tpidsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_butbp(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp *result = 0 ;
  
  SWIG_check_num_args("sp_butbp::sp_butbp",0,0)
  result = (sp_butbp *)new sp_butbp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_butbp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_butbp(void *obj) {
sp_butbp *arg1 = (sp_butbp *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_butbp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_butbp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_butbp_attributes[] = {
    { "sr", _wrap_sp_butbp_sr_get, _wrap_sp_butbp_sr_set },
    { "freq", _wrap_sp_butbp_freq_get, _wrap_sp_butbp_freq_set },
    { "bw", _wrap_sp_butbp_bw_get, _wrap_sp_butbp_bw_set },
    { "istor", _wrap_sp_butbp_istor_get, _wrap_sp_butbp_istor_set },
    { "lkf", _wrap_sp_butbp_lkf_get, _wrap_sp_butbp_lkf_set },
    { "lkb", _wrap_sp_butbp_lkb_get, _wrap_sp_butbp_lkb_set },
    { "a", _wrap_sp_butbp_a_get, _wrap_sp_butbp_a_set },
    { "pidsr", _wrap_sp_butbp_pidsr_get, _wrap_sp_butbp_pidsr_set },
    { "tpidsr", _wrap_sp_butbp_tpidsr_get, _wrap_sp_butbp_tpidsr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_butbp_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_butbp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_butbp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_butbp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_butbp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_butbp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_butbp_SwigStatic = {
    "sp_butbp",
    swig_sp_butbp_SwigStatic_methods,
    swig_sp_butbp_SwigStatic_attributes,
    swig_sp_butbp_SwigStatic_constants,
    swig_sp_butbp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_butbp_bases[] = {0};
static const char *swig_sp_butbp_base_names[] = {0};
static swig_lua_class _wrap_class_sp_butbp = { "sp_butbp", "sp_butbp", &SWIGTYPE_p_sp_butbp,_proxy__wrap_new_sp_butbp, swig_delete_sp_butbp, swig_sp_butbp_methods, swig_sp_butbp_attributes, &swig_sp_butbp_SwigStatic, swig_sp_butbp_meta, swig_sp_butbp_bases, swig_sp_butbp_base_names };

static int _wrap_sp_butbp_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp **arg1 = (sp_butbp **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_butbp_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp_create",1,"sp_butbp **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_create",1,SWIGTYPE_p_p_sp_butbp);
  }
  
  result = (int)sp_butbp_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbp **arg1 = (sp_butbp **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_butbp_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp_destroy",1,"sp_butbp **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_destroy",1,SWIGTYPE_p_p_sp_butbp);
  }
  
  result = (int)sp_butbp_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_butbp *arg2 = (sp_butbp *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_butbp_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_butbp_init",2,"sp_butbp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_butbp_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_init",2,SWIGTYPE_p_sp_butbp);
  }
  
  result = (int)sp_butbp_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbp_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_butbp *arg2 = (sp_butbp *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_butbp_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbp_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_butbp_compute",2,"sp_butbp *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_butbp_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_butbp_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_butbp_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_butbp,0))){
    SWIG_fail_ptr("sp_butbp_compute",2,SWIGTYPE_p_sp_butbp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_butbp_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_butbp_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_butbp_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbr::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::sr",1,"sp_butbr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbr::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_sr_set",1,SWIGTYPE_p_sp_butbr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbr::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::sr",1,"sp_butbr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_sr_get",1,SWIGTYPE_p_sp_butbr);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbr::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::freq",1,"sp_butbr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbr::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_freq_set",1,SWIGTYPE_p_sp_butbr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbr::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::freq",1,"sp_butbr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_freq_get",1,SWIGTYPE_p_sp_butbr);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbr::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::bw",1,"sp_butbr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbr::bw",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_bw_set",1,SWIGTYPE_p_sp_butbr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbr::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::bw",1,"sp_butbr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_bw_get",1,SWIGTYPE_p_sp_butbr);
  }
  
  result = (float) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_istor_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbr::istor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::istor",1,"sp_butbr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbr::istor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_istor_set",1,SWIGTYPE_p_sp_butbr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->istor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_istor_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbr::istor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::istor",1,"sp_butbr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_istor_get",1,SWIGTYPE_p_sp_butbr);
  }
  
  result = (float) ((arg1)->istor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_lkf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbr::lkf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::lkf",1,"sp_butbr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbr::lkf",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_lkf_set",1,SWIGTYPE_p_sp_butbr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lkf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_lkf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbr::lkf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::lkf",1,"sp_butbr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_lkf_get",1,SWIGTYPE_p_sp_butbr);
  }
  
  result = (float) ((arg1)->lkf);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_lkb_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbr::lkb",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::lkb",1,"sp_butbr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbr::lkb",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_lkb_set",1,SWIGTYPE_p_sp_butbr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lkb = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_lkb_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbr::lkb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::lkb",1,"sp_butbr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_lkb_get",1,SWIGTYPE_p_sp_butbr);
  }
  
  result = (float) ((arg1)->lkb);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_a_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_butbr::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::a",1,"sp_butbr *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_butbr::a",2,"float [8]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_a_set",1,SWIGTYPE_p_sp_butbr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_butbr_a_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->a;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_a_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_butbr::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::a",1,"sp_butbr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_a_get",1,SWIGTYPE_p_sp_butbr);
  }
  
  result = (float *)(float *) ((arg1)->a);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_pidsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbr::pidsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::pidsr",1,"sp_butbr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbr::pidsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_pidsr_set",1,SWIGTYPE_p_sp_butbr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pidsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_pidsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbr::pidsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::pidsr",1,"sp_butbr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_pidsr_get",1,SWIGTYPE_p_sp_butbr);
  }
  
  result = (float) ((arg1)->pidsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_tpidsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butbr::tpidsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::tpidsr",1,"sp_butbr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butbr::tpidsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_tpidsr_set",1,SWIGTYPE_p_sp_butbr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tpidsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_tpidsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *arg1 = (sp_butbr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butbr::tpidsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr::tpidsr",1,"sp_butbr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_tpidsr_get",1,SWIGTYPE_p_sp_butbr);
  }
  
  result = (float) ((arg1)->tpidsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_butbr(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr *result = 0 ;
  
  SWIG_check_num_args("sp_butbr::sp_butbr",0,0)
  result = (sp_butbr *)new sp_butbr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_butbr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_butbr(void *obj) {
sp_butbr *arg1 = (sp_butbr *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_butbr(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_butbr);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_butbr_attributes[] = {
    { "sr", _wrap_sp_butbr_sr_get, _wrap_sp_butbr_sr_set },
    { "freq", _wrap_sp_butbr_freq_get, _wrap_sp_butbr_freq_set },
    { "bw", _wrap_sp_butbr_bw_get, _wrap_sp_butbr_bw_set },
    { "istor", _wrap_sp_butbr_istor_get, _wrap_sp_butbr_istor_set },
    { "lkf", _wrap_sp_butbr_lkf_get, _wrap_sp_butbr_lkf_set },
    { "lkb", _wrap_sp_butbr_lkb_get, _wrap_sp_butbr_lkb_set },
    { "a", _wrap_sp_butbr_a_get, _wrap_sp_butbr_a_set },
    { "pidsr", _wrap_sp_butbr_pidsr_get, _wrap_sp_butbr_pidsr_set },
    { "tpidsr", _wrap_sp_butbr_tpidsr_get, _wrap_sp_butbr_tpidsr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_butbr_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_butbr_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_butbr_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_butbr_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_butbr_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_butbr_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_butbr_Sf_SwigStatic = {
    "sp_butbr",
    swig_sp_butbr_Sf_SwigStatic_methods,
    swig_sp_butbr_Sf_SwigStatic_attributes,
    swig_sp_butbr_Sf_SwigStatic_constants,
    swig_sp_butbr_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_butbr_bases[] = {0};
static const char *swig_sp_butbr_base_names[] = {0};
static swig_lua_class _wrap_class_sp_butbr = { "sp_butbr", "sp_butbr", &SWIGTYPE_p_sp_butbr,_proxy__wrap_new_sp_butbr, swig_delete_sp_butbr, swig_sp_butbr_methods, swig_sp_butbr_attributes, &swig_sp_butbr_Sf_SwigStatic, swig_sp_butbr_meta, swig_sp_butbr_bases, swig_sp_butbr_base_names };

static int _wrap_sp_butbr_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr **arg1 = (sp_butbr **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_butbr_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr_create",1,"sp_butbr **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_create",1,SWIGTYPE_p_p_sp_butbr);
  }
  
  result = (int)sp_butbr_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_butbr **arg1 = (sp_butbr **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_butbr_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr_destroy",1,"sp_butbr **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_destroy",1,SWIGTYPE_p_p_sp_butbr);
  }
  
  result = (int)sp_butbr_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_butbr *arg2 = (sp_butbr *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_butbr_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_butbr_init",2,"sp_butbr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_butbr_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_init",2,SWIGTYPE_p_sp_butbr);
  }
  
  result = (int)sp_butbr_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butbr_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_butbr *arg2 = (sp_butbr *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_butbr_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butbr_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_butbr_compute",2,"sp_butbr *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_butbr_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_butbr_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_butbr_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_butbr,0))){
    SWIG_fail_ptr("sp_butbr_compute",2,SWIGTYPE_p_sp_butbr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_butbr_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_butbr_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_butbr_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp *arg1 = (sp_buthp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_buthp::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp::sr",1,"sp_buthp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_buthp::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_sr_set",1,SWIGTYPE_p_sp_buthp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp *arg1 = (sp_buthp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_buthp::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp::sr",1,"sp_buthp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_sr_get",1,SWIGTYPE_p_sp_buthp);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp *arg1 = (sp_buthp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_buthp::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp::freq",1,"sp_buthp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_buthp::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_freq_set",1,SWIGTYPE_p_sp_buthp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp *arg1 = (sp_buthp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_buthp::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp::freq",1,"sp_buthp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_freq_get",1,SWIGTYPE_p_sp_buthp);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_istor_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp *arg1 = (sp_buthp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_buthp::istor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp::istor",1,"sp_buthp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_buthp::istor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_istor_set",1,SWIGTYPE_p_sp_buthp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->istor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_istor_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp *arg1 = (sp_buthp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_buthp::istor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp::istor",1,"sp_buthp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_istor_get",1,SWIGTYPE_p_sp_buthp);
  }
  
  result = (float) ((arg1)->istor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_lkf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp *arg1 = (sp_buthp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_buthp::lkf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp::lkf",1,"sp_buthp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_buthp::lkf",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_lkf_set",1,SWIGTYPE_p_sp_buthp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lkf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_lkf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp *arg1 = (sp_buthp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_buthp::lkf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp::lkf",1,"sp_buthp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_lkf_get",1,SWIGTYPE_p_sp_buthp);
  }
  
  result = (float) ((arg1)->lkf);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_a_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp *arg1 = (sp_buthp *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_buthp::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp::a",1,"sp_buthp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_buthp::a",2,"float [8]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_a_set",1,SWIGTYPE_p_sp_buthp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_buthp_a_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->a;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_a_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp *arg1 = (sp_buthp *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_buthp::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp::a",1,"sp_buthp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_a_get",1,SWIGTYPE_p_sp_buthp);
  }
  
  result = (float *)(float *) ((arg1)->a);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_pidsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp *arg1 = (sp_buthp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_buthp::pidsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp::pidsr",1,"sp_buthp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_buthp::pidsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_pidsr_set",1,SWIGTYPE_p_sp_buthp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pidsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_pidsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp *arg1 = (sp_buthp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_buthp::pidsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp::pidsr",1,"sp_buthp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_pidsr_get",1,SWIGTYPE_p_sp_buthp);
  }
  
  result = (float) ((arg1)->pidsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_buthp(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp *result = 0 ;
  
  SWIG_check_num_args("sp_buthp::sp_buthp",0,0)
  result = (sp_buthp *)new sp_buthp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_buthp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_buthp(void *obj) {
sp_buthp *arg1 = (sp_buthp *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_buthp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_buthp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_buthp_attributes[] = {
    { "sr", _wrap_sp_buthp_sr_get, _wrap_sp_buthp_sr_set },
    { "freq", _wrap_sp_buthp_freq_get, _wrap_sp_buthp_freq_set },
    { "istor", _wrap_sp_buthp_istor_get, _wrap_sp_buthp_istor_set },
    { "lkf", _wrap_sp_buthp_lkf_get, _wrap_sp_buthp_lkf_set },
    { "a", _wrap_sp_buthp_a_get, _wrap_sp_buthp_a_set },
    { "pidsr", _wrap_sp_buthp_pidsr_get, _wrap_sp_buthp_pidsr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_buthp_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_buthp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_buthp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_buthp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_buthp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_buthp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_buthp_SwigStatic = {
    "sp_buthp",
    swig_sp_buthp_SwigStatic_methods,
    swig_sp_buthp_SwigStatic_attributes,
    swig_sp_buthp_SwigStatic_constants,
    swig_sp_buthp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_buthp_bases[] = {0};
static const char *swig_sp_buthp_base_names[] = {0};
static swig_lua_class _wrap_class_sp_buthp = { "sp_buthp", "sp_buthp", &SWIGTYPE_p_sp_buthp,_proxy__wrap_new_sp_buthp, swig_delete_sp_buthp, swig_sp_buthp_methods, swig_sp_buthp_attributes, &swig_sp_buthp_SwigStatic, swig_sp_buthp_meta, swig_sp_buthp_bases, swig_sp_buthp_base_names };

static int _wrap_sp_buthp_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp **arg1 = (sp_buthp **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_buthp_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp_create",1,"sp_buthp **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_create",1,SWIGTYPE_p_p_sp_buthp);
  }
  
  result = (int)sp_buthp_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_buthp **arg1 = (sp_buthp **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_buthp_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp_destroy",1,"sp_buthp **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_destroy",1,SWIGTYPE_p_p_sp_buthp);
  }
  
  result = (int)sp_buthp_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_buthp *arg2 = (sp_buthp *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_buthp_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_buthp_init",2,"sp_buthp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_buthp_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_init",2,SWIGTYPE_p_sp_buthp);
  }
  
  result = (int)sp_buthp_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_buthp_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_buthp *arg2 = (sp_buthp *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_buthp_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_buthp_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_buthp_compute",2,"sp_buthp *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_buthp_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_buthp_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_buthp_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_buthp,0))){
    SWIG_fail_ptr("sp_buthp_compute",2,SWIGTYPE_p_sp_buthp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_buthp_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_buthp_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_buthp_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp *arg1 = (sp_butlp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butlp::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp::sr",1,"sp_butlp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butlp::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_sr_set",1,SWIGTYPE_p_sp_butlp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp *arg1 = (sp_butlp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butlp::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp::sr",1,"sp_butlp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_sr_get",1,SWIGTYPE_p_sp_butlp);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp *arg1 = (sp_butlp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butlp::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp::freq",1,"sp_butlp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butlp::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_freq_set",1,SWIGTYPE_p_sp_butlp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp *arg1 = (sp_butlp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butlp::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp::freq",1,"sp_butlp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_freq_get",1,SWIGTYPE_p_sp_butlp);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_istor_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp *arg1 = (sp_butlp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butlp::istor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp::istor",1,"sp_butlp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butlp::istor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_istor_set",1,SWIGTYPE_p_sp_butlp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->istor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_istor_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp *arg1 = (sp_butlp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butlp::istor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp::istor",1,"sp_butlp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_istor_get",1,SWIGTYPE_p_sp_butlp);
  }
  
  result = (float) ((arg1)->istor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_lkf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp *arg1 = (sp_butlp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butlp::lkf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp::lkf",1,"sp_butlp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butlp::lkf",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_lkf_set",1,SWIGTYPE_p_sp_butlp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lkf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_lkf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp *arg1 = (sp_butlp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butlp::lkf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp::lkf",1,"sp_butlp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_lkf_get",1,SWIGTYPE_p_sp_butlp);
  }
  
  result = (float) ((arg1)->lkf);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_a_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp *arg1 = (sp_butlp *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_butlp::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp::a",1,"sp_butlp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_butlp::a",2,"float [8]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_a_set",1,SWIGTYPE_p_sp_butlp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_butlp_a_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->a;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_a_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp *arg1 = (sp_butlp *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_butlp::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp::a",1,"sp_butlp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_a_get",1,SWIGTYPE_p_sp_butlp);
  }
  
  result = (float *)(float *) ((arg1)->a);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_pidsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp *arg1 = (sp_butlp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_butlp::pidsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp::pidsr",1,"sp_butlp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_butlp::pidsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_pidsr_set",1,SWIGTYPE_p_sp_butlp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pidsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_pidsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp *arg1 = (sp_butlp *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_butlp::pidsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp::pidsr",1,"sp_butlp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_pidsr_get",1,SWIGTYPE_p_sp_butlp);
  }
  
  result = (float) ((arg1)->pidsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_butlp(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp *result = 0 ;
  
  SWIG_check_num_args("sp_butlp::sp_butlp",0,0)
  result = (sp_butlp *)new sp_butlp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_butlp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_butlp(void *obj) {
sp_butlp *arg1 = (sp_butlp *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_butlp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_butlp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_butlp_attributes[] = {
    { "sr", _wrap_sp_butlp_sr_get, _wrap_sp_butlp_sr_set },
    { "freq", _wrap_sp_butlp_freq_get, _wrap_sp_butlp_freq_set },
    { "istor", _wrap_sp_butlp_istor_get, _wrap_sp_butlp_istor_set },
    { "lkf", _wrap_sp_butlp_lkf_get, _wrap_sp_butlp_lkf_set },
    { "a", _wrap_sp_butlp_a_get, _wrap_sp_butlp_a_set },
    { "pidsr", _wrap_sp_butlp_pidsr_get, _wrap_sp_butlp_pidsr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_butlp_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_butlp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_butlp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_butlp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_butlp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_butlp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_butlp_SwigStatic = {
    "sp_butlp",
    swig_sp_butlp_SwigStatic_methods,
    swig_sp_butlp_SwigStatic_attributes,
    swig_sp_butlp_SwigStatic_constants,
    swig_sp_butlp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_butlp_bases[] = {0};
static const char *swig_sp_butlp_base_names[] = {0};
static swig_lua_class _wrap_class_sp_butlp = { "sp_butlp", "sp_butlp", &SWIGTYPE_p_sp_butlp,_proxy__wrap_new_sp_butlp, swig_delete_sp_butlp, swig_sp_butlp_methods, swig_sp_butlp_attributes, &swig_sp_butlp_SwigStatic, swig_sp_butlp_meta, swig_sp_butlp_bases, swig_sp_butlp_base_names };

static int _wrap_sp_butlp_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp **arg1 = (sp_butlp **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_butlp_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp_create",1,"sp_butlp **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_create",1,SWIGTYPE_p_p_sp_butlp);
  }
  
  result = (int)sp_butlp_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_butlp **arg1 = (sp_butlp **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_butlp_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp_destroy",1,"sp_butlp **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_destroy",1,SWIGTYPE_p_p_sp_butlp);
  }
  
  result = (int)sp_butlp_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_butlp *arg2 = (sp_butlp *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_butlp_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_butlp_init",2,"sp_butlp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_butlp_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_init",2,SWIGTYPE_p_sp_butlp);
  }
  
  result = (int)sp_butlp_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_butlp_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_butlp *arg2 = (sp_butlp *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_butlp_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_butlp_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_butlp_compute",2,"sp_butlp *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_butlp_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_butlp_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_butlp_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_butlp,0))){
    SWIG_fail_ptr("sp_butlp_compute",2,SWIGTYPE_p_sp_butlp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_butlp_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_butlp_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_butlp_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clip_lim_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_clip *arg1 = (sp_clip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_clip::lim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clip::lim",1,"sp_clip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_clip::lim",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_clip,0))){
    SWIG_fail_ptr("sp_clip_lim_set",1,SWIGTYPE_p_sp_clip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lim = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clip_lim_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_clip *arg1 = (sp_clip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_clip::lim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clip::lim",1,"sp_clip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_clip,0))){
    SWIG_fail_ptr("sp_clip_lim_get",1,SWIGTYPE_p_sp_clip);
  }
  
  result = (float) ((arg1)->lim);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clip_k1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_clip *arg1 = (sp_clip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_clip::k1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clip::k1",1,"sp_clip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_clip::k1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_clip,0))){
    SWIG_fail_ptr("sp_clip_k1_set",1,SWIGTYPE_p_sp_clip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->k1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clip_k1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_clip *arg1 = (sp_clip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_clip::k1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clip::k1",1,"sp_clip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_clip,0))){
    SWIG_fail_ptr("sp_clip_k1_get",1,SWIGTYPE_p_sp_clip);
  }
  
  result = (float) ((arg1)->k1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_clip(lua_State* L) {
  int SWIG_arg = 0;
  sp_clip *result = 0 ;
  
  SWIG_check_num_args("sp_clip::sp_clip",0,0)
  result = (sp_clip *)new sp_clip();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_clip,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_clip(void *obj) {
sp_clip *arg1 = (sp_clip *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_clip(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_clip);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_clip_attributes[] = {
    { "lim", _wrap_sp_clip_lim_get, _wrap_sp_clip_lim_set },
    { "k1", _wrap_sp_clip_k1_get, _wrap_sp_clip_k1_set },
    {0,0,0}
};
static swig_lua_method swig_sp_clip_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_clip_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_clip_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_clip_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_clip_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_clip_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_clip_SwigStatic = {
    "sp_clip",
    swig_sp_clip_SwigStatic_methods,
    swig_sp_clip_SwigStatic_attributes,
    swig_sp_clip_SwigStatic_constants,
    swig_sp_clip_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_clip_bases[] = {0};
static const char *swig_sp_clip_base_names[] = {0};
static swig_lua_class _wrap_class_sp_clip = { "sp_clip", "sp_clip", &SWIGTYPE_p_sp_clip,_proxy__wrap_new_sp_clip, swig_delete_sp_clip, swig_sp_clip_methods, swig_sp_clip_attributes, &swig_sp_clip_SwigStatic, swig_sp_clip_meta, swig_sp_clip_bases, swig_sp_clip_base_names };

static int _wrap_sp_clip_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_clip **arg1 = (sp_clip **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_clip_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clip_create",1,"sp_clip **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_clip,0))){
    SWIG_fail_ptr("sp_clip_create",1,SWIGTYPE_p_p_sp_clip);
  }
  
  result = (int)sp_clip_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clip_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_clip **arg1 = (sp_clip **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_clip_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clip_destroy",1,"sp_clip **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_clip,0))){
    SWIG_fail_ptr("sp_clip_destroy",1,SWIGTYPE_p_p_sp_clip);
  }
  
  result = (int)sp_clip_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clip_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_clip *arg2 = (sp_clip *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_clip_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clip_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_clip_init",2,"sp_clip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_clip_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_clip,0))){
    SWIG_fail_ptr("sp_clip_init",2,SWIGTYPE_p_sp_clip);
  }
  
  result = (int)sp_clip_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clip_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_clip *arg2 = (sp_clip *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_clip_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clip_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_clip_compute",2,"sp_clip *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_clip_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_clip_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_clip_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_clip,0))){
    SWIG_fail_ptr("sp_clip_compute",2,SWIGTYPE_p_sp_clip);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_clip_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_clip_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_clip_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clock_bpm_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_clock *arg1 = (sp_clock *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_clock::bpm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clock::bpm",1,"sp_clock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_clock::bpm",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_clock,0))){
    SWIG_fail_ptr("sp_clock_bpm_set",1,SWIGTYPE_p_sp_clock);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->bpm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clock_bpm_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_clock *arg1 = (sp_clock *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_clock::bpm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clock::bpm",1,"sp_clock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_clock,0))){
    SWIG_fail_ptr("sp_clock_bpm_get",1,SWIGTYPE_p_sp_clock);
  }
  
  result = (float) ((arg1)->bpm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clock_subdiv_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_clock *arg1 = (sp_clock *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_clock::subdiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clock::subdiv",1,"sp_clock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_clock::subdiv",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_clock,0))){
    SWIG_fail_ptr("sp_clock_subdiv_set",1,SWIGTYPE_p_sp_clock);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->subdiv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clock_subdiv_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_clock *arg1 = (sp_clock *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_clock::subdiv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clock::subdiv",1,"sp_clock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_clock,0))){
    SWIG_fail_ptr("sp_clock_subdiv_get",1,SWIGTYPE_p_sp_clock);
  }
  
  result = (float) ((arg1)->subdiv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clock_counter_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_clock *arg1 = (sp_clock *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_clock::counter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clock::counter",1,"sp_clock *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_clock::counter",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_clock,0))){
    SWIG_fail_ptr("sp_clock_counter_set",1,SWIGTYPE_p_sp_clock);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_clock_counter_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->counter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clock_counter_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_clock *arg1 = (sp_clock *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_clock::counter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clock::counter",1,"sp_clock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_clock,0))){
    SWIG_fail_ptr("sp_clock_counter_get",1,SWIGTYPE_p_sp_clock);
  }
  
  result =  ((arg1)->counter);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_clock(lua_State* L) {
  int SWIG_arg = 0;
  sp_clock *result = 0 ;
  
  SWIG_check_num_args("sp_clock::sp_clock",0,0)
  result = (sp_clock *)new sp_clock();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_clock,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_clock(void *obj) {
sp_clock *arg1 = (sp_clock *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_clock(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_clock);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_clock_attributes[] = {
    { "bpm", _wrap_sp_clock_bpm_get, _wrap_sp_clock_bpm_set },
    { "subdiv", _wrap_sp_clock_subdiv_get, _wrap_sp_clock_subdiv_set },
    { "counter", _wrap_sp_clock_counter_get, _wrap_sp_clock_counter_set },
    {0,0,0}
};
static swig_lua_method swig_sp_clock_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_clock_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_clock_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_clock_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_clock_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_clock_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_clock_Sf_SwigStatic = {
    "sp_clock",
    swig_sp_clock_Sf_SwigStatic_methods,
    swig_sp_clock_Sf_SwigStatic_attributes,
    swig_sp_clock_Sf_SwigStatic_constants,
    swig_sp_clock_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_clock_bases[] = {0};
static const char *swig_sp_clock_base_names[] = {0};
static swig_lua_class _wrap_class_sp_clock = { "sp_clock", "sp_clock", &SWIGTYPE_p_sp_clock,_proxy__wrap_new_sp_clock, swig_delete_sp_clock, swig_sp_clock_methods, swig_sp_clock_attributes, &swig_sp_clock_Sf_SwigStatic, swig_sp_clock_meta, swig_sp_clock_bases, swig_sp_clock_base_names };

static int _wrap_sp_clock_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_clock **arg1 = (sp_clock **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_clock_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clock_create",1,"sp_clock **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_clock,0))){
    SWIG_fail_ptr("sp_clock_create",1,SWIGTYPE_p_p_sp_clock);
  }
  
  result = (int)sp_clock_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clock_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_clock **arg1 = (sp_clock **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_clock_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clock_destroy",1,"sp_clock **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_clock,0))){
    SWIG_fail_ptr("sp_clock_destroy",1,SWIGTYPE_p_p_sp_clock);
  }
  
  result = (int)sp_clock_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clock_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_clock *arg2 = (sp_clock *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_clock_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clock_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_clock_init",2,"sp_clock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_clock_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_clock,0))){
    SWIG_fail_ptr("sp_clock_init",2,SWIGTYPE_p_sp_clock);
  }
  
  result = (int)sp_clock_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_clock_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_clock *arg2 = (sp_clock *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_clock_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_clock_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_clock_compute",2,"sp_clock *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_clock_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_clock_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_clock_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_clock,0))){
    SWIG_fail_ptr("sp_clock_compute",2,SWIGTYPE_p_sp_clock);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_clock_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_clock_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_clock_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_revtime_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *arg1 = (sp_comb *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_comb::revtime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb::revtime",1,"sp_comb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_comb::revtime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_revtime_set",1,SWIGTYPE_p_sp_comb);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->revtime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_revtime_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *arg1 = (sp_comb *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_comb::revtime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb::revtime",1,"sp_comb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_revtime_get",1,SWIGTYPE_p_sp_comb);
  }
  
  result = (float) ((arg1)->revtime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_looptime_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *arg1 = (sp_comb *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_comb::looptime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb::looptime",1,"sp_comb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_comb::looptime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_looptime_set",1,SWIGTYPE_p_sp_comb);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->looptime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_looptime_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *arg1 = (sp_comb *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_comb::looptime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb::looptime",1,"sp_comb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_looptime_get",1,SWIGTYPE_p_sp_comb);
  }
  
  result = (float) ((arg1)->looptime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_coef_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *arg1 = (sp_comb *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_comb::coef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb::coef",1,"sp_comb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_comb::coef",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_coef_set",1,SWIGTYPE_p_sp_comb);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->coef = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_coef_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *arg1 = (sp_comb *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_comb::coef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb::coef",1,"sp_comb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_coef_get",1,SWIGTYPE_p_sp_comb);
  }
  
  result = (float) ((arg1)->coef);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_prvt_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *arg1 = (sp_comb *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_comb::prvt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb::prvt",1,"sp_comb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_comb::prvt",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_prvt_set",1,SWIGTYPE_p_sp_comb);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prvt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_prvt_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *arg1 = (sp_comb *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_comb::prvt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb::prvt",1,"sp_comb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_prvt_get",1,SWIGTYPE_p_sp_comb);
  }
  
  result = (float) ((arg1)->prvt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_aux_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *arg1 = (sp_comb *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_comb::aux",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb::aux",1,"sp_comb *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_comb::aux",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_aux_set",1,SWIGTYPE_p_sp_comb);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_comb_aux_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->aux = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_aux_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *arg1 = (sp_comb *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_comb::aux",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb::aux",1,"sp_comb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_aux_get",1,SWIGTYPE_p_sp_comb);
  }
  
  result = (sp_auxdata *)& ((arg1)->aux);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_bufpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *arg1 = (sp_comb *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_comb::bufpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb::bufpos",1,"sp_comb *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_comb::bufpos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_bufpos_set",1,SWIGTYPE_p_sp_comb);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_comb_bufpos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bufpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_bufpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *arg1 = (sp_comb *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_comb::bufpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb::bufpos",1,"sp_comb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_bufpos_get",1,SWIGTYPE_p_sp_comb);
  }
  
  result =  ((arg1)->bufpos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_bufsize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *arg1 = (sp_comb *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_comb::bufsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb::bufsize",1,"sp_comb *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_comb::bufsize",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_bufsize_set",1,SWIGTYPE_p_sp_comb);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_comb_bufsize_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bufsize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_bufsize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *arg1 = (sp_comb *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_comb::bufsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb::bufsize",1,"sp_comb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_bufsize_get",1,SWIGTYPE_p_sp_comb);
  }
  
  result =  ((arg1)->bufsize);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_comb(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb *result = 0 ;
  
  SWIG_check_num_args("sp_comb::sp_comb",0,0)
  result = (sp_comb *)new sp_comb();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_comb,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_comb(void *obj) {
sp_comb *arg1 = (sp_comb *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_comb(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_comb);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_comb_attributes[] = {
    { "revtime", _wrap_sp_comb_revtime_get, _wrap_sp_comb_revtime_set },
    { "looptime", _wrap_sp_comb_looptime_get, _wrap_sp_comb_looptime_set },
    { "coef", _wrap_sp_comb_coef_get, _wrap_sp_comb_coef_set },
    { "prvt", _wrap_sp_comb_prvt_get, _wrap_sp_comb_prvt_set },
    { "aux", _wrap_sp_comb_aux_get, _wrap_sp_comb_aux_set },
    { "bufpos", _wrap_sp_comb_bufpos_get, _wrap_sp_comb_bufpos_set },
    { "bufsize", _wrap_sp_comb_bufsize_get, _wrap_sp_comb_bufsize_set },
    {0,0,0}
};
static swig_lua_method swig_sp_comb_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_comb_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_comb_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_comb_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_comb_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_comb_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_comb_Sf_SwigStatic = {
    "sp_comb",
    swig_sp_comb_Sf_SwigStatic_methods,
    swig_sp_comb_Sf_SwigStatic_attributes,
    swig_sp_comb_Sf_SwigStatic_constants,
    swig_sp_comb_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_comb_bases[] = {0};
static const char *swig_sp_comb_base_names[] = {0};
static swig_lua_class _wrap_class_sp_comb = { "sp_comb", "sp_comb", &SWIGTYPE_p_sp_comb,_proxy__wrap_new_sp_comb, swig_delete_sp_comb, swig_sp_comb_methods, swig_sp_comb_attributes, &swig_sp_comb_Sf_SwigStatic, swig_sp_comb_meta, swig_sp_comb_bases, swig_sp_comb_base_names };

static int _wrap_sp_comb_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb **arg1 = (sp_comb **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_comb_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb_create",1,"sp_comb **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_create",1,SWIGTYPE_p_p_sp_comb);
  }
  
  result = (int)sp_comb_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_comb **arg1 = (sp_comb **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_comb_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb_destroy",1,"sp_comb **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_destroy",1,SWIGTYPE_p_p_sp_comb);
  }
  
  result = (int)sp_comb_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_comb *arg2 = (sp_comb *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("sp_comb_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_comb_init",2,"sp_comb *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_comb_init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_comb_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_init",2,SWIGTYPE_p_sp_comb);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)sp_comb_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_comb_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_comb *arg2 = (sp_comb *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_comb_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_comb_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_comb_compute",2,"sp_comb *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_comb_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_comb_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_comb_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_comb,0))){
    SWIG_fail_ptr("sp_comb_compute",2,SWIGTYPE_p_sp_comb);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_comb_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_comb_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_comb_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_faust_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *arg1 = (sp_compressor *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("sp_compressor::faust",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor::faust",1,"sp_compressor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_compressor::faust",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_faust_set",1,SWIGTYPE_p_sp_compressor);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_compressor_faust_set");
  if (arg1) (arg1)->faust = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_faust_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *arg1 = (sp_compressor *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("sp_compressor::faust",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor::faust",1,"sp_compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_faust_get",1,SWIGTYPE_p_sp_compressor);
  }
  
  result = (void *) ((arg1)->faust);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_argpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *arg1 = (sp_compressor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_compressor::argpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor::argpos",1,"sp_compressor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_compressor::argpos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_argpos_set",1,SWIGTYPE_p_sp_compressor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->argpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_argpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *arg1 = (sp_compressor *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_compressor::argpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor::argpos",1,"sp_compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_argpos_get",1,SWIGTYPE_p_sp_compressor);
  }
  
  result = (int) ((arg1)->argpos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_args_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *arg1 = (sp_compressor *) 0 ;
  float **arg2 ;
  
  SWIG_check_num_args("sp_compressor::args",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor::args",1,"sp_compressor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_compressor::args",2,"float *[4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_args_set",1,SWIGTYPE_p_sp_compressor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("sp_compressor_args_set",2,SWIGTYPE_p_p_float);
  }
  
  {
    size_t ii;
    float * *b = (float * *) arg1->args;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_args_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *arg1 = (sp_compressor *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("sp_compressor::args",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor::args",1,"sp_compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_args_get",1,SWIGTYPE_p_sp_compressor);
  }
  
  result = (float **)(float **) ((arg1)->args);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_ratio_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *arg1 = (sp_compressor *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_compressor::ratio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor::ratio",1,"sp_compressor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_compressor::ratio",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_ratio_set",1,SWIGTYPE_p_sp_compressor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_compressor_ratio_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->ratio = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_ratio_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *arg1 = (sp_compressor *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_compressor::ratio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor::ratio",1,"sp_compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_ratio_get",1,SWIGTYPE_p_sp_compressor);
  }
  
  result = (float *) ((arg1)->ratio);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_thresh_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *arg1 = (sp_compressor *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_compressor::thresh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor::thresh",1,"sp_compressor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_compressor::thresh",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_thresh_set",1,SWIGTYPE_p_sp_compressor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_compressor_thresh_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->thresh = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_thresh_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *arg1 = (sp_compressor *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_compressor::thresh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor::thresh",1,"sp_compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_thresh_get",1,SWIGTYPE_p_sp_compressor);
  }
  
  result = (float *) ((arg1)->thresh);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_atk_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *arg1 = (sp_compressor *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_compressor::atk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor::atk",1,"sp_compressor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_compressor::atk",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_atk_set",1,SWIGTYPE_p_sp_compressor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_compressor_atk_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->atk = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_atk_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *arg1 = (sp_compressor *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_compressor::atk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor::atk",1,"sp_compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_atk_get",1,SWIGTYPE_p_sp_compressor);
  }
  
  result = (float *) ((arg1)->atk);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_rel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *arg1 = (sp_compressor *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_compressor::rel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor::rel",1,"sp_compressor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_compressor::rel",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_rel_set",1,SWIGTYPE_p_sp_compressor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_compressor_rel_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->rel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_rel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *arg1 = (sp_compressor *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_compressor::rel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor::rel",1,"sp_compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_rel_get",1,SWIGTYPE_p_sp_compressor);
  }
  
  result = (float *) ((arg1)->rel);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_compressor(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor *result = 0 ;
  
  SWIG_check_num_args("sp_compressor::sp_compressor",0,0)
  result = (sp_compressor *)new sp_compressor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_compressor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_compressor(void *obj) {
sp_compressor *arg1 = (sp_compressor *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_compressor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_compressor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_compressor_attributes[] = {
    { "faust", _wrap_sp_compressor_faust_get, _wrap_sp_compressor_faust_set },
    { "argpos", _wrap_sp_compressor_argpos_get, _wrap_sp_compressor_argpos_set },
    { "args", _wrap_sp_compressor_args_get, _wrap_sp_compressor_args_set },
    { "ratio", _wrap_sp_compressor_ratio_get, _wrap_sp_compressor_ratio_set },
    { "thresh", _wrap_sp_compressor_thresh_get, _wrap_sp_compressor_thresh_set },
    { "atk", _wrap_sp_compressor_atk_get, _wrap_sp_compressor_atk_set },
    { "rel", _wrap_sp_compressor_rel_get, _wrap_sp_compressor_rel_set },
    {0,0,0}
};
static swig_lua_method swig_sp_compressor_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_compressor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_compressor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_compressor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_compressor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_compressor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_compressor_Sf_SwigStatic = {
    "sp_compressor",
    swig_sp_compressor_Sf_SwigStatic_methods,
    swig_sp_compressor_Sf_SwigStatic_attributes,
    swig_sp_compressor_Sf_SwigStatic_constants,
    swig_sp_compressor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_compressor_bases[] = {0};
static const char *swig_sp_compressor_base_names[] = {0};
static swig_lua_class _wrap_class_sp_compressor = { "sp_compressor", "sp_compressor", &SWIGTYPE_p_sp_compressor,_proxy__wrap_new_sp_compressor, swig_delete_sp_compressor, swig_sp_compressor_methods, swig_sp_compressor_attributes, &swig_sp_compressor_Sf_SwigStatic, swig_sp_compressor_meta, swig_sp_compressor_bases, swig_sp_compressor_base_names };

static int _wrap_sp_compressor_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor **arg1 = (sp_compressor **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_compressor_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor_create",1,"sp_compressor **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_create",1,SWIGTYPE_p_p_sp_compressor);
  }
  
  result = (int)sp_compressor_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_compressor **arg1 = (sp_compressor **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_compressor_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor_destroy",1,"sp_compressor **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_destroy",1,SWIGTYPE_p_p_sp_compressor);
  }
  
  result = (int)sp_compressor_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_compressor *arg2 = (sp_compressor *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_compressor_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_compressor_init",2,"sp_compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_compressor_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_init",2,SWIGTYPE_p_sp_compressor);
  }
  
  result = (int)sp_compressor_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_compressor_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_compressor *arg2 = (sp_compressor *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_compressor_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_compressor_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_compressor_compute",2,"sp_compressor *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_compressor_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_compressor_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_compressor_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_compressor,0))){
    SWIG_fail_ptr("sp_compressor_compute",2,SWIGTYPE_p_sp_compressor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_compressor_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_compressor_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_compressor_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_count_count_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_count *arg1 = (sp_count *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_count::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_count::count",1,"sp_count *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_count::count",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_count,0))){
    SWIG_fail_ptr("sp_count_count_set",1,SWIGTYPE_p_sp_count);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_count_count_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->count = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_count_count_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_count *arg1 = (sp_count *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_count::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_count::count",1,"sp_count *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_count,0))){
    SWIG_fail_ptr("sp_count_count_get",1,SWIGTYPE_p_sp_count);
  }
  
  result =  ((arg1)->count);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_count_curcount_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_count *arg1 = (sp_count *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_count::curcount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_count::curcount",1,"sp_count *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_count::curcount",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_count,0))){
    SWIG_fail_ptr("sp_count_curcount_set",1,SWIGTYPE_p_sp_count);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_count_curcount_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->curcount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_count_curcount_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_count *arg1 = (sp_count *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_count::curcount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_count::curcount",1,"sp_count *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_count,0))){
    SWIG_fail_ptr("sp_count_curcount_get",1,SWIGTYPE_p_sp_count);
  }
  
  result =  ((arg1)->curcount);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_count_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_count *arg1 = (sp_count *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_count::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_count::mode",1,"sp_count *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_count::mode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_count,0))){
    SWIG_fail_ptr("sp_count_mode_set",1,SWIGTYPE_p_sp_count);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_count_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_count *arg1 = (sp_count *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_count::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_count::mode",1,"sp_count *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_count,0))){
    SWIG_fail_ptr("sp_count_mode_get",1,SWIGTYPE_p_sp_count);
  }
  
  result = (int) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_count(lua_State* L) {
  int SWIG_arg = 0;
  sp_count *result = 0 ;
  
  SWIG_check_num_args("sp_count::sp_count",0,0)
  result = (sp_count *)new sp_count();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_count,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_count(void *obj) {
sp_count *arg1 = (sp_count *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_count(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_count);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_count_attributes[] = {
    { "count", _wrap_sp_count_count_get, _wrap_sp_count_count_set },
    { "curcount", _wrap_sp_count_curcount_get, _wrap_sp_count_curcount_set },
    { "mode", _wrap_sp_count_mode_get, _wrap_sp_count_mode_set },
    {0,0,0}
};
static swig_lua_method swig_sp_count_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_count_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_count_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_count_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_count_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_count_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_count_Sf_SwigStatic = {
    "sp_count",
    swig_sp_count_Sf_SwigStatic_methods,
    swig_sp_count_Sf_SwigStatic_attributes,
    swig_sp_count_Sf_SwigStatic_constants,
    swig_sp_count_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_count_bases[] = {0};
static const char *swig_sp_count_base_names[] = {0};
static swig_lua_class _wrap_class_sp_count = { "sp_count", "sp_count", &SWIGTYPE_p_sp_count,_proxy__wrap_new_sp_count, swig_delete_sp_count, swig_sp_count_methods, swig_sp_count_attributes, &swig_sp_count_Sf_SwigStatic, swig_sp_count_meta, swig_sp_count_bases, swig_sp_count_base_names };

static int _wrap_sp_count_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_count **arg1 = (sp_count **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_count_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_count_create",1,"sp_count **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_count,0))){
    SWIG_fail_ptr("sp_count_create",1,SWIGTYPE_p_p_sp_count);
  }
  
  result = (int)sp_count_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_count_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_count **arg1 = (sp_count **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_count_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_count_destroy",1,"sp_count **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_count,0))){
    SWIG_fail_ptr("sp_count_destroy",1,SWIGTYPE_p_p_sp_count);
  }
  
  result = (int)sp_count_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_count_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_count *arg2 = (sp_count *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_count_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_count_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_count_init",2,"sp_count *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_count_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_count,0))){
    SWIG_fail_ptr("sp_count_init",2,SWIGTYPE_p_sp_count);
  }
  
  result = (int)sp_count_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_count_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_count *arg2 = (sp_count *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_count_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_count_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_count_compute",2,"sp_count *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_count_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_count_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_count_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_count,0))){
    SWIG_fail_ptr("sp_count_compute",2,SWIGTYPE_p_sp_count);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_count_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_count_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_count_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_aOut_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_conv::aOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::aOut",1,"sp_conv *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_conv::aOut",2,"float [1]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_aOut_set",1,SWIGTYPE_p_sp_conv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_conv_aOut_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->aOut;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_aOut_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_conv::aOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::aOut",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_aOut_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (float *)(float *) ((arg1)->aOut);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_aIn_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_conv::aIn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::aIn",1,"sp_conv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_conv::aIn",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_aIn_set",1,SWIGTYPE_p_sp_conv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->aIn = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_aIn_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_conv::aIn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::aIn",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_aIn_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (float) ((arg1)->aIn);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_iPartLen_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_conv::iPartLen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::iPartLen",1,"sp_conv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_conv::iPartLen",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_iPartLen_set",1,SWIGTYPE_p_sp_conv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iPartLen = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_iPartLen_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_conv::iPartLen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::iPartLen",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_iPartLen_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (float) ((arg1)->iPartLen);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_iSkipSamples_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_conv::iSkipSamples",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::iSkipSamples",1,"sp_conv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_conv::iSkipSamples",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_iSkipSamples_set",1,SWIGTYPE_p_sp_conv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iSkipSamples = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_iSkipSamples_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_conv::iSkipSamples",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::iSkipSamples",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_iSkipSamples_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (float) ((arg1)->iSkipSamples);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_iTotLen_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_conv::iTotLen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::iTotLen",1,"sp_conv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_conv::iTotLen",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_iTotLen_set",1,SWIGTYPE_p_sp_conv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iTotLen = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_iTotLen_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_conv::iTotLen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::iTotLen",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_iTotLen_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (float) ((arg1)->iTotLen);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_initDone_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_conv::initDone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::initDone",1,"sp_conv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_conv::initDone",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_initDone_set",1,SWIGTYPE_p_sp_conv);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->initDone = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_initDone_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_conv::initDone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::initDone",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_initDone_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (int) ((arg1)->initDone);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_nChannels_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_conv::nChannels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::nChannels",1,"sp_conv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_conv::nChannels",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_nChannels_set",1,SWIGTYPE_p_sp_conv);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nChannels = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_nChannels_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_conv::nChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::nChannels",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_nChannels_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (int) ((arg1)->nChannels);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_cnt_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_conv::cnt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::cnt",1,"sp_conv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_conv::cnt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_cnt_set",1,SWIGTYPE_p_sp_conv);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->cnt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_cnt_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_conv::cnt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::cnt",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_cnt_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (int) ((arg1)->cnt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_nPartitions_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_conv::nPartitions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::nPartitions",1,"sp_conv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_conv::nPartitions",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_nPartitions_set",1,SWIGTYPE_p_sp_conv);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nPartitions = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_nPartitions_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_conv::nPartitions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::nPartitions",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_nPartitions_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (int) ((arg1)->nPartitions);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_partSize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_conv::partSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::partSize",1,"sp_conv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_conv::partSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_partSize_set",1,SWIGTYPE_p_sp_conv);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->partSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_partSize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_conv::partSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::partSize",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_partSize_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (int) ((arg1)->partSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_rbCnt_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_conv::rbCnt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::rbCnt",1,"sp_conv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_conv::rbCnt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_rbCnt_set",1,SWIGTYPE_p_sp_conv);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rbCnt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_rbCnt_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_conv::rbCnt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::rbCnt",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_rbCnt_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (int) ((arg1)->rbCnt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_tmpBuf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_conv::tmpBuf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::tmpBuf",1,"sp_conv *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_conv::tmpBuf",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_tmpBuf_set",1,SWIGTYPE_p_sp_conv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_conv_tmpBuf_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->tmpBuf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_tmpBuf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_conv::tmpBuf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::tmpBuf",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_tmpBuf_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (float *) ((arg1)->tmpBuf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_ringBuf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_conv::ringBuf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::ringBuf",1,"sp_conv *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_conv::ringBuf",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_ringBuf_set",1,SWIGTYPE_p_sp_conv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_conv_ringBuf_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->ringBuf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_ringBuf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_conv::ringBuf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::ringBuf",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_ringBuf_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (float *) ((arg1)->ringBuf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_IR_Data_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float **arg2 ;
  
  SWIG_check_num_args("sp_conv::IR_Data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::IR_Data",1,"sp_conv *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_conv::IR_Data",2,"float *[1]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_IR_Data_set",1,SWIGTYPE_p_sp_conv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("sp_conv_IR_Data_set",2,SWIGTYPE_p_p_float);
  }
  
  {
    size_t ii;
    float * *b = (float * *) arg1->IR_Data;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((float * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_IR_Data_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("sp_conv::IR_Data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::IR_Data",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_IR_Data_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (float **)(float **) ((arg1)->IR_Data);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_outBuffers_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float **arg2 ;
  
  SWIG_check_num_args("sp_conv::outBuffers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::outBuffers",1,"sp_conv *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_conv::outBuffers",2,"float *[1]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_outBuffers_set",1,SWIGTYPE_p_sp_conv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("sp_conv_outBuffers_set",2,SWIGTYPE_p_p_float);
  }
  
  {
    size_t ii;
    float * *b = (float * *) arg1->outBuffers;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((float * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_outBuffers_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("sp_conv::outBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::outBuffers",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_outBuffers_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (float **)(float **) ((arg1)->outBuffers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_auxData_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_conv::auxData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::auxData",1,"sp_conv *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_conv::auxData",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_auxData_set",1,SWIGTYPE_p_sp_conv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_conv_auxData_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->auxData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_auxData_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_conv::auxData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::auxData",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_auxData_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (sp_auxdata *)& ((arg1)->auxData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_ftbl_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_conv::ftbl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::ftbl",1,"sp_conv *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_conv::ftbl",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_ftbl_set",1,SWIGTYPE_p_sp_conv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_conv_ftbl_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ftbl = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_ftbl_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_conv::ftbl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::ftbl",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_ftbl_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (sp_ftbl *) ((arg1)->ftbl);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_fft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  sp_fft *arg2 = (sp_fft *) 0 ;
  
  SWIG_check_num_args("sp_conv::fft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::fft",1,"sp_conv *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_conv::fft",2,"sp_fft *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_fft_set",1,SWIGTYPE_p_sp_conv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fft,0))){
    SWIG_fail_ptr("sp_conv_fft_set",2,SWIGTYPE_p_sp_fft);
  }
  
  if (arg1) (arg1)->fft = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_fft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *arg1 = (sp_conv *) 0 ;
  sp_fft *result = 0 ;
  
  SWIG_check_num_args("sp_conv::fft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv::fft",1,"sp_conv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_fft_get",1,SWIGTYPE_p_sp_conv);
  }
  
  result = (sp_fft *)& ((arg1)->fft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fft,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_conv(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv *result = 0 ;
  
  SWIG_check_num_args("sp_conv::sp_conv",0,0)
  result = (sp_conv *)new sp_conv();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_conv,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_conv(void *obj) {
sp_conv *arg1 = (sp_conv *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_conv(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_conv);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_conv_attributes[] = {
    { "aOut", _wrap_sp_conv_aOut_get, _wrap_sp_conv_aOut_set },
    { "aIn", _wrap_sp_conv_aIn_get, _wrap_sp_conv_aIn_set },
    { "iPartLen", _wrap_sp_conv_iPartLen_get, _wrap_sp_conv_iPartLen_set },
    { "iSkipSamples", _wrap_sp_conv_iSkipSamples_get, _wrap_sp_conv_iSkipSamples_set },
    { "iTotLen", _wrap_sp_conv_iTotLen_get, _wrap_sp_conv_iTotLen_set },
    { "initDone", _wrap_sp_conv_initDone_get, _wrap_sp_conv_initDone_set },
    { "nChannels", _wrap_sp_conv_nChannels_get, _wrap_sp_conv_nChannels_set },
    { "cnt", _wrap_sp_conv_cnt_get, _wrap_sp_conv_cnt_set },
    { "nPartitions", _wrap_sp_conv_nPartitions_get, _wrap_sp_conv_nPartitions_set },
    { "partSize", _wrap_sp_conv_partSize_get, _wrap_sp_conv_partSize_set },
    { "rbCnt", _wrap_sp_conv_rbCnt_get, _wrap_sp_conv_rbCnt_set },
    { "tmpBuf", _wrap_sp_conv_tmpBuf_get, _wrap_sp_conv_tmpBuf_set },
    { "ringBuf", _wrap_sp_conv_ringBuf_get, _wrap_sp_conv_ringBuf_set },
    { "IR_Data", _wrap_sp_conv_IR_Data_get, _wrap_sp_conv_IR_Data_set },
    { "outBuffers", _wrap_sp_conv_outBuffers_get, _wrap_sp_conv_outBuffers_set },
    { "auxData", _wrap_sp_conv_auxData_get, _wrap_sp_conv_auxData_set },
    { "ftbl", _wrap_sp_conv_ftbl_get, _wrap_sp_conv_ftbl_set },
    { "fft", _wrap_sp_conv_fft_get, _wrap_sp_conv_fft_set },
    {0,0,0}
};
static swig_lua_method swig_sp_conv_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_conv_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_conv_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_conv_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_conv_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_conv_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_conv_Sf_SwigStatic = {
    "sp_conv",
    swig_sp_conv_Sf_SwigStatic_methods,
    swig_sp_conv_Sf_SwigStatic_attributes,
    swig_sp_conv_Sf_SwigStatic_constants,
    swig_sp_conv_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_conv_bases[] = {0};
static const char *swig_sp_conv_base_names[] = {0};
static swig_lua_class _wrap_class_sp_conv = { "sp_conv", "sp_conv", &SWIGTYPE_p_sp_conv,_proxy__wrap_new_sp_conv, swig_delete_sp_conv, swig_sp_conv_methods, swig_sp_conv_attributes, &swig_sp_conv_Sf_SwigStatic, swig_sp_conv_meta, swig_sp_conv_bases, swig_sp_conv_base_names };

static int _wrap_sp_conv_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv **arg1 = (sp_conv **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_conv_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv_create",1,"sp_conv **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_create",1,SWIGTYPE_p_p_sp_conv);
  }
  
  result = (int)sp_conv_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_conv **arg1 = (sp_conv **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_conv_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv_destroy",1,"sp_conv **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_destroy",1,SWIGTYPE_p_p_sp_conv);
  }
  
  result = (int)sp_conv_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_conv *arg2 = (sp_conv *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  float arg4 ;
  int result;
  
  SWIG_check_num_args("sp_conv_init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_conv_init",2,"sp_conv *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_conv_init",3,"sp_ftbl *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("sp_conv_init",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_conv_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_init",2,SWIGTYPE_p_sp_conv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_conv_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  result = (int)sp_conv_init(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_conv_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_conv *arg2 = (sp_conv *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_conv_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_conv_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_conv_compute",2,"sp_conv *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_conv_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_conv_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_conv_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_conv,0))){
    SWIG_fail_ptr("sp_conv_compute",2,SWIGTYPE_p_sp_conv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_conv_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_conv_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_conv_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_crossfade_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_crossfade *arg1 = (sp_crossfade *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_crossfade::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_crossfade::pos",1,"sp_crossfade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_crossfade::pos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_crossfade,0))){
    SWIG_fail_ptr("sp_crossfade_pos_set",1,SWIGTYPE_p_sp_crossfade);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_crossfade_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_crossfade *arg1 = (sp_crossfade *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_crossfade::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_crossfade::pos",1,"sp_crossfade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_crossfade,0))){
    SWIG_fail_ptr("sp_crossfade_pos_get",1,SWIGTYPE_p_sp_crossfade);
  }
  
  result = (float) ((arg1)->pos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_crossfade(lua_State* L) {
  int SWIG_arg = 0;
  sp_crossfade *result = 0 ;
  
  SWIG_check_num_args("sp_crossfade::sp_crossfade",0,0)
  result = (sp_crossfade *)new sp_crossfade();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_crossfade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_crossfade(void *obj) {
sp_crossfade *arg1 = (sp_crossfade *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_crossfade(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_crossfade);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_crossfade_attributes[] = {
    { "pos", _wrap_sp_crossfade_pos_get, _wrap_sp_crossfade_pos_set },
    {0,0,0}
};
static swig_lua_method swig_sp_crossfade_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_crossfade_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_crossfade_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_crossfade_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_crossfade_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_crossfade_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_crossfade_Sf_SwigStatic = {
    "sp_crossfade",
    swig_sp_crossfade_Sf_SwigStatic_methods,
    swig_sp_crossfade_Sf_SwigStatic_attributes,
    swig_sp_crossfade_Sf_SwigStatic_constants,
    swig_sp_crossfade_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_crossfade_bases[] = {0};
static const char *swig_sp_crossfade_base_names[] = {0};
static swig_lua_class _wrap_class_sp_crossfade = { "sp_crossfade", "sp_crossfade", &SWIGTYPE_p_sp_crossfade,_proxy__wrap_new_sp_crossfade, swig_delete_sp_crossfade, swig_sp_crossfade_methods, swig_sp_crossfade_attributes, &swig_sp_crossfade_Sf_SwigStatic, swig_sp_crossfade_meta, swig_sp_crossfade_bases, swig_sp_crossfade_base_names };

static int _wrap_sp_crossfade_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_crossfade **arg1 = (sp_crossfade **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_crossfade_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_crossfade_create",1,"sp_crossfade **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_crossfade,0))){
    SWIG_fail_ptr("sp_crossfade_create",1,SWIGTYPE_p_p_sp_crossfade);
  }
  
  result = (int)sp_crossfade_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_crossfade_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_crossfade **arg1 = (sp_crossfade **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_crossfade_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_crossfade_destroy",1,"sp_crossfade **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_crossfade,0))){
    SWIG_fail_ptr("sp_crossfade_destroy",1,SWIGTYPE_p_p_sp_crossfade);
  }
  
  result = (int)sp_crossfade_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_crossfade_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_crossfade *arg2 = (sp_crossfade *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_crossfade_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_crossfade_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_crossfade_init",2,"sp_crossfade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_crossfade_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_crossfade,0))){
    SWIG_fail_ptr("sp_crossfade_init",2,SWIGTYPE_p_sp_crossfade);
  }
  
  result = (int)sp_crossfade_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_crossfade_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_crossfade *arg2 = (sp_crossfade *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_crossfade_compute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_crossfade_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_crossfade_compute",2,"sp_crossfade *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_crossfade_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_crossfade_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_crossfade_compute",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_crossfade_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_crossfade,0))){
    SWIG_fail_ptr("sp_crossfade_compute",2,SWIGTYPE_p_sp_crossfade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_crossfade_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_crossfade_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_crossfade_compute",5,SWIGTYPE_p_float);
  }
  
  result = (int)sp_crossfade_compute(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dcblock_gg_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dcblock *arg1 = (sp_dcblock *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dcblock::gg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dcblock::gg",1,"sp_dcblock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dcblock::gg",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dcblock,0))){
    SWIG_fail_ptr("sp_dcblock_gg_set",1,SWIGTYPE_p_sp_dcblock);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->gg = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dcblock_gg_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dcblock *arg1 = (sp_dcblock *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dcblock::gg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dcblock::gg",1,"sp_dcblock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dcblock,0))){
    SWIG_fail_ptr("sp_dcblock_gg_get",1,SWIGTYPE_p_sp_dcblock);
  }
  
  result = (float) ((arg1)->gg);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dcblock_outputs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dcblock *arg1 = (sp_dcblock *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dcblock::outputs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dcblock::outputs",1,"sp_dcblock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dcblock::outputs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dcblock,0))){
    SWIG_fail_ptr("sp_dcblock_outputs_set",1,SWIGTYPE_p_sp_dcblock);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dcblock_outputs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dcblock *arg1 = (sp_dcblock *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dcblock::outputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dcblock::outputs",1,"sp_dcblock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dcblock,0))){
    SWIG_fail_ptr("sp_dcblock_outputs_get",1,SWIGTYPE_p_sp_dcblock);
  }
  
  result = (float) ((arg1)->outputs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dcblock_inputs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dcblock *arg1 = (sp_dcblock *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dcblock::inputs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dcblock::inputs",1,"sp_dcblock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dcblock::inputs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dcblock,0))){
    SWIG_fail_ptr("sp_dcblock_inputs_set",1,SWIGTYPE_p_sp_dcblock);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->inputs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dcblock_inputs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dcblock *arg1 = (sp_dcblock *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dcblock::inputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dcblock::inputs",1,"sp_dcblock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dcblock,0))){
    SWIG_fail_ptr("sp_dcblock_inputs_get",1,SWIGTYPE_p_sp_dcblock);
  }
  
  result = (float) ((arg1)->inputs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dcblock_gain_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dcblock *arg1 = (sp_dcblock *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dcblock::gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dcblock::gain",1,"sp_dcblock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dcblock::gain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dcblock,0))){
    SWIG_fail_ptr("sp_dcblock_gain_set",1,SWIGTYPE_p_sp_dcblock);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->gain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dcblock_gain_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dcblock *arg1 = (sp_dcblock *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dcblock::gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dcblock::gain",1,"sp_dcblock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dcblock,0))){
    SWIG_fail_ptr("sp_dcblock_gain_get",1,SWIGTYPE_p_sp_dcblock);
  }
  
  result = (float) ((arg1)->gain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_dcblock(lua_State* L) {
  int SWIG_arg = 0;
  sp_dcblock *result = 0 ;
  
  SWIG_check_num_args("sp_dcblock::sp_dcblock",0,0)
  result = (sp_dcblock *)new sp_dcblock();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_dcblock,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_dcblock(void *obj) {
sp_dcblock *arg1 = (sp_dcblock *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_dcblock(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_dcblock);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_dcblock_attributes[] = {
    { "gg", _wrap_sp_dcblock_gg_get, _wrap_sp_dcblock_gg_set },
    { "outputs", _wrap_sp_dcblock_outputs_get, _wrap_sp_dcblock_outputs_set },
    { "inputs", _wrap_sp_dcblock_inputs_get, _wrap_sp_dcblock_inputs_set },
    { "gain", _wrap_sp_dcblock_gain_get, _wrap_sp_dcblock_gain_set },
    {0,0,0}
};
static swig_lua_method swig_sp_dcblock_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_dcblock_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_dcblock_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_dcblock_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_dcblock_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_dcblock_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_dcblock_Sf_SwigStatic = {
    "sp_dcblock",
    swig_sp_dcblock_Sf_SwigStatic_methods,
    swig_sp_dcblock_Sf_SwigStatic_attributes,
    swig_sp_dcblock_Sf_SwigStatic_constants,
    swig_sp_dcblock_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_dcblock_bases[] = {0};
static const char *swig_sp_dcblock_base_names[] = {0};
static swig_lua_class _wrap_class_sp_dcblock = { "sp_dcblock", "sp_dcblock", &SWIGTYPE_p_sp_dcblock,_proxy__wrap_new_sp_dcblock, swig_delete_sp_dcblock, swig_sp_dcblock_methods, swig_sp_dcblock_attributes, &swig_sp_dcblock_Sf_SwigStatic, swig_sp_dcblock_meta, swig_sp_dcblock_bases, swig_sp_dcblock_base_names };

static int _wrap_sp_dcblock_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_dcblock **arg1 = (sp_dcblock **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dcblock_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dcblock_create",1,"sp_dcblock **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_dcblock,0))){
    SWIG_fail_ptr("sp_dcblock_create",1,SWIGTYPE_p_p_sp_dcblock);
  }
  
  result = (int)sp_dcblock_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dcblock_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_dcblock **arg1 = (sp_dcblock **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dcblock_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dcblock_destroy",1,"sp_dcblock **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_dcblock,0))){
    SWIG_fail_ptr("sp_dcblock_destroy",1,SWIGTYPE_p_p_sp_dcblock);
  }
  
  result = (int)sp_dcblock_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dcblock_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_dcblock *arg2 = (sp_dcblock *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dcblock_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dcblock_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_dcblock_init",2,"sp_dcblock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_dcblock_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_dcblock,0))){
    SWIG_fail_ptr("sp_dcblock_init",2,SWIGTYPE_p_sp_dcblock);
  }
  
  result = (int)sp_dcblock_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dcblock_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_dcblock *arg2 = (sp_dcblock *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dcblock_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dcblock_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_dcblock_compute",2,"sp_dcblock *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_dcblock_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_dcblock_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_dcblock_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_dcblock,0))){
    SWIG_fail_ptr("sp_dcblock_compute",2,SWIGTYPE_p_sp_dcblock);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_dcblock_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_dcblock_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_dcblock_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_time_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay *arg1 = (sp_delay *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_delay::time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay::time",1,"sp_delay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_delay::time",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_time_set",1,SWIGTYPE_p_sp_delay);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->time = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_time_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay *arg1 = (sp_delay *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_delay::time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay::time",1,"sp_delay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_time_get",1,SWIGTYPE_p_sp_delay);
  }
  
  result = (float) ((arg1)->time);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_feedback_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay *arg1 = (sp_delay *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_delay::feedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay::feedback",1,"sp_delay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_delay::feedback",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_feedback_set",1,SWIGTYPE_p_sp_delay);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->feedback = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_feedback_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay *arg1 = (sp_delay *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_delay::feedback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay::feedback",1,"sp_delay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_feedback_get",1,SWIGTYPE_p_sp_delay);
  }
  
  result = (float) ((arg1)->feedback);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_last_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay *arg1 = (sp_delay *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_delay::last",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay::last",1,"sp_delay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_delay::last",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_last_set",1,SWIGTYPE_p_sp_delay);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->last = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_last_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay *arg1 = (sp_delay *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_delay::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay::last",1,"sp_delay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_last_get",1,SWIGTYPE_p_sp_delay);
  }
  
  result = (float) ((arg1)->last);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay *arg1 = (sp_delay *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_delay::buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay::buf",1,"sp_delay *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_delay::buf",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_buf_set",1,SWIGTYPE_p_sp_delay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_delay_buf_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->buf = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay *arg1 = (sp_delay *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_delay::buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay::buf",1,"sp_delay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_buf_get",1,SWIGTYPE_p_sp_delay);
  }
  
  result = (sp_auxdata *)& ((arg1)->buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_bufsize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay *arg1 = (sp_delay *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_delay::bufsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay::bufsize",1,"sp_delay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_delay::bufsize",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_bufsize_set",1,SWIGTYPE_p_sp_delay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_delay_bufsize_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bufsize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_bufsize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay *arg1 = (sp_delay *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_delay::bufsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay::bufsize",1,"sp_delay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_bufsize_get",1,SWIGTYPE_p_sp_delay);
  }
  
  result =  ((arg1)->bufsize);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_bufpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay *arg1 = (sp_delay *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_delay::bufpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay::bufpos",1,"sp_delay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_delay::bufpos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_bufpos_set",1,SWIGTYPE_p_sp_delay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_delay_bufpos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bufpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_bufpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay *arg1 = (sp_delay *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_delay::bufpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay::bufpos",1,"sp_delay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_bufpos_get",1,SWIGTYPE_p_sp_delay);
  }
  
  result =  ((arg1)->bufpos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_delay(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay *result = 0 ;
  
  SWIG_check_num_args("sp_delay::sp_delay",0,0)
  result = (sp_delay *)new sp_delay();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_delay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_delay(void *obj) {
sp_delay *arg1 = (sp_delay *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_delay(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_delay);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_delay_attributes[] = {
    { "time", _wrap_sp_delay_time_get, _wrap_sp_delay_time_set },
    { "feedback", _wrap_sp_delay_feedback_get, _wrap_sp_delay_feedback_set },
    { "last", _wrap_sp_delay_last_get, _wrap_sp_delay_last_set },
    { "buf", _wrap_sp_delay_buf_get, _wrap_sp_delay_buf_set },
    { "bufsize", _wrap_sp_delay_bufsize_get, _wrap_sp_delay_bufsize_set },
    { "bufpos", _wrap_sp_delay_bufpos_get, _wrap_sp_delay_bufpos_set },
    {0,0,0}
};
static swig_lua_method swig_sp_delay_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_delay_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_delay_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_delay_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_delay_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_delay_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_delay_Sf_SwigStatic = {
    "sp_delay",
    swig_sp_delay_Sf_SwigStatic_methods,
    swig_sp_delay_Sf_SwigStatic_attributes,
    swig_sp_delay_Sf_SwigStatic_constants,
    swig_sp_delay_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_delay_bases[] = {0};
static const char *swig_sp_delay_base_names[] = {0};
static swig_lua_class _wrap_class_sp_delay = { "sp_delay", "sp_delay", &SWIGTYPE_p_sp_delay,_proxy__wrap_new_sp_delay, swig_delete_sp_delay, swig_sp_delay_methods, swig_sp_delay_attributes, &swig_sp_delay_Sf_SwigStatic, swig_sp_delay_meta, swig_sp_delay_bases, swig_sp_delay_base_names };

static int _wrap_sp_delay_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay **arg1 = (sp_delay **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_delay_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay_create",1,"sp_delay **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_create",1,SWIGTYPE_p_p_sp_delay);
  }
  
  result = (int)sp_delay_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_delay **arg1 = (sp_delay **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_delay_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay_destroy",1,"sp_delay **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_destroy",1,SWIGTYPE_p_p_sp_delay);
  }
  
  result = (int)sp_delay_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_delay *arg2 = (sp_delay *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("sp_delay_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_delay_init",2,"sp_delay *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_delay_init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_delay_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_init",2,SWIGTYPE_p_sp_delay);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)sp_delay_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_delay_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_delay *arg2 = (sp_delay *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_delay_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_delay_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_delay_compute",2,"sp_delay *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_delay_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_delay_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_delay_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_delay,0))){
    SWIG_fail_ptr("sp_delay_compute",2,SWIGTYPE_p_sp_delay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_delay_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_delay_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_delay_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_alpha_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_diode::opva_alpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_alpha",1,"sp_diode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_diode::opva_alpha",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_alpha_set",1,SWIGTYPE_p_sp_diode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_diode_opva_alpha_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->opva_alpha;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_alpha_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_diode::opva_alpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_alpha",1,"sp_diode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_alpha_get",1,SWIGTYPE_p_sp_diode);
  }
  
  result = (float *)(float *) ((arg1)->opva_alpha);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_beta_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_diode::opva_beta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_beta",1,"sp_diode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_diode::opva_beta",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_beta_set",1,SWIGTYPE_p_sp_diode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_diode_opva_beta_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->opva_beta;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_beta_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_diode::opva_beta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_beta",1,"sp_diode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_beta_get",1,SWIGTYPE_p_sp_diode);
  }
  
  result = (float *)(float *) ((arg1)->opva_beta);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_gamma_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_diode::opva_gamma",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_gamma",1,"sp_diode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_diode::opva_gamma",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_gamma_set",1,SWIGTYPE_p_sp_diode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_diode_opva_gamma_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->opva_gamma;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_gamma_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_diode::opva_gamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_gamma",1,"sp_diode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_gamma_get",1,SWIGTYPE_p_sp_diode);
  }
  
  result = (float *)(float *) ((arg1)->opva_gamma);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_delta_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_diode::opva_delta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_delta",1,"sp_diode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_diode::opva_delta",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_delta_set",1,SWIGTYPE_p_sp_diode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_diode_opva_delta_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->opva_delta;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_delta_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_diode::opva_delta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_delta",1,"sp_diode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_delta_get",1,SWIGTYPE_p_sp_diode);
  }
  
  result = (float *)(float *) ((arg1)->opva_delta);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_eps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_diode::opva_eps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_eps",1,"sp_diode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_diode::opva_eps",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_eps_set",1,SWIGTYPE_p_sp_diode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_diode_opva_eps_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->opva_eps;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_eps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_diode::opva_eps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_eps",1,"sp_diode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_eps_get",1,SWIGTYPE_p_sp_diode);
  }
  
  result = (float *)(float *) ((arg1)->opva_eps);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_a0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_diode::opva_a0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_a0",1,"sp_diode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_diode::opva_a0",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_a0_set",1,SWIGTYPE_p_sp_diode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_diode_opva_a0_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->opva_a0;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_a0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_diode::opva_a0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_a0",1,"sp_diode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_a0_get",1,SWIGTYPE_p_sp_diode);
  }
  
  result = (float *)(float *) ((arg1)->opva_a0);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_fdbk_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_diode::opva_fdbk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_fdbk",1,"sp_diode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_diode::opva_fdbk",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_fdbk_set",1,SWIGTYPE_p_sp_diode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_diode_opva_fdbk_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->opva_fdbk;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_fdbk_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_diode::opva_fdbk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_fdbk",1,"sp_diode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_fdbk_get",1,SWIGTYPE_p_sp_diode);
  }
  
  result = (float *)(float *) ((arg1)->opva_fdbk);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_z1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_diode::opva_z1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_z1",1,"sp_diode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_diode::opva_z1",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_z1_set",1,SWIGTYPE_p_sp_diode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_diode_opva_z1_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->opva_z1;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_opva_z1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_diode::opva_z1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::opva_z1",1,"sp_diode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_opva_z1_get",1,SWIGTYPE_p_sp_diode);
  }
  
  result = (float *)(float *) ((arg1)->opva_z1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_SG_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_diode::SG",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::SG",1,"sp_diode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_diode::SG",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_SG_set",1,SWIGTYPE_p_sp_diode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_diode_SG_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->SG;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_SG_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_diode::SG",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::SG",1,"sp_diode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_SG_get",1,SWIGTYPE_p_sp_diode);
  }
  
  result = (float *)(float *) ((arg1)->SG);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_gamma_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_diode::gamma",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::gamma",1,"sp_diode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_diode::gamma",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_gamma_set",1,SWIGTYPE_p_sp_diode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->gamma = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_gamma_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_diode::gamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::gamma",1,"sp_diode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_gamma_get",1,SWIGTYPE_p_sp_diode);
  }
  
  result = (float) ((arg1)->gamma);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_diode::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::freq",1,"sp_diode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_diode::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_freq_set",1,SWIGTYPE_p_sp_diode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_diode::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::freq",1,"sp_diode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_freq_get",1,SWIGTYPE_p_sp_diode);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_K_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_diode::K",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::K",1,"sp_diode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_diode::K",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_K_set",1,SWIGTYPE_p_sp_diode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->K = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_K_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_diode::K",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::K",1,"sp_diode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_K_get",1,SWIGTYPE_p_sp_diode);
  }
  
  result = (float) ((arg1)->K);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_res_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_diode::res",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::res",1,"sp_diode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_diode::res",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_res_set",1,SWIGTYPE_p_sp_diode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->res = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_res_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *arg1 = (sp_diode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_diode::res",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode::res",1,"sp_diode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_res_get",1,SWIGTYPE_p_sp_diode);
  }
  
  result = (float) ((arg1)->res);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_diode(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode *result = 0 ;
  
  SWIG_check_num_args("sp_diode::sp_diode",0,0)
  result = (sp_diode *)new sp_diode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_diode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_diode(void *obj) {
sp_diode *arg1 = (sp_diode *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_diode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_diode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_diode_attributes[] = {
    { "opva_alpha", _wrap_sp_diode_opva_alpha_get, _wrap_sp_diode_opva_alpha_set },
    { "opva_beta", _wrap_sp_diode_opva_beta_get, _wrap_sp_diode_opva_beta_set },
    { "opva_gamma", _wrap_sp_diode_opva_gamma_get, _wrap_sp_diode_opva_gamma_set },
    { "opva_delta", _wrap_sp_diode_opva_delta_get, _wrap_sp_diode_opva_delta_set },
    { "opva_eps", _wrap_sp_diode_opva_eps_get, _wrap_sp_diode_opva_eps_set },
    { "opva_a0", _wrap_sp_diode_opva_a0_get, _wrap_sp_diode_opva_a0_set },
    { "opva_fdbk", _wrap_sp_diode_opva_fdbk_get, _wrap_sp_diode_opva_fdbk_set },
    { "opva_z1", _wrap_sp_diode_opva_z1_get, _wrap_sp_diode_opva_z1_set },
    { "SG", _wrap_sp_diode_SG_get, _wrap_sp_diode_SG_set },
    { "gamma", _wrap_sp_diode_gamma_get, _wrap_sp_diode_gamma_set },
    { "freq", _wrap_sp_diode_freq_get, _wrap_sp_diode_freq_set },
    { "K", _wrap_sp_diode_K_get, _wrap_sp_diode_K_set },
    { "res", _wrap_sp_diode_res_get, _wrap_sp_diode_res_set },
    {0,0,0}
};
static swig_lua_method swig_sp_diode_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_diode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_diode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_diode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_diode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_diode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_diode_Sf_SwigStatic = {
    "sp_diode",
    swig_sp_diode_Sf_SwigStatic_methods,
    swig_sp_diode_Sf_SwigStatic_attributes,
    swig_sp_diode_Sf_SwigStatic_constants,
    swig_sp_diode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_diode_bases[] = {0};
static const char *swig_sp_diode_base_names[] = {0};
static swig_lua_class _wrap_class_sp_diode = { "sp_diode", "sp_diode", &SWIGTYPE_p_sp_diode,_proxy__wrap_new_sp_diode, swig_delete_sp_diode, swig_sp_diode_methods, swig_sp_diode_attributes, &swig_sp_diode_Sf_SwigStatic, swig_sp_diode_meta, swig_sp_diode_bases, swig_sp_diode_base_names };

static int _wrap_sp_diode_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode **arg1 = (sp_diode **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_diode_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode_create",1,"sp_diode **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_create",1,SWIGTYPE_p_p_sp_diode);
  }
  
  result = (int)sp_diode_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_diode **arg1 = (sp_diode **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_diode_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode_destroy",1,"sp_diode **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_destroy",1,SWIGTYPE_p_p_sp_diode);
  }
  
  result = (int)sp_diode_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_diode *arg2 = (sp_diode *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_diode_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_diode_init",2,"sp_diode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_diode_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_init",2,SWIGTYPE_p_sp_diode);
  }
  
  result = (int)sp_diode_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diode_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_diode *arg2 = (sp_diode *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_diode_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diode_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_diode_compute",2,"sp_diode *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_diode_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_diode_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_diode_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_diode,0))){
    SWIG_fail_ptr("sp_diode_compute",2,SWIGTYPE_p_sp_diode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_diode_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_diode_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_diode_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dist_pregain_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dist *arg1 = (sp_dist *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dist::pregain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dist::pregain",1,"sp_dist *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dist::pregain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dist,0))){
    SWIG_fail_ptr("sp_dist_pregain_set",1,SWIGTYPE_p_sp_dist);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pregain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dist_pregain_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dist *arg1 = (sp_dist *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dist::pregain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dist::pregain",1,"sp_dist *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dist,0))){
    SWIG_fail_ptr("sp_dist_pregain_get",1,SWIGTYPE_p_sp_dist);
  }
  
  result = (float) ((arg1)->pregain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dist_postgain_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dist *arg1 = (sp_dist *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dist::postgain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dist::postgain",1,"sp_dist *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dist::postgain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dist,0))){
    SWIG_fail_ptr("sp_dist_postgain_set",1,SWIGTYPE_p_sp_dist);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->postgain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dist_postgain_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dist *arg1 = (sp_dist *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dist::postgain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dist::postgain",1,"sp_dist *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dist,0))){
    SWIG_fail_ptr("sp_dist_postgain_get",1,SWIGTYPE_p_sp_dist);
  }
  
  result = (float) ((arg1)->postgain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dist_shape1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dist *arg1 = (sp_dist *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dist::shape1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dist::shape1",1,"sp_dist *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dist::shape1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dist,0))){
    SWIG_fail_ptr("sp_dist_shape1_set",1,SWIGTYPE_p_sp_dist);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->shape1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dist_shape1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dist *arg1 = (sp_dist *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dist::shape1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dist::shape1",1,"sp_dist *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dist,0))){
    SWIG_fail_ptr("sp_dist_shape1_get",1,SWIGTYPE_p_sp_dist);
  }
  
  result = (float) ((arg1)->shape1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dist_shape2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dist *arg1 = (sp_dist *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dist::shape2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dist::shape2",1,"sp_dist *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dist::shape2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dist,0))){
    SWIG_fail_ptr("sp_dist_shape2_set",1,SWIGTYPE_p_sp_dist);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->shape2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dist_shape2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dist *arg1 = (sp_dist *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dist::shape2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dist::shape2",1,"sp_dist *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dist,0))){
    SWIG_fail_ptr("sp_dist_shape2_get",1,SWIGTYPE_p_sp_dist);
  }
  
  result = (float) ((arg1)->shape2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dist_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dist *arg1 = (sp_dist *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dist::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dist::mode",1,"sp_dist *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dist::mode",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dist,0))){
    SWIG_fail_ptr("sp_dist_mode_set",1,SWIGTYPE_p_sp_dist);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dist_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dist *arg1 = (sp_dist *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dist::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dist::mode",1,"sp_dist *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dist,0))){
    SWIG_fail_ptr("sp_dist_mode_get",1,SWIGTYPE_p_sp_dist);
  }
  
  result = (float) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_dist(lua_State* L) {
  int SWIG_arg = 0;
  sp_dist *result = 0 ;
  
  SWIG_check_num_args("sp_dist::sp_dist",0,0)
  result = (sp_dist *)new sp_dist();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_dist,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_dist(void *obj) {
sp_dist *arg1 = (sp_dist *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_dist(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_dist);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_dist_attributes[] = {
    { "pregain", _wrap_sp_dist_pregain_get, _wrap_sp_dist_pregain_set },
    { "postgain", _wrap_sp_dist_postgain_get, _wrap_sp_dist_postgain_set },
    { "shape1", _wrap_sp_dist_shape1_get, _wrap_sp_dist_shape1_set },
    { "shape2", _wrap_sp_dist_shape2_get, _wrap_sp_dist_shape2_set },
    { "mode", _wrap_sp_dist_mode_get, _wrap_sp_dist_mode_set },
    {0,0,0}
};
static swig_lua_method swig_sp_dist_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_dist_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_dist_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_dist_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_dist_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_dist_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_dist_Sf_SwigStatic = {
    "sp_dist",
    swig_sp_dist_Sf_SwigStatic_methods,
    swig_sp_dist_Sf_SwigStatic_attributes,
    swig_sp_dist_Sf_SwigStatic_constants,
    swig_sp_dist_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_dist_bases[] = {0};
static const char *swig_sp_dist_base_names[] = {0};
static swig_lua_class _wrap_class_sp_dist = { "sp_dist", "sp_dist", &SWIGTYPE_p_sp_dist,_proxy__wrap_new_sp_dist, swig_delete_sp_dist, swig_sp_dist_methods, swig_sp_dist_attributes, &swig_sp_dist_Sf_SwigStatic, swig_sp_dist_meta, swig_sp_dist_bases, swig_sp_dist_base_names };

static int _wrap_sp_dist_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_dist **arg1 = (sp_dist **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dist_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dist_create",1,"sp_dist **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_dist,0))){
    SWIG_fail_ptr("sp_dist_create",1,SWIGTYPE_p_p_sp_dist);
  }
  
  result = (int)sp_dist_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dist_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_dist **arg1 = (sp_dist **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dist_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dist_destroy",1,"sp_dist **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_dist,0))){
    SWIG_fail_ptr("sp_dist_destroy",1,SWIGTYPE_p_p_sp_dist);
  }
  
  result = (int)sp_dist_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dist_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_dist *arg2 = (sp_dist *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dist_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dist_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_dist_init",2,"sp_dist *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_dist_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_dist,0))){
    SWIG_fail_ptr("sp_dist_init",2,SWIGTYPE_p_sp_dist);
  }
  
  result = (int)sp_dist_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dist_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_dist *arg2 = (sp_dist *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dist_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dist_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_dist_compute",2,"sp_dist *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_dist_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_dist_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_dist_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_dist,0))){
    SWIG_fail_ptr("sp_dist_compute",2,SWIGTYPE_p_sp_dist);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_dist_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_dist_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_dist_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dmetro_time_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dmetro *arg1 = (sp_dmetro *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dmetro::time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dmetro::time",1,"sp_dmetro *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dmetro::time",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dmetro,0))){
    SWIG_fail_ptr("sp_dmetro_time_set",1,SWIGTYPE_p_sp_dmetro);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->time = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dmetro_time_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dmetro *arg1 = (sp_dmetro *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dmetro::time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dmetro::time",1,"sp_dmetro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dmetro,0))){
    SWIG_fail_ptr("sp_dmetro_time_get",1,SWIGTYPE_p_sp_dmetro);
  }
  
  result = (float) ((arg1)->time);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dmetro_counter_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dmetro *arg1 = (sp_dmetro *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_dmetro::counter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dmetro::counter",1,"sp_dmetro *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_dmetro::counter",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dmetro,0))){
    SWIG_fail_ptr("sp_dmetro_counter_set",1,SWIGTYPE_p_sp_dmetro);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_dmetro_counter_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->counter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dmetro_counter_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dmetro *arg1 = (sp_dmetro *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_dmetro::counter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dmetro::counter",1,"sp_dmetro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dmetro,0))){
    SWIG_fail_ptr("sp_dmetro_counter_get",1,SWIGTYPE_p_sp_dmetro);
  }
  
  result =  ((arg1)->counter);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_dmetro(lua_State* L) {
  int SWIG_arg = 0;
  sp_dmetro *result = 0 ;
  
  SWIG_check_num_args("sp_dmetro::sp_dmetro",0,0)
  result = (sp_dmetro *)new sp_dmetro();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_dmetro,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_dmetro(void *obj) {
sp_dmetro *arg1 = (sp_dmetro *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_dmetro(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_dmetro);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_dmetro_attributes[] = {
    { "time", _wrap_sp_dmetro_time_get, _wrap_sp_dmetro_time_set },
    { "counter", _wrap_sp_dmetro_counter_get, _wrap_sp_dmetro_counter_set },
    {0,0,0}
};
static swig_lua_method swig_sp_dmetro_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_dmetro_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_dmetro_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_dmetro_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_dmetro_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_dmetro_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_dmetro_Sf_SwigStatic = {
    "sp_dmetro",
    swig_sp_dmetro_Sf_SwigStatic_methods,
    swig_sp_dmetro_Sf_SwigStatic_attributes,
    swig_sp_dmetro_Sf_SwigStatic_constants,
    swig_sp_dmetro_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_dmetro_bases[] = {0};
static const char *swig_sp_dmetro_base_names[] = {0};
static swig_lua_class _wrap_class_sp_dmetro = { "sp_dmetro", "sp_dmetro", &SWIGTYPE_p_sp_dmetro,_proxy__wrap_new_sp_dmetro, swig_delete_sp_dmetro, swig_sp_dmetro_methods, swig_sp_dmetro_attributes, &swig_sp_dmetro_Sf_SwigStatic, swig_sp_dmetro_meta, swig_sp_dmetro_bases, swig_sp_dmetro_base_names };

static int _wrap_sp_dmetro_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_dmetro **arg1 = (sp_dmetro **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dmetro_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dmetro_create",1,"sp_dmetro **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_dmetro,0))){
    SWIG_fail_ptr("sp_dmetro_create",1,SWIGTYPE_p_p_sp_dmetro);
  }
  
  result = (int)sp_dmetro_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dmetro_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_dmetro **arg1 = (sp_dmetro **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dmetro_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dmetro_destroy",1,"sp_dmetro **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_dmetro,0))){
    SWIG_fail_ptr("sp_dmetro_destroy",1,SWIGTYPE_p_p_sp_dmetro);
  }
  
  result = (int)sp_dmetro_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dmetro_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_dmetro *arg2 = (sp_dmetro *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dmetro_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dmetro_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_dmetro_init",2,"sp_dmetro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_dmetro_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_dmetro,0))){
    SWIG_fail_ptr("sp_dmetro_init",2,SWIGTYPE_p_sp_dmetro);
  }
  
  result = (int)sp_dmetro_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dmetro_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_dmetro *arg2 = (sp_dmetro *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dmetro_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dmetro_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_dmetro_compute",2,"sp_dmetro *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_dmetro_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_dmetro_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_dmetro_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_dmetro,0))){
    SWIG_fail_ptr("sp_dmetro_compute",2,SWIGTYPE_p_sp_dmetro);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_dmetro_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_dmetro_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_dmetro_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::amp",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_amp_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::amp",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_amp_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_dettack_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::dettack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::dettack",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::dettack",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_dettack_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dettack = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_dettack_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::dettack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::dettack",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_dettack_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->dettack);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_num_tubes_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::num_tubes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::num_tubes",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::num_tubes",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_num_tubes_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->num_tubes = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_num_tubes_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::num_tubes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::num_tubes",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_num_tubes_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->num_tubes);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_damp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::damp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::damp",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::damp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_damp_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->damp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_damp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::damp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::damp",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_damp_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->damp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_shake_max_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::shake_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::shake_max",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::shake_max",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_shake_max_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->shake_max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_shake_max_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::shake_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::shake_max",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_shake_max_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->shake_max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::freq",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_freq_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::freq",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_freq_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_freq1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::freq1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::freq1",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::freq1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_freq1_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_freq1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::freq1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::freq1",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_freq1_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->freq1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_freq2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::freq2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::freq2",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::freq2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_freq2_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_freq2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::freq2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::freq2",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_freq2_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->freq2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_num_objectsSave_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::num_objectsSave",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::num_objectsSave",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::num_objectsSave",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_num_objectsSave_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->num_objectsSave = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_num_objectsSave_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::num_objectsSave",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::num_objectsSave",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_num_objectsSave_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->num_objectsSave);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_shake_maxSave_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::shake_maxSave",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::shake_maxSave",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::shake_maxSave",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_shake_maxSave_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->shake_maxSave = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_shake_maxSave_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::shake_maxSave",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::shake_maxSave",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_shake_maxSave_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->shake_maxSave);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_shakeEnergy_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::shakeEnergy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::shakeEnergy",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::shakeEnergy",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_shakeEnergy_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->shakeEnergy = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_shakeEnergy_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::shakeEnergy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::shakeEnergy",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_shakeEnergy_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->shakeEnergy);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_outputs00_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::outputs00",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::outputs00",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::outputs00",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_outputs00_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputs00 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_outputs00_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::outputs00",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::outputs00",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_outputs00_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->outputs00);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_outputs01_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::outputs01",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::outputs01",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::outputs01",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_outputs01_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputs01 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_outputs01_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::outputs01",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::outputs01",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_outputs01_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->outputs01);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_outputs10_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::outputs10",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::outputs10",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::outputs10",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_outputs10_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputs10 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_outputs10_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::outputs10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::outputs10",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_outputs10_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->outputs10);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_outputs11_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::outputs11",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::outputs11",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::outputs11",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_outputs11_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputs11 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_outputs11_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::outputs11",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::outputs11",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_outputs11_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->outputs11);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_outputs20_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::outputs20",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::outputs20",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::outputs20",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_outputs20_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputs20 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_outputs20_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::outputs20",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::outputs20",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_outputs20_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->outputs20);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_outputs21_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::outputs21",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::outputs21",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::outputs21",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_outputs21_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputs21 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_outputs21_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::outputs21",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::outputs21",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_outputs21_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->outputs21);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_coeffs00_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::coeffs00",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::coeffs00",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::coeffs00",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_coeffs00_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->coeffs00 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_coeffs00_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::coeffs00",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::coeffs00",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_coeffs00_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->coeffs00);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_coeffs01_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::coeffs01",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::coeffs01",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::coeffs01",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_coeffs01_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->coeffs01 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_coeffs01_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::coeffs01",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::coeffs01",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_coeffs01_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->coeffs01);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_coeffs10_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::coeffs10",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::coeffs10",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::coeffs10",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_coeffs10_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->coeffs10 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_coeffs10_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::coeffs10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::coeffs10",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_coeffs10_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->coeffs10);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_coeffs11_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::coeffs11",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::coeffs11",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::coeffs11",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_coeffs11_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->coeffs11 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_coeffs11_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::coeffs11",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::coeffs11",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_coeffs11_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->coeffs11);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_coeffs20_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::coeffs20",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::coeffs20",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::coeffs20",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_coeffs20_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->coeffs20 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_coeffs20_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::coeffs20",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::coeffs20",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_coeffs20_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->coeffs20);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_coeffs21_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::coeffs21",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::coeffs21",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::coeffs21",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_coeffs21_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->coeffs21 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_coeffs21_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::coeffs21",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::coeffs21",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_coeffs21_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->coeffs21);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_finalZ0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::finalZ0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::finalZ0",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::finalZ0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_finalZ0_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->finalZ0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_finalZ0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::finalZ0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::finalZ0",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_finalZ0_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->finalZ0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_finalZ1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::finalZ1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::finalZ1",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::finalZ1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_finalZ1_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->finalZ1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_finalZ1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::finalZ1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::finalZ1",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_finalZ1_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->finalZ1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_finalZ2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::finalZ2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::finalZ2",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::finalZ2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_finalZ2_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->finalZ2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_finalZ2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::finalZ2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::finalZ2",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_finalZ2_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->finalZ2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_sndLevel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::sndLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::sndLevel",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::sndLevel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_sndLevel_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sndLevel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_sndLevel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::sndLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::sndLevel",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_sndLevel_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->sndLevel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_gains0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::gains0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::gains0",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::gains0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_gains0_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->gains0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_gains0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::gains0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::gains0",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_gains0_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->gains0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_gains1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::gains1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::gains1",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::gains1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_gains1_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->gains1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_gains1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::gains1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::gains1",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_gains1_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->gains1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_gains2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::gains2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::gains2",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::gains2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_gains2_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->gains2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_gains2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::gains2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::gains2",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_gains2_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->gains2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_center_freqs0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::center_freqs0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::center_freqs0",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::center_freqs0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_center_freqs0_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->center_freqs0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_center_freqs0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::center_freqs0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::center_freqs0",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_center_freqs0_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->center_freqs0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_center_freqs1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::center_freqs1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::center_freqs1",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::center_freqs1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_center_freqs1_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->center_freqs1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_center_freqs1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::center_freqs1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::center_freqs1",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_center_freqs1_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->center_freqs1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_center_freqs2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::center_freqs2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::center_freqs2",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::center_freqs2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_center_freqs2_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->center_freqs2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_center_freqs2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::center_freqs2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::center_freqs2",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_center_freqs2_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->center_freqs2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_soundDecay_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::soundDecay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::soundDecay",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::soundDecay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_soundDecay_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->soundDecay = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_soundDecay_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::soundDecay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::soundDecay",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_soundDecay_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->soundDecay);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_systemDecay_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::systemDecay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::systemDecay",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::systemDecay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_systemDecay_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->systemDecay = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_systemDecay_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::systemDecay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::systemDecay",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_systemDecay_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->systemDecay);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_num_objects_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::num_objects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::num_objects",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::num_objects",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_num_objects_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->num_objects = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_num_objects_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::num_objects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::num_objects",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_num_objects_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->num_objects);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_totalEnergy_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::totalEnergy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::totalEnergy",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::totalEnergy",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_totalEnergy_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->totalEnergy = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_totalEnergy_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::totalEnergy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::totalEnergy",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_totalEnergy_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->totalEnergy);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_decayScale_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::decayScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::decayScale",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::decayScale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_decayScale_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->decayScale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_decayScale_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::decayScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::decayScale",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_decayScale_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->decayScale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_res_freq0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::res_freq0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::res_freq0",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::res_freq0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_res_freq0_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->res_freq0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_res_freq0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::res_freq0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::res_freq0",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_res_freq0_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->res_freq0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_res_freq1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::res_freq1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::res_freq1",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::res_freq1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_res_freq1_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->res_freq1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_res_freq1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::res_freq1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::res_freq1",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_res_freq1_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->res_freq1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_res_freq2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::res_freq2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::res_freq2",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::res_freq2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_res_freq2_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->res_freq2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_res_freq2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::res_freq2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::res_freq2",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_res_freq2_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->res_freq2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_shake_damp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_drip::shake_damp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::shake_damp",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::shake_damp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_shake_damp_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->shake_damp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_shake_damp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_drip::shake_damp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::shake_damp",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_shake_damp_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (float) ((arg1)->shake_damp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_kloop_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_drip::kloop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::kloop",1,"sp_drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_drip::kloop",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_kloop_set",1,SWIGTYPE_p_sp_drip);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->kloop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_kloop_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *arg1 = (sp_drip *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_drip::kloop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip::kloop",1,"sp_drip *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_kloop_get",1,SWIGTYPE_p_sp_drip);
  }
  
  result = (int) ((arg1)->kloop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_drip(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip *result = 0 ;
  
  SWIG_check_num_args("sp_drip::sp_drip",0,0)
  result = (sp_drip *)new sp_drip();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_drip,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_drip(void *obj) {
sp_drip *arg1 = (sp_drip *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_drip(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_drip);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_drip_attributes[] = {
    { "amp", _wrap_sp_drip_amp_get, _wrap_sp_drip_amp_set },
    { "dettack", _wrap_sp_drip_dettack_get, _wrap_sp_drip_dettack_set },
    { "num_tubes", _wrap_sp_drip_num_tubes_get, _wrap_sp_drip_num_tubes_set },
    { "damp", _wrap_sp_drip_damp_get, _wrap_sp_drip_damp_set },
    { "shake_max", _wrap_sp_drip_shake_max_get, _wrap_sp_drip_shake_max_set },
    { "freq", _wrap_sp_drip_freq_get, _wrap_sp_drip_freq_set },
    { "freq1", _wrap_sp_drip_freq1_get, _wrap_sp_drip_freq1_set },
    { "freq2", _wrap_sp_drip_freq2_get, _wrap_sp_drip_freq2_set },
    { "num_objectsSave", _wrap_sp_drip_num_objectsSave_get, _wrap_sp_drip_num_objectsSave_set },
    { "shake_maxSave", _wrap_sp_drip_shake_maxSave_get, _wrap_sp_drip_shake_maxSave_set },
    { "shakeEnergy", _wrap_sp_drip_shakeEnergy_get, _wrap_sp_drip_shakeEnergy_set },
    { "outputs00", _wrap_sp_drip_outputs00_get, _wrap_sp_drip_outputs00_set },
    { "outputs01", _wrap_sp_drip_outputs01_get, _wrap_sp_drip_outputs01_set },
    { "outputs10", _wrap_sp_drip_outputs10_get, _wrap_sp_drip_outputs10_set },
    { "outputs11", _wrap_sp_drip_outputs11_get, _wrap_sp_drip_outputs11_set },
    { "outputs20", _wrap_sp_drip_outputs20_get, _wrap_sp_drip_outputs20_set },
    { "outputs21", _wrap_sp_drip_outputs21_get, _wrap_sp_drip_outputs21_set },
    { "coeffs00", _wrap_sp_drip_coeffs00_get, _wrap_sp_drip_coeffs00_set },
    { "coeffs01", _wrap_sp_drip_coeffs01_get, _wrap_sp_drip_coeffs01_set },
    { "coeffs10", _wrap_sp_drip_coeffs10_get, _wrap_sp_drip_coeffs10_set },
    { "coeffs11", _wrap_sp_drip_coeffs11_get, _wrap_sp_drip_coeffs11_set },
    { "coeffs20", _wrap_sp_drip_coeffs20_get, _wrap_sp_drip_coeffs20_set },
    { "coeffs21", _wrap_sp_drip_coeffs21_get, _wrap_sp_drip_coeffs21_set },
    { "finalZ0", _wrap_sp_drip_finalZ0_get, _wrap_sp_drip_finalZ0_set },
    { "finalZ1", _wrap_sp_drip_finalZ1_get, _wrap_sp_drip_finalZ1_set },
    { "finalZ2", _wrap_sp_drip_finalZ2_get, _wrap_sp_drip_finalZ2_set },
    { "sndLevel", _wrap_sp_drip_sndLevel_get, _wrap_sp_drip_sndLevel_set },
    { "gains0", _wrap_sp_drip_gains0_get, _wrap_sp_drip_gains0_set },
    { "gains1", _wrap_sp_drip_gains1_get, _wrap_sp_drip_gains1_set },
    { "gains2", _wrap_sp_drip_gains2_get, _wrap_sp_drip_gains2_set },
    { "center_freqs0", _wrap_sp_drip_center_freqs0_get, _wrap_sp_drip_center_freqs0_set },
    { "center_freqs1", _wrap_sp_drip_center_freqs1_get, _wrap_sp_drip_center_freqs1_set },
    { "center_freqs2", _wrap_sp_drip_center_freqs2_get, _wrap_sp_drip_center_freqs2_set },
    { "soundDecay", _wrap_sp_drip_soundDecay_get, _wrap_sp_drip_soundDecay_set },
    { "systemDecay", _wrap_sp_drip_systemDecay_get, _wrap_sp_drip_systemDecay_set },
    { "num_objects", _wrap_sp_drip_num_objects_get, _wrap_sp_drip_num_objects_set },
    { "totalEnergy", _wrap_sp_drip_totalEnergy_get, _wrap_sp_drip_totalEnergy_set },
    { "decayScale", _wrap_sp_drip_decayScale_get, _wrap_sp_drip_decayScale_set },
    { "res_freq0", _wrap_sp_drip_res_freq0_get, _wrap_sp_drip_res_freq0_set },
    { "res_freq1", _wrap_sp_drip_res_freq1_get, _wrap_sp_drip_res_freq1_set },
    { "res_freq2", _wrap_sp_drip_res_freq2_get, _wrap_sp_drip_res_freq2_set },
    { "shake_damp", _wrap_sp_drip_shake_damp_get, _wrap_sp_drip_shake_damp_set },
    { "kloop", _wrap_sp_drip_kloop_get, _wrap_sp_drip_kloop_set },
    {0,0,0}
};
static swig_lua_method swig_sp_drip_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_drip_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_drip_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_drip_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_drip_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_drip_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_drip_SwigStatic = {
    "sp_drip",
    swig_sp_drip_SwigStatic_methods,
    swig_sp_drip_SwigStatic_attributes,
    swig_sp_drip_SwigStatic_constants,
    swig_sp_drip_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_drip_bases[] = {0};
static const char *swig_sp_drip_base_names[] = {0};
static swig_lua_class _wrap_class_sp_drip = { "sp_drip", "sp_drip", &SWIGTYPE_p_sp_drip,_proxy__wrap_new_sp_drip, swig_delete_sp_drip, swig_sp_drip_methods, swig_sp_drip_attributes, &swig_sp_drip_SwigStatic, swig_sp_drip_meta, swig_sp_drip_bases, swig_sp_drip_base_names };

static int _wrap_sp_drip_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip **arg1 = (sp_drip **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_drip_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip_create",1,"sp_drip **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_create",1,SWIGTYPE_p_p_sp_drip);
  }
  
  result = (int)sp_drip_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_drip **arg1 = (sp_drip **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_drip_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip_destroy",1,"sp_drip **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_destroy",1,SWIGTYPE_p_p_sp_drip);
  }
  
  result = (int)sp_drip_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_drip *arg2 = (sp_drip *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("sp_drip_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_drip_init",2,"sp_drip *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_drip_init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_drip_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_init",2,SWIGTYPE_p_sp_drip);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)sp_drip_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_drip_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_drip *arg2 = (sp_drip *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_drip_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_drip_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_drip_compute",2,"sp_drip *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_drip_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_drip_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_drip_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_drip,0))){
    SWIG_fail_ptr("sp_drip_compute",2,SWIGTYPE_p_sp_drip);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_drip_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_drip_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_drip_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_ft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *arg1 = (sp_dtrig *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_dtrig::ft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig::ft",1,"sp_dtrig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_dtrig::ft",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_ft_set",1,SWIGTYPE_p_sp_dtrig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_dtrig_ft_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_ft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *arg1 = (sp_dtrig *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_dtrig::ft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig::ft",1,"sp_dtrig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_ft_get",1,SWIGTYPE_p_sp_dtrig);
  }
  
  result = (sp_ftbl *) ((arg1)->ft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_counter_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *arg1 = (sp_dtrig *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_dtrig::counter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig::counter",1,"sp_dtrig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_dtrig::counter",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_counter_set",1,SWIGTYPE_p_sp_dtrig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_dtrig_counter_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->counter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_counter_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *arg1 = (sp_dtrig *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_dtrig::counter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig::counter",1,"sp_dtrig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_counter_get",1,SWIGTYPE_p_sp_dtrig);
  }
  
  result =  ((arg1)->counter);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *arg1 = (sp_dtrig *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_dtrig::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig::pos",1,"sp_dtrig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_dtrig::pos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_pos_set",1,SWIGTYPE_p_sp_dtrig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_dtrig_pos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *arg1 = (sp_dtrig *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_dtrig::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig::pos",1,"sp_dtrig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_pos_get",1,SWIGTYPE_p_sp_dtrig);
  }
  
  result =  ((arg1)->pos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_running_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *arg1 = (sp_dtrig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_dtrig::running",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig::running",1,"sp_dtrig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dtrig::running",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_running_set",1,SWIGTYPE_p_sp_dtrig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->running = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_running_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *arg1 = (sp_dtrig *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dtrig::running",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig::running",1,"sp_dtrig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_running_get",1,SWIGTYPE_p_sp_dtrig);
  }
  
  result = (int) ((arg1)->running);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_loop_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *arg1 = (sp_dtrig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_dtrig::loop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig::loop",1,"sp_dtrig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dtrig::loop",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_loop_set",1,SWIGTYPE_p_sp_dtrig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->loop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_loop_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *arg1 = (sp_dtrig *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dtrig::loop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig::loop",1,"sp_dtrig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_loop_get",1,SWIGTYPE_p_sp_dtrig);
  }
  
  result = (int) ((arg1)->loop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_delay_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *arg1 = (sp_dtrig *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dtrig::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig::delay",1,"sp_dtrig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dtrig::delay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_delay_set",1,SWIGTYPE_p_sp_dtrig);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->delay = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_delay_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *arg1 = (sp_dtrig *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dtrig::delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig::delay",1,"sp_dtrig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_delay_get",1,SWIGTYPE_p_sp_dtrig);
  }
  
  result = (float) ((arg1)->delay);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_scale_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *arg1 = (sp_dtrig *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dtrig::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig::scale",1,"sp_dtrig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dtrig::scale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_scale_set",1,SWIGTYPE_p_sp_dtrig);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->scale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_scale_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *arg1 = (sp_dtrig *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dtrig::scale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig::scale",1,"sp_dtrig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_scale_get",1,SWIGTYPE_p_sp_dtrig);
  }
  
  result = (float) ((arg1)->scale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_dtrig(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig *result = 0 ;
  
  SWIG_check_num_args("sp_dtrig::sp_dtrig",0,0)
  result = (sp_dtrig *)new sp_dtrig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_dtrig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_dtrig(void *obj) {
sp_dtrig *arg1 = (sp_dtrig *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_dtrig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_dtrig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_dtrig_attributes[] = {
    { "ft", _wrap_sp_dtrig_ft_get, _wrap_sp_dtrig_ft_set },
    { "counter", _wrap_sp_dtrig_counter_get, _wrap_sp_dtrig_counter_set },
    { "pos", _wrap_sp_dtrig_pos_get, _wrap_sp_dtrig_pos_set },
    { "running", _wrap_sp_dtrig_running_get, _wrap_sp_dtrig_running_set },
    { "loop", _wrap_sp_dtrig_loop_get, _wrap_sp_dtrig_loop_set },
    { "delay", _wrap_sp_dtrig_delay_get, _wrap_sp_dtrig_delay_set },
    { "scale", _wrap_sp_dtrig_scale_get, _wrap_sp_dtrig_scale_set },
    {0,0,0}
};
static swig_lua_method swig_sp_dtrig_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_dtrig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_dtrig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_dtrig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_dtrig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_dtrig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_dtrig_Sf_SwigStatic = {
    "sp_dtrig",
    swig_sp_dtrig_Sf_SwigStatic_methods,
    swig_sp_dtrig_Sf_SwigStatic_attributes,
    swig_sp_dtrig_Sf_SwigStatic_constants,
    swig_sp_dtrig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_dtrig_bases[] = {0};
static const char *swig_sp_dtrig_base_names[] = {0};
static swig_lua_class _wrap_class_sp_dtrig = { "sp_dtrig", "sp_dtrig", &SWIGTYPE_p_sp_dtrig,_proxy__wrap_new_sp_dtrig, swig_delete_sp_dtrig, swig_sp_dtrig_methods, swig_sp_dtrig_attributes, &swig_sp_dtrig_Sf_SwigStatic, swig_sp_dtrig_meta, swig_sp_dtrig_bases, swig_sp_dtrig_base_names };

static int _wrap_sp_dtrig_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig **arg1 = (sp_dtrig **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dtrig_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig_create",1,"sp_dtrig **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_create",1,SWIGTYPE_p_p_sp_dtrig);
  }
  
  result = (int)sp_dtrig_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_dtrig **arg1 = (sp_dtrig **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dtrig_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig_destroy",1,"sp_dtrig **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_destroy",1,SWIGTYPE_p_p_sp_dtrig);
  }
  
  result = (int)sp_dtrig_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_dtrig *arg2 = (sp_dtrig *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dtrig_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_dtrig_init",2,"sp_dtrig *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_dtrig_init",3,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_dtrig_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_init",2,SWIGTYPE_p_sp_dtrig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_dtrig_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  result = (int)sp_dtrig_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dtrig_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_dtrig *arg2 = (sp_dtrig *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dtrig_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dtrig_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_dtrig_compute",2,"sp_dtrig *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_dtrig_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_dtrig_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_dtrig_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_dtrig,0))){
    SWIG_fail_ptr("sp_dtrig_compute",2,SWIGTYPE_p_sp_dtrig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_dtrig_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_dtrig_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_dtrig_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dust::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::amp",1,"sp_dust *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dust::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_amp_set",1,SWIGTYPE_p_sp_dust);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dust::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::amp",1,"sp_dust *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_amp_get",1,SWIGTYPE_p_sp_dust);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_density_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dust::density",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::density",1,"sp_dust *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dust::density",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_density_set",1,SWIGTYPE_p_sp_dust);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->density = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_density_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dust::density",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::density",1,"sp_dust *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_density_get",1,SWIGTYPE_p_sp_dust);
  }
  
  result = (float) ((arg1)->density);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_density0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dust::density0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::density0",1,"sp_dust *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dust::density0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_density0_set",1,SWIGTYPE_p_sp_dust);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->density0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_density0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dust::density0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::density0",1,"sp_dust *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_density0_get",1,SWIGTYPE_p_sp_dust);
  }
  
  result = (float) ((arg1)->density0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_thresh_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dust::thresh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::thresh",1,"sp_dust *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dust::thresh",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_thresh_set",1,SWIGTYPE_p_sp_dust);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->thresh = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_thresh_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dust::thresh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::thresh",1,"sp_dust *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_thresh_get",1,SWIGTYPE_p_sp_dust);
  }
  
  result = (float) ((arg1)->thresh);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_scale_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dust::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::scale",1,"sp_dust *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dust::scale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_scale_set",1,SWIGTYPE_p_sp_dust);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->scale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_scale_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dust::scale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::scale",1,"sp_dust *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_scale_get",1,SWIGTYPE_p_sp_dust);
  }
  
  result = (float) ((arg1)->scale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_onedsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_dust::onedsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::onedsr",1,"sp_dust *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dust::onedsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_onedsr_set",1,SWIGTYPE_p_sp_dust);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->onedsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_onedsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_dust::onedsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::onedsr",1,"sp_dust *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_onedsr_get",1,SWIGTYPE_p_sp_dust);
  }
  
  result = (float) ((arg1)->onedsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_bipolar_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_dust::bipolar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::bipolar",1,"sp_dust *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_dust::bipolar",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_bipolar_set",1,SWIGTYPE_p_sp_dust);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->bipolar = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_bipolar_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dust::bipolar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::bipolar",1,"sp_dust *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_bipolar_get",1,SWIGTYPE_p_sp_dust);
  }
  
  result = (int) ((arg1)->bipolar);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_rand_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_dust::rand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::rand",1,"sp_dust *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_dust::rand",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_rand_set",1,SWIGTYPE_p_sp_dust);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_dust_rand_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->rand = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_rand_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *arg1 = (sp_dust *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_dust::rand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust::rand",1,"sp_dust *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_rand_get",1,SWIGTYPE_p_sp_dust);
  }
  
  result =  ((arg1)->rand);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_dust(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust *result = 0 ;
  
  SWIG_check_num_args("sp_dust::sp_dust",0,0)
  result = (sp_dust *)new sp_dust();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_dust,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_dust(void *obj) {
sp_dust *arg1 = (sp_dust *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_dust(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_dust);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_dust_attributes[] = {
    { "amp", _wrap_sp_dust_amp_get, _wrap_sp_dust_amp_set },
    { "density", _wrap_sp_dust_density_get, _wrap_sp_dust_density_set },
    { "density0", _wrap_sp_dust_density0_get, _wrap_sp_dust_density0_set },
    { "thresh", _wrap_sp_dust_thresh_get, _wrap_sp_dust_thresh_set },
    { "scale", _wrap_sp_dust_scale_get, _wrap_sp_dust_scale_set },
    { "onedsr", _wrap_sp_dust_onedsr_get, _wrap_sp_dust_onedsr_set },
    { "bipolar", _wrap_sp_dust_bipolar_get, _wrap_sp_dust_bipolar_set },
    { "rand", _wrap_sp_dust_rand_get, _wrap_sp_dust_rand_set },
    {0,0,0}
};
static swig_lua_method swig_sp_dust_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_dust_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_dust_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_dust_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_dust_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_dust_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_dust_Sf_SwigStatic = {
    "sp_dust",
    swig_sp_dust_Sf_SwigStatic_methods,
    swig_sp_dust_Sf_SwigStatic_attributes,
    swig_sp_dust_Sf_SwigStatic_constants,
    swig_sp_dust_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_dust_bases[] = {0};
static const char *swig_sp_dust_base_names[] = {0};
static swig_lua_class _wrap_class_sp_dust = { "sp_dust", "sp_dust", &SWIGTYPE_p_sp_dust,_proxy__wrap_new_sp_dust, swig_delete_sp_dust, swig_sp_dust_methods, swig_sp_dust_attributes, &swig_sp_dust_Sf_SwigStatic, swig_sp_dust_meta, swig_sp_dust_bases, swig_sp_dust_base_names };

static int _wrap_sp_dust_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust **arg1 = (sp_dust **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dust_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust_create",1,"sp_dust **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_create",1,SWIGTYPE_p_p_sp_dust);
  }
  
  result = (int)sp_dust_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_dust **arg1 = (sp_dust **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dust_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust_destroy",1,"sp_dust **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_destroy",1,SWIGTYPE_p_p_sp_dust);
  }
  
  result = (int)sp_dust_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_dust *arg2 = (sp_dust *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dust_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_dust_init",2,"sp_dust *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_dust_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_init",2,SWIGTYPE_p_sp_dust);
  }
  
  result = (int)sp_dust_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_dust_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_dust *arg2 = (sp_dust *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_dust_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_dust_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_dust_compute",2,"sp_dust *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_dust_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_dust_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_dust_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_dust,0))){
    SWIG_fail_ptr("sp_dust_compute",2,SWIGTYPE_p_sp_dust);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_dust_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_dust_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_dust_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_eqfil::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::freq",1,"sp_eqfil *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_eqfil::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_freq_set",1,SWIGTYPE_p_sp_eqfil);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_eqfil::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::freq",1,"sp_eqfil *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_freq_get",1,SWIGTYPE_p_sp_eqfil);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_eqfil::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::bw",1,"sp_eqfil *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_eqfil::bw",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_bw_set",1,SWIGTYPE_p_sp_eqfil);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_eqfil::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::bw",1,"sp_eqfil *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_bw_get",1,SWIGTYPE_p_sp_eqfil);
  }
  
  result = (float) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_gain_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_eqfil::gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::gain",1,"sp_eqfil *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_eqfil::gain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_gain_set",1,SWIGTYPE_p_sp_eqfil);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->gain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_gain_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_eqfil::gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::gain",1,"sp_eqfil *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_gain_get",1,SWIGTYPE_p_sp_eqfil);
  }
  
  result = (float) ((arg1)->gain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_z1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_eqfil::z1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::z1",1,"sp_eqfil *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_eqfil::z1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_z1_set",1,SWIGTYPE_p_sp_eqfil);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_z1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_eqfil::z1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::z1",1,"sp_eqfil *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_z1_get",1,SWIGTYPE_p_sp_eqfil);
  }
  
  result = (float) ((arg1)->z1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_z2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_eqfil::z2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::z2",1,"sp_eqfil *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_eqfil::z2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_z2_set",1,SWIGTYPE_p_sp_eqfil);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_z2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_eqfil::z2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::z2",1,"sp_eqfil *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_z2_get",1,SWIGTYPE_p_sp_eqfil);
  }
  
  result = (float) ((arg1)->z2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_eqfil::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::sr",1,"sp_eqfil *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_eqfil::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_sr_set",1,SWIGTYPE_p_sp_eqfil);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_eqfil::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::sr",1,"sp_eqfil *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_sr_get",1,SWIGTYPE_p_sp_eqfil);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_frv_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_eqfil::frv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::frv",1,"sp_eqfil *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_eqfil::frv",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_frv_set",1,SWIGTYPE_p_sp_eqfil);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->frv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_frv_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_eqfil::frv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::frv",1,"sp_eqfil *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_frv_get",1,SWIGTYPE_p_sp_eqfil);
  }
  
  result = (float) ((arg1)->frv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_bwv_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_eqfil::bwv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::bwv",1,"sp_eqfil *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_eqfil::bwv",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_bwv_set",1,SWIGTYPE_p_sp_eqfil);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->bwv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_bwv_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_eqfil::bwv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::bwv",1,"sp_eqfil *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_bwv_get",1,SWIGTYPE_p_sp_eqfil);
  }
  
  result = (float) ((arg1)->bwv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_c_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_eqfil::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::c",1,"sp_eqfil *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_eqfil::c",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_c_set",1,SWIGTYPE_p_sp_eqfil);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_c_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_eqfil::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::c",1,"sp_eqfil *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_c_get",1,SWIGTYPE_p_sp_eqfil);
  }
  
  result = (float) ((arg1)->c);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_d_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_eqfil::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::d",1,"sp_eqfil *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_eqfil::d",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_d_set",1,SWIGTYPE_p_sp_eqfil);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_d_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *arg1 = (sp_eqfil *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_eqfil::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil::d",1,"sp_eqfil *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_d_get",1,SWIGTYPE_p_sp_eqfil);
  }
  
  result = (float) ((arg1)->d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_eqfil(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil *result = 0 ;
  
  SWIG_check_num_args("sp_eqfil::sp_eqfil",0,0)
  result = (sp_eqfil *)new sp_eqfil();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_eqfil,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_eqfil(void *obj) {
sp_eqfil *arg1 = (sp_eqfil *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_eqfil(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_eqfil);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_eqfil_attributes[] = {
    { "freq", _wrap_sp_eqfil_freq_get, _wrap_sp_eqfil_freq_set },
    { "bw", _wrap_sp_eqfil_bw_get, _wrap_sp_eqfil_bw_set },
    { "gain", _wrap_sp_eqfil_gain_get, _wrap_sp_eqfil_gain_set },
    { "z1", _wrap_sp_eqfil_z1_get, _wrap_sp_eqfil_z1_set },
    { "z2", _wrap_sp_eqfil_z2_get, _wrap_sp_eqfil_z2_set },
    { "sr", _wrap_sp_eqfil_sr_get, _wrap_sp_eqfil_sr_set },
    { "frv", _wrap_sp_eqfil_frv_get, _wrap_sp_eqfil_frv_set },
    { "bwv", _wrap_sp_eqfil_bwv_get, _wrap_sp_eqfil_bwv_set },
    { "c", _wrap_sp_eqfil_c_get, _wrap_sp_eqfil_c_set },
    { "d", _wrap_sp_eqfil_d_get, _wrap_sp_eqfil_d_set },
    {0,0,0}
};
static swig_lua_method swig_sp_eqfil_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_eqfil_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_eqfil_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_eqfil_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_eqfil_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_eqfil_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_eqfil_Sf_SwigStatic = {
    "sp_eqfil",
    swig_sp_eqfil_Sf_SwigStatic_methods,
    swig_sp_eqfil_Sf_SwigStatic_attributes,
    swig_sp_eqfil_Sf_SwigStatic_constants,
    swig_sp_eqfil_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_eqfil_bases[] = {0};
static const char *swig_sp_eqfil_base_names[] = {0};
static swig_lua_class _wrap_class_sp_eqfil = { "sp_eqfil", "sp_eqfil", &SWIGTYPE_p_sp_eqfil,_proxy__wrap_new_sp_eqfil, swig_delete_sp_eqfil, swig_sp_eqfil_methods, swig_sp_eqfil_attributes, &swig_sp_eqfil_Sf_SwigStatic, swig_sp_eqfil_meta, swig_sp_eqfil_bases, swig_sp_eqfil_base_names };

static int _wrap_sp_eqfil_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil **arg1 = (sp_eqfil **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_eqfil_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil_create",1,"sp_eqfil **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_create",1,SWIGTYPE_p_p_sp_eqfil);
  }
  
  result = (int)sp_eqfil_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_eqfil **arg1 = (sp_eqfil **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_eqfil_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil_destroy",1,"sp_eqfil **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_destroy",1,SWIGTYPE_p_p_sp_eqfil);
  }
  
  result = (int)sp_eqfil_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_eqfil *arg2 = (sp_eqfil *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_eqfil_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_eqfil_init",2,"sp_eqfil *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_eqfil_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_init",2,SWIGTYPE_p_sp_eqfil);
  }
  
  result = (int)sp_eqfil_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_eqfil_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_eqfil *arg2 = (sp_eqfil *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_eqfil_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_eqfil_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_eqfil_compute",2,"sp_eqfil *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_eqfil_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_eqfil_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_eqfil_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_eqfil,0))){
    SWIG_fail_ptr("sp_eqfil_compute",2,SWIGTYPE_p_sp_eqfil);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_eqfil_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_eqfil_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_eqfil_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_a_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_expon::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::a",1,"sp_expon *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_expon::a",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_a_set",1,SWIGTYPE_p_sp_expon);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_a_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_expon::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::a",1,"sp_expon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_a_get",1,SWIGTYPE_p_sp_expon);
  }
  
  result = (float) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_dur_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_expon::dur",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::dur",1,"sp_expon *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_expon::dur",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_dur_set",1,SWIGTYPE_p_sp_expon);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dur = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_dur_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_expon::dur",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::dur",1,"sp_expon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_dur_get",1,SWIGTYPE_p_sp_expon);
  }
  
  result = (float) ((arg1)->dur);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_b_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_expon::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::b",1,"sp_expon *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_expon::b",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_b_set",1,SWIGTYPE_p_sp_expon);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_b_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_expon::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::b",1,"sp_expon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_b_get",1,SWIGTYPE_p_sp_expon);
  }
  
  result = (float) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_val_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_expon::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::val",1,"sp_expon *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_expon::val",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_val_set",1,SWIGTYPE_p_sp_expon);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_val_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_expon::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::val",1,"sp_expon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_val_get",1,SWIGTYPE_p_sp_expon);
  }
  
  result = (float) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_incr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_expon::incr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::incr",1,"sp_expon *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_expon::incr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_incr_set",1,SWIGTYPE_p_sp_expon);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->incr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_incr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_expon::incr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::incr",1,"sp_expon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_incr_get",1,SWIGTYPE_p_sp_expon);
  }
  
  result = (float) ((arg1)->incr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_sdur_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_expon::sdur",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::sdur",1,"sp_expon *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_expon::sdur",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_sdur_set",1,SWIGTYPE_p_sp_expon);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_expon_sdur_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->sdur = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_sdur_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_expon::sdur",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::sdur",1,"sp_expon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_sdur_get",1,SWIGTYPE_p_sp_expon);
  }
  
  result =  ((arg1)->sdur);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_stime_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_expon::stime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::stime",1,"sp_expon *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_expon::stime",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_stime_set",1,SWIGTYPE_p_sp_expon);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_expon_stime_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->stime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_stime_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_expon::stime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::stime",1,"sp_expon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_stime_get",1,SWIGTYPE_p_sp_expon);
  }
  
  result =  ((arg1)->stime);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_init_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_expon::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::init",1,"sp_expon *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_expon::init",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_init_set",1,SWIGTYPE_p_sp_expon);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->init = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_init_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *arg1 = (sp_expon *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_expon::init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon::init",1,"sp_expon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_init_get",1,SWIGTYPE_p_sp_expon);
  }
  
  result = (int) ((arg1)->init);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_expon(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon *result = 0 ;
  
  SWIG_check_num_args("sp_expon::sp_expon",0,0)
  result = (sp_expon *)new sp_expon();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_expon,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_expon(void *obj) {
sp_expon *arg1 = (sp_expon *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_expon(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_expon);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_expon_attributes[] = {
    { "a", _wrap_sp_expon_a_get, _wrap_sp_expon_a_set },
    { "dur", _wrap_sp_expon_dur_get, _wrap_sp_expon_dur_set },
    { "b", _wrap_sp_expon_b_get, _wrap_sp_expon_b_set },
    { "val", _wrap_sp_expon_val_get, _wrap_sp_expon_val_set },
    { "incr", _wrap_sp_expon_incr_get, _wrap_sp_expon_incr_set },
    { "sdur", _wrap_sp_expon_sdur_get, _wrap_sp_expon_sdur_set },
    { "stime", _wrap_sp_expon_stime_get, _wrap_sp_expon_stime_set },
    { "init", _wrap_sp_expon_init_get, _wrap_sp_expon_init_set },
    {0,0,0}
};
static swig_lua_method swig_sp_expon_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_expon_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_expon_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_expon_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_expon_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_expon_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_expon_Sf_SwigStatic = {
    "sp_expon",
    swig_sp_expon_Sf_SwigStatic_methods,
    swig_sp_expon_Sf_SwigStatic_attributes,
    swig_sp_expon_Sf_SwigStatic_constants,
    swig_sp_expon_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_expon_bases[] = {0};
static const char *swig_sp_expon_base_names[] = {0};
static swig_lua_class _wrap_class_sp_expon = { "sp_expon", "sp_expon", &SWIGTYPE_p_sp_expon,_proxy__wrap_new_sp_expon, swig_delete_sp_expon, swig_sp_expon_methods, swig_sp_expon_attributes, &swig_sp_expon_Sf_SwigStatic, swig_sp_expon_meta, swig_sp_expon_bases, swig_sp_expon_base_names };

static int _wrap_sp_expon_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon **arg1 = (sp_expon **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_expon_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon_create",1,"sp_expon **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_create",1,SWIGTYPE_p_p_sp_expon);
  }
  
  result = (int)sp_expon_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_expon **arg1 = (sp_expon **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_expon_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon_destroy",1,"sp_expon **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_destroy",1,SWIGTYPE_p_p_sp_expon);
  }
  
  result = (int)sp_expon_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_expon *arg2 = (sp_expon *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_expon_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_expon_init",2,"sp_expon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_expon_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_init",2,SWIGTYPE_p_sp_expon);
  }
  
  result = (int)sp_expon_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_expon_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_expon *arg2 = (sp_expon *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_expon_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_expon_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_expon_compute",2,"sp_expon *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_expon_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_expon_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_expon_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_expon,0))){
    SWIG_fail_ptr("sp_expon_compute",2,SWIGTYPE_p_sp_expon);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_expon_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_expon_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_expon_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_nxtact_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  sp_fof_overlap *arg2 = (sp_fof_overlap *) 0 ;
  
  SWIG_check_num_args("sp_fof_overlap::nxtact",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::nxtact",1,"sp_fof_overlap *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fof_overlap::nxtact",2,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_nxtact_set",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fof_overlap,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_fof_overlap_nxtact_set",2,SWIGTYPE_p_sp_fof_overlap);
  }
  
  if (arg1) (arg1)->nxtact = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_nxtact_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  sp_fof_overlap *result = 0 ;
  
  SWIG_check_num_args("sp_fof_overlap::nxtact",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::nxtact",1,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_nxtact_get",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  result = (sp_fof_overlap *) ((arg1)->nxtact);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fof_overlap,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_nxtfree_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  sp_fof_overlap *arg2 = (sp_fof_overlap *) 0 ;
  
  SWIG_check_num_args("sp_fof_overlap::nxtfree",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::nxtfree",1,"sp_fof_overlap *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fof_overlap::nxtfree",2,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_nxtfree_set",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fof_overlap,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_fof_overlap_nxtfree_set",2,SWIGTYPE_p_sp_fof_overlap);
  }
  
  if (arg1) (arg1)->nxtfree = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_nxtfree_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  sp_fof_overlap *result = 0 ;
  
  SWIG_check_num_args("sp_fof_overlap::nxtfree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::nxtfree",1,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_nxtfree_get",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  result = (sp_fof_overlap *) ((arg1)->nxtfree);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fof_overlap,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_timrem_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fof_overlap::timrem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::timrem",1,"sp_fof_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof_overlap::timrem",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_timrem_set",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fof_overlap_timrem_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->timrem = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_timrem_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fof_overlap::timrem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::timrem",1,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_timrem_get",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  result =  ((arg1)->timrem);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_dectim_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fof_overlap::dectim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::dectim",1,"sp_fof_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof_overlap::dectim",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_dectim_set",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fof_overlap_dectim_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->dectim = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_dectim_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fof_overlap::dectim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::dectim",1,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_dectim_get",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  result =  ((arg1)->dectim);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_formphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fof_overlap::formphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::formphs",1,"sp_fof_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof_overlap::formphs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_formphs_set",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fof_overlap_formphs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->formphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_formphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fof_overlap::formphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::formphs",1,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_formphs_get",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  result =  ((arg1)->formphs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_forminc_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fof_overlap::forminc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::forminc",1,"sp_fof_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof_overlap::forminc",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_forminc_set",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fof_overlap_forminc_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->forminc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_forminc_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fof_overlap::forminc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::forminc",1,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_forminc_get",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  result =  ((arg1)->forminc);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_risphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fof_overlap::risphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::risphs",1,"sp_fof_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof_overlap::risphs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_risphs_set",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fof_overlap_risphs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->risphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_risphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fof_overlap::risphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::risphs",1,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_risphs_get",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  result =  ((arg1)->risphs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_risinc_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fof_overlap::risinc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::risinc",1,"sp_fof_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof_overlap::risinc",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_risinc_set",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fof_overlap_risinc_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->risinc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_risinc_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fof_overlap::risinc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::risinc",1,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_risinc_get",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  result =  ((arg1)->risinc);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_decphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fof_overlap::decphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::decphs",1,"sp_fof_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof_overlap::decphs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_decphs_set",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fof_overlap_decphs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->decphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_decphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fof_overlap::decphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::decphs",1,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_decphs_get",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  result =  ((arg1)->decphs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_decinc_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fof_overlap::decinc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::decinc",1,"sp_fof_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof_overlap::decinc",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_decinc_set",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fof_overlap_decinc_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->decinc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_decinc_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fof_overlap::decinc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::decinc",1,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_decinc_get",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  result =  ((arg1)->decinc);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_curamp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof_overlap::curamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::curamp",1,"sp_fof_overlap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof_overlap::curamp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_curamp_set",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->curamp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_curamp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof_overlap::curamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::curamp",1,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_curamp_get",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  result = (float) ((arg1)->curamp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_expamp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof_overlap::expamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::expamp",1,"sp_fof_overlap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof_overlap::expamp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_expamp_set",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->expamp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_expamp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof_overlap::expamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::expamp",1,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_expamp_get",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  result = (float) ((arg1)->expamp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_glissbas_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof_overlap::glissbas",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::glissbas",1,"sp_fof_overlap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof_overlap::glissbas",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_glissbas_set",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->glissbas = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_glissbas_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof_overlap::glissbas",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::glissbas",1,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_glissbas_get",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  result = (float) ((arg1)->glissbas);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_sampct_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fof_overlap::sampct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::sampct",1,"sp_fof_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof_overlap::sampct",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_sampct_set",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fof_overlap_sampct_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->sampct = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_overlap_sampct_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *arg1 = (sp_fof_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fof_overlap::sampct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_overlap::sampct",1,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_overlap_sampct_get",1,SWIGTYPE_p_sp_fof_overlap);
  }
  
  result =  ((arg1)->sampct);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_fof_overlap(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof_overlap *result = 0 ;
  
  SWIG_check_num_args("sp_fof_overlap::sp_fof_overlap",0,0)
  result = (sp_fof_overlap *)new sp_fof_overlap();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fof_overlap,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_fof_overlap(void *obj) {
sp_fof_overlap *arg1 = (sp_fof_overlap *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_fof_overlap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_fof_overlap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_fof_overlap_attributes[] = {
    { "nxtact", _wrap_sp_fof_overlap_nxtact_get, _wrap_sp_fof_overlap_nxtact_set },
    { "nxtfree", _wrap_sp_fof_overlap_nxtfree_get, _wrap_sp_fof_overlap_nxtfree_set },
    { "timrem", _wrap_sp_fof_overlap_timrem_get, _wrap_sp_fof_overlap_timrem_set },
    { "dectim", _wrap_sp_fof_overlap_dectim_get, _wrap_sp_fof_overlap_dectim_set },
    { "formphs", _wrap_sp_fof_overlap_formphs_get, _wrap_sp_fof_overlap_formphs_set },
    { "forminc", _wrap_sp_fof_overlap_forminc_get, _wrap_sp_fof_overlap_forminc_set },
    { "risphs", _wrap_sp_fof_overlap_risphs_get, _wrap_sp_fof_overlap_risphs_set },
    { "risinc", _wrap_sp_fof_overlap_risinc_get, _wrap_sp_fof_overlap_risinc_set },
    { "decphs", _wrap_sp_fof_overlap_decphs_get, _wrap_sp_fof_overlap_decphs_set },
    { "decinc", _wrap_sp_fof_overlap_decinc_get, _wrap_sp_fof_overlap_decinc_set },
    { "curamp", _wrap_sp_fof_overlap_curamp_get, _wrap_sp_fof_overlap_curamp_set },
    { "expamp", _wrap_sp_fof_overlap_expamp_get, _wrap_sp_fof_overlap_expamp_set },
    { "glissbas", _wrap_sp_fof_overlap_glissbas_get, _wrap_sp_fof_overlap_glissbas_set },
    { "sampct", _wrap_sp_fof_overlap_sampct_get, _wrap_sp_fof_overlap_sampct_set },
    {0,0,0}
};
static swig_lua_method swig_sp_fof_overlap_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_fof_overlap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_fof_overlap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_fof_overlap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_fof_overlap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_fof_overlap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_fof_overlap_SwigStatic = {
    "sp_fof_overlap",
    swig_sp_fof_overlap_SwigStatic_methods,
    swig_sp_fof_overlap_SwigStatic_attributes,
    swig_sp_fof_overlap_SwigStatic_constants,
    swig_sp_fof_overlap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_fof_overlap_bases[] = {0};
static const char *swig_sp_fof_overlap_base_names[] = {0};
static swig_lua_class _wrap_class_sp_fof_overlap = { "sp_fof_overlap", "sp_fof_overlap", &SWIGTYPE_p_sp_fof_overlap,_proxy__wrap_new_sp_fof_overlap, swig_delete_sp_fof_overlap, swig_sp_fof_overlap_methods, swig_sp_fof_overlap_attributes, &swig_sp_fof_overlap_SwigStatic, swig_sp_fof_overlap_meta, swig_sp_fof_overlap_bases, swig_sp_fof_overlap_base_names };

static int _wrap_sp_fof_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::amp",1,"sp_fof *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_amp_set",1,SWIGTYPE_p_sp_fof);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::amp",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_amp_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_fund_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof::fund",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::fund",1,"sp_fof *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof::fund",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_fund_set",1,SWIGTYPE_p_sp_fof);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->fund = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_fund_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof::fund",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::fund",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_fund_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (float) ((arg1)->fund);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_form_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof::form",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::form",1,"sp_fof *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof::form",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_form_set",1,SWIGTYPE_p_sp_fof);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->form = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_form_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof::form",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::form",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_form_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (float) ((arg1)->form);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_oct_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof::oct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::oct",1,"sp_fof *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof::oct",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_oct_set",1,SWIGTYPE_p_sp_fof);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->oct = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_oct_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof::oct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::oct",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_oct_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (float) ((arg1)->oct);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_band_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof::band",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::band",1,"sp_fof *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof::band",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_band_set",1,SWIGTYPE_p_sp_fof);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->band = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_band_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof::band",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::band",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_band_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (float) ((arg1)->band);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_ris_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof::ris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::ris",1,"sp_fof *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof::ris",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_ris_set",1,SWIGTYPE_p_sp_fof);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ris = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_ris_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof::ris",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::ris",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_ris_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (float) ((arg1)->ris);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_dur_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof::dur",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::dur",1,"sp_fof *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof::dur",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_dur_set",1,SWIGTYPE_p_sp_fof);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dur = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_dur_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof::dur",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::dur",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_dur_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (float) ((arg1)->dur);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_dec_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof::dec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::dec",1,"sp_fof *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof::dec",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_dec_set",1,SWIGTYPE_p_sp_fof);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_dec_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof::dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::dec",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_dec_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (float) ((arg1)->dec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_iolaps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof::iolaps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::iolaps",1,"sp_fof *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof::iolaps",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_iolaps_set",1,SWIGTYPE_p_sp_fof);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iolaps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_iolaps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof::iolaps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::iolaps",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_iolaps_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (float) ((arg1)->iolaps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_iphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof::iphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::iphs",1,"sp_fof *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof::iphs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_iphs_set",1,SWIGTYPE_p_sp_fof);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_iphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof::iphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::iphs",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_iphs_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (float) ((arg1)->iphs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_durtogo_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fof::durtogo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::durtogo",1,"sp_fof *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof::durtogo",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_durtogo_set",1,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fof_durtogo_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->durtogo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_durtogo_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fof::durtogo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::durtogo",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_durtogo_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result =  ((arg1)->durtogo);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_fundphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fof::fundphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::fundphs",1,"sp_fof *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof::fundphs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_fundphs_set",1,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fof_fundphs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->fundphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_fundphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fof::fundphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::fundphs",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_fundphs_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result =  ((arg1)->fundphs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_fofcount_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fof::fofcount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::fofcount",1,"sp_fof *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof::fofcount",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_fofcount_set",1,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fof_fofcount_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->fofcount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_fofcount_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fof::fofcount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::fofcount",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_fofcount_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result =  ((arg1)->fofcount);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_prvsmps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fof::prvsmps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::prvsmps",1,"sp_fof *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof::prvsmps",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_prvsmps_set",1,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fof_prvsmps_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prvsmps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_prvsmps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fof::prvsmps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::prvsmps",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_prvsmps_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result =  ((arg1)->prvsmps);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_prvband_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof::prvband",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::prvband",1,"sp_fof *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof::prvband",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_prvband_set",1,SWIGTYPE_p_sp_fof);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prvband = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_prvband_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof::prvband",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::prvband",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_prvband_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (float) ((arg1)->prvband);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_expamp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof::expamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::expamp",1,"sp_fof *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof::expamp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_expamp_set",1,SWIGTYPE_p_sp_fof);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->expamp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_expamp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof::expamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::expamp",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_expamp_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (float) ((arg1)->expamp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_preamp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fof::preamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::preamp",1,"sp_fof *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fof::preamp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_preamp_set",1,SWIGTYPE_p_sp_fof);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->preamp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_preamp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fof::preamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::preamp",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_preamp_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (float) ((arg1)->preamp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_foftype_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int16_t arg2 ;
  int16_t *argp2 ;
  
  SWIG_check_num_args("sp_fof::foftype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::foftype",1,"sp_fof *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof::foftype",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_foftype_set",1,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int16_t,0))){
    SWIG_fail_ptr("sp_fof_foftype_set",2,SWIGTYPE_p_int16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->foftype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_foftype_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("sp_fof::foftype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::foftype",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_foftype_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result =  ((arg1)->foftype);
  {
    int16_t * resultptr = new int16_t((const int16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_xincod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int16_t arg2 ;
  int16_t *argp2 ;
  
  SWIG_check_num_args("sp_fof::xincod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::xincod",1,"sp_fof *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof::xincod",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_xincod_set",1,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int16_t,0))){
    SWIG_fail_ptr("sp_fof_xincod_set",2,SWIGTYPE_p_int16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->xincod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_xincod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("sp_fof::xincod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::xincod",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_xincod_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result =  ((arg1)->xincod);
  {
    int16_t * resultptr = new int16_t((const int16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_ampcod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int16_t arg2 ;
  int16_t *argp2 ;
  
  SWIG_check_num_args("sp_fof::ampcod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::ampcod",1,"sp_fof *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof::ampcod",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_ampcod_set",1,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int16_t,0))){
    SWIG_fail_ptr("sp_fof_ampcod_set",2,SWIGTYPE_p_int16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->ampcod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_ampcod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("sp_fof::ampcod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::ampcod",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_ampcod_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result =  ((arg1)->ampcod);
  {
    int16_t * resultptr = new int16_t((const int16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_fundcod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int16_t arg2 ;
  int16_t *argp2 ;
  
  SWIG_check_num_args("sp_fof::fundcod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::fundcod",1,"sp_fof *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof::fundcod",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_fundcod_set",1,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int16_t,0))){
    SWIG_fail_ptr("sp_fof_fundcod_set",2,SWIGTYPE_p_int16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->fundcod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_fundcod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("sp_fof::fundcod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::fundcod",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_fundcod_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result =  ((arg1)->fundcod);
  {
    int16_t * resultptr = new int16_t((const int16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_formcod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int16_t arg2 ;
  int16_t *argp2 ;
  
  SWIG_check_num_args("sp_fof::formcod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::formcod",1,"sp_fof *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof::formcod",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_formcod_set",1,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int16_t,0))){
    SWIG_fail_ptr("sp_fof_formcod_set",2,SWIGTYPE_p_int16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->formcod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_formcod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("sp_fof::formcod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::formcod",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_formcod_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result =  ((arg1)->formcod);
  {
    int16_t * resultptr = new int16_t((const int16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_fmtmod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int16_t arg2 ;
  int16_t *argp2 ;
  
  SWIG_check_num_args("sp_fof::fmtmod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::fmtmod",1,"sp_fof *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fof::fmtmod",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_fmtmod_set",1,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int16_t,0))){
    SWIG_fail_ptr("sp_fof_fmtmod_set",2,SWIGTYPE_p_int16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->fmtmod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_fmtmod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("sp_fof::fmtmod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::fmtmod",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_fmtmod_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result =  ((arg1)->fmtmod);
  {
    int16_t * resultptr = new int16_t((const int16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_auxch_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_fof::auxch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::auxch",1,"sp_fof *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fof::auxch",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_auxch_set",1,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_fof_auxch_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->auxch = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_auxch_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_fof::auxch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::auxch",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_auxch_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (sp_auxdata *)& ((arg1)->auxch);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_ftp1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_fof::ftp1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::ftp1",1,"sp_fof *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fof::ftp1",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_ftp1_set",1,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_fof_ftp1_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ftp1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_ftp1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_fof::ftp1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::ftp1",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_ftp1_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (sp_ftbl *) ((arg1)->ftp1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_ftp2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_fof::ftp2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::ftp2",1,"sp_fof *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fof::ftp2",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_ftp2_set",1,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_fof_ftp2_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ftp2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_ftp2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_fof::ftp2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::ftp2",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_ftp2_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (sp_ftbl *) ((arg1)->ftp2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_basovrlap_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  sp_fof_overlap *arg2 = (sp_fof_overlap *) 0 ;
  
  SWIG_check_num_args("sp_fof::basovrlap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::basovrlap",1,"sp_fof *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fof::basovrlap",2,"sp_fof_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_basovrlap_set",1,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fof_overlap,0))){
    SWIG_fail_ptr("sp_fof_basovrlap_set",2,SWIGTYPE_p_sp_fof_overlap);
  }
  
  if (arg1) (arg1)->basovrlap = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_basovrlap_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *arg1 = (sp_fof *) 0 ;
  sp_fof_overlap *result = 0 ;
  
  SWIG_check_num_args("sp_fof::basovrlap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof::basovrlap",1,"sp_fof *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_basovrlap_get",1,SWIGTYPE_p_sp_fof);
  }
  
  result = (sp_fof_overlap *)& ((arg1)->basovrlap);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fof_overlap,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_fof(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof *result = 0 ;
  
  SWIG_check_num_args("sp_fof::sp_fof",0,0)
  result = (sp_fof *)new sp_fof();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fof,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_fof(void *obj) {
sp_fof *arg1 = (sp_fof *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_fof(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_fof);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_fof_attributes[] = {
    { "amp", _wrap_sp_fof_amp_get, _wrap_sp_fof_amp_set },
    { "fund", _wrap_sp_fof_fund_get, _wrap_sp_fof_fund_set },
    { "form", _wrap_sp_fof_form_get, _wrap_sp_fof_form_set },
    { "oct", _wrap_sp_fof_oct_get, _wrap_sp_fof_oct_set },
    { "band", _wrap_sp_fof_band_get, _wrap_sp_fof_band_set },
    { "ris", _wrap_sp_fof_ris_get, _wrap_sp_fof_ris_set },
    { "dur", _wrap_sp_fof_dur_get, _wrap_sp_fof_dur_set },
    { "dec", _wrap_sp_fof_dec_get, _wrap_sp_fof_dec_set },
    { "iolaps", _wrap_sp_fof_iolaps_get, _wrap_sp_fof_iolaps_set },
    { "iphs", _wrap_sp_fof_iphs_get, _wrap_sp_fof_iphs_set },
    { "durtogo", _wrap_sp_fof_durtogo_get, _wrap_sp_fof_durtogo_set },
    { "fundphs", _wrap_sp_fof_fundphs_get, _wrap_sp_fof_fundphs_set },
    { "fofcount", _wrap_sp_fof_fofcount_get, _wrap_sp_fof_fofcount_set },
    { "prvsmps", _wrap_sp_fof_prvsmps_get, _wrap_sp_fof_prvsmps_set },
    { "prvband", _wrap_sp_fof_prvband_get, _wrap_sp_fof_prvband_set },
    { "expamp", _wrap_sp_fof_expamp_get, _wrap_sp_fof_expamp_set },
    { "preamp", _wrap_sp_fof_preamp_get, _wrap_sp_fof_preamp_set },
    { "foftype", _wrap_sp_fof_foftype_get, _wrap_sp_fof_foftype_set },
    { "xincod", _wrap_sp_fof_xincod_get, _wrap_sp_fof_xincod_set },
    { "ampcod", _wrap_sp_fof_ampcod_get, _wrap_sp_fof_ampcod_set },
    { "fundcod", _wrap_sp_fof_fundcod_get, _wrap_sp_fof_fundcod_set },
    { "formcod", _wrap_sp_fof_formcod_get, _wrap_sp_fof_formcod_set },
    { "fmtmod", _wrap_sp_fof_fmtmod_get, _wrap_sp_fof_fmtmod_set },
    { "auxch", _wrap_sp_fof_auxch_get, _wrap_sp_fof_auxch_set },
    { "ftp1", _wrap_sp_fof_ftp1_get, _wrap_sp_fof_ftp1_set },
    { "ftp2", _wrap_sp_fof_ftp2_get, _wrap_sp_fof_ftp2_set },
    { "basovrlap", _wrap_sp_fof_basovrlap_get, _wrap_sp_fof_basovrlap_set },
    {0,0,0}
};
static swig_lua_method swig_sp_fof_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_fof_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_fof_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_fof_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_fof_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_fof_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_fof_Sf_SwigStatic = {
    "sp_fof",
    swig_sp_fof_Sf_SwigStatic_methods,
    swig_sp_fof_Sf_SwigStatic_attributes,
    swig_sp_fof_Sf_SwigStatic_constants,
    swig_sp_fof_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_fof_bases[] = {0};
static const char *swig_sp_fof_base_names[] = {0};
static swig_lua_class _wrap_class_sp_fof = { "sp_fof", "sp_fof", &SWIGTYPE_p_sp_fof,_proxy__wrap_new_sp_fof, swig_delete_sp_fof, swig_sp_fof_methods, swig_sp_fof_attributes, &swig_sp_fof_Sf_SwigStatic, swig_sp_fof_meta, swig_sp_fof_bases, swig_sp_fof_base_names };

static int _wrap_sp_fof_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof **arg1 = (sp_fof **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fof_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_create",1,"sp_fof **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_create",1,SWIGTYPE_p_p_sp_fof);
  }
  
  result = (int)sp_fof_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_fof **arg1 = (sp_fof **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fof_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_destroy",1,"sp_fof **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_destroy",1,SWIGTYPE_p_p_sp_fof);
  }
  
  result = (int)sp_fof_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_fof *arg2 = (sp_fof *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  sp_ftbl *arg4 = (sp_ftbl *) 0 ;
  int arg5 ;
  float arg6 ;
  int result;
  
  SWIG_check_num_args("sp_fof_init",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fof_init",2,"sp_fof *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_fof_init",3,"sp_ftbl *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_fof_init",4,"sp_ftbl *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("sp_fof_init",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("sp_fof_init",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_fof_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_init",2,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_fof_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_fof_init",4,SWIGTYPE_p_sp_ftbl);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  result = (int)sp_fof_init(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fof_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_fof *arg2 = (sp_fof *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fof_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fof_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fof_compute",2,"sp_fof *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_fof_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_fof_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_fof_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fof,0))){
    SWIG_fail_ptr("sp_fof_compute",2,SWIGTYPE_p_sp_fof);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_fof_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_fof_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_fof_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_nxtact_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  sp_fog_overlap *arg2 = (sp_fog_overlap *) 0 ;
  
  SWIG_check_num_args("sp_fog_overlap::nxtact",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::nxtact",1,"sp_fog_overlap *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fog_overlap::nxtact",2,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_nxtact_set",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fog_overlap,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_fog_overlap_nxtact_set",2,SWIGTYPE_p_sp_fog_overlap);
  }
  
  if (arg1) (arg1)->nxtact = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_nxtact_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  sp_fog_overlap *result = 0 ;
  
  SWIG_check_num_args("sp_fog_overlap::nxtact",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::nxtact",1,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_nxtact_get",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  result = (sp_fog_overlap *) ((arg1)->nxtact);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fog_overlap,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_nxtfree_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  sp_fog_overlap *arg2 = (sp_fog_overlap *) 0 ;
  
  SWIG_check_num_args("sp_fog_overlap::nxtfree",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::nxtfree",1,"sp_fog_overlap *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fog_overlap::nxtfree",2,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_nxtfree_set",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fog_overlap,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_fog_overlap_nxtfree_set",2,SWIGTYPE_p_sp_fog_overlap);
  }
  
  if (arg1) (arg1)->nxtfree = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_nxtfree_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  sp_fog_overlap *result = 0 ;
  
  SWIG_check_num_args("sp_fog_overlap::nxtfree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::nxtfree",1,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_nxtfree_get",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  result = (sp_fog_overlap *) ((arg1)->nxtfree);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fog_overlap,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_timrem_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fog_overlap::timrem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::timrem",1,"sp_fog_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog_overlap::timrem",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_timrem_set",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fog_overlap_timrem_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->timrem = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_timrem_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fog_overlap::timrem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::timrem",1,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_timrem_get",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  result =  ((arg1)->timrem);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_dectim_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fog_overlap::dectim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::dectim",1,"sp_fog_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog_overlap::dectim",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_dectim_set",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fog_overlap_dectim_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->dectim = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_dectim_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fog_overlap::dectim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::dectim",1,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_dectim_get",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  result =  ((arg1)->dectim);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_formphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fog_overlap::formphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::formphs",1,"sp_fog_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog_overlap::formphs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_formphs_set",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fog_overlap_formphs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->formphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_formphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fog_overlap::formphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::formphs",1,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_formphs_get",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  result =  ((arg1)->formphs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_forminc_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fog_overlap::forminc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::forminc",1,"sp_fog_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog_overlap::forminc",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_forminc_set",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fog_overlap_forminc_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->forminc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_forminc_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fog_overlap::forminc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::forminc",1,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_forminc_get",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  result =  ((arg1)->forminc);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_risphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_fog_overlap::risphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::risphs",1,"sp_fog_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog_overlap::risphs",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_risphs_set",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_fog_overlap_risphs_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->risphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_risphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_fog_overlap::risphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::risphs",1,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_risphs_get",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  result =  ((arg1)->risphs);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_risinc_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fog_overlap::risinc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::risinc",1,"sp_fog_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog_overlap::risinc",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_risinc_set",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fog_overlap_risinc_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->risinc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_risinc_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fog_overlap::risinc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::risinc",1,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_risinc_get",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  result =  ((arg1)->risinc);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_decphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fog_overlap::decphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::decphs",1,"sp_fog_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog_overlap::decphs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_decphs_set",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fog_overlap_decphs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->decphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_decphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fog_overlap::decphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::decphs",1,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_decphs_get",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  result =  ((arg1)->decphs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_decinc_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fog_overlap::decinc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::decinc",1,"sp_fog_overlap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog_overlap::decinc",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_decinc_set",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fog_overlap_decinc_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->decinc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_decinc_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fog_overlap::decinc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::decinc",1,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_decinc_get",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  result =  ((arg1)->decinc);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_curamp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog_overlap::curamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::curamp",1,"sp_fog_overlap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog_overlap::curamp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_curamp_set",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->curamp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_curamp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog_overlap::curamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::curamp",1,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_curamp_get",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  result = (float) ((arg1)->curamp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_expamp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog_overlap::expamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::expamp",1,"sp_fog_overlap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog_overlap::expamp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_expamp_set",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->expamp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_expamp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog_overlap::expamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::expamp",1,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_expamp_get",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  result = (float) ((arg1)->expamp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog_overlap::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::pos",1,"sp_fog_overlap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog_overlap::pos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_pos_set",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog_overlap::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::pos",1,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_pos_get",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  result = (float) ((arg1)->pos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_inc_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog_overlap::inc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::inc",1,"sp_fog_overlap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog_overlap::inc",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_inc_set",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->inc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_overlap_inc_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *arg1 = (sp_fog_overlap *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog_overlap::inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_overlap::inc",1,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_overlap_inc_get",1,SWIGTYPE_p_sp_fog_overlap);
  }
  
  result = (float) ((arg1)->inc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_fog_overlap(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog_overlap *result = 0 ;
  
  SWIG_check_num_args("sp_fog_overlap::sp_fog_overlap",0,0)
  result = (sp_fog_overlap *)new sp_fog_overlap();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fog_overlap,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_fog_overlap(void *obj) {
sp_fog_overlap *arg1 = (sp_fog_overlap *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_fog_overlap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_fog_overlap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_fog_overlap_attributes[] = {
    { "nxtact", _wrap_sp_fog_overlap_nxtact_get, _wrap_sp_fog_overlap_nxtact_set },
    { "nxtfree", _wrap_sp_fog_overlap_nxtfree_get, _wrap_sp_fog_overlap_nxtfree_set },
    { "timrem", _wrap_sp_fog_overlap_timrem_get, _wrap_sp_fog_overlap_timrem_set },
    { "dectim", _wrap_sp_fog_overlap_dectim_get, _wrap_sp_fog_overlap_dectim_set },
    { "formphs", _wrap_sp_fog_overlap_formphs_get, _wrap_sp_fog_overlap_formphs_set },
    { "forminc", _wrap_sp_fog_overlap_forminc_get, _wrap_sp_fog_overlap_forminc_set },
    { "risphs", _wrap_sp_fog_overlap_risphs_get, _wrap_sp_fog_overlap_risphs_set },
    { "risinc", _wrap_sp_fog_overlap_risinc_get, _wrap_sp_fog_overlap_risinc_set },
    { "decphs", _wrap_sp_fog_overlap_decphs_get, _wrap_sp_fog_overlap_decphs_set },
    { "decinc", _wrap_sp_fog_overlap_decinc_get, _wrap_sp_fog_overlap_decinc_set },
    { "curamp", _wrap_sp_fog_overlap_curamp_get, _wrap_sp_fog_overlap_curamp_set },
    { "expamp", _wrap_sp_fog_overlap_expamp_get, _wrap_sp_fog_overlap_expamp_set },
    { "pos", _wrap_sp_fog_overlap_pos_get, _wrap_sp_fog_overlap_pos_set },
    { "inc", _wrap_sp_fog_overlap_inc_get, _wrap_sp_fog_overlap_inc_set },
    {0,0,0}
};
static swig_lua_method swig_sp_fog_overlap_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_fog_overlap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_fog_overlap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_fog_overlap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_fog_overlap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_fog_overlap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_fog_overlap_SwigStatic = {
    "sp_fog_overlap",
    swig_sp_fog_overlap_SwigStatic_methods,
    swig_sp_fog_overlap_SwigStatic_attributes,
    swig_sp_fog_overlap_SwigStatic_constants,
    swig_sp_fog_overlap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_fog_overlap_bases[] = {0};
static const char *swig_sp_fog_overlap_base_names[] = {0};
static swig_lua_class _wrap_class_sp_fog_overlap = { "sp_fog_overlap", "sp_fog_overlap", &SWIGTYPE_p_sp_fog_overlap,_proxy__wrap_new_sp_fog_overlap, swig_delete_sp_fog_overlap, swig_sp_fog_overlap_methods, swig_sp_fog_overlap_attributes, &swig_sp_fog_overlap_SwigStatic, swig_sp_fog_overlap_meta, swig_sp_fog_overlap_bases, swig_sp_fog_overlap_base_names };

static int _wrap_sp_fog_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::amp",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_amp_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::amp",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_amp_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_dens_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::dens",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::dens",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::dens",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_dens_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dens = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_dens_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::dens",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::dens",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_dens_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->dens);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_trans_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::trans",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::trans",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::trans",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_trans_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->trans = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_trans_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::trans",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::trans",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_trans_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->trans);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_spd_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::spd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::spd",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::spd",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_spd_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->spd = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_spd_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::spd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::spd",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_spd_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->spd);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_oct_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::oct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::oct",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::oct",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_oct_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->oct = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_oct_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::oct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::oct",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_oct_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->oct);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_band_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::band",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::band",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::band",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_band_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->band = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_band_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::band",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::band",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_band_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->band);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_ris_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::ris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::ris",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::ris",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_ris_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ris = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_ris_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::ris",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::ris",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_ris_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->ris);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_dur_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::dur",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::dur",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::dur",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_dur_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dur = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_dur_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::dur",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::dur",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_dur_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->dur);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_dec_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::dec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::dec",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::dec",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_dec_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_dec_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::dec",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_dec_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->dec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_iolaps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::iolaps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::iolaps",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::iolaps",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_iolaps_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iolaps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_iolaps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::iolaps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::iolaps",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_iolaps_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->iolaps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_iphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::iphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::iphs",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::iphs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_iphs_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_iphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::iphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::iphs",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_iphs_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->iphs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_itmode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::itmode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::itmode",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::itmode",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_itmode_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->itmode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_itmode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::itmode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::itmode",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_itmode_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->itmode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_basovrlap_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  sp_fog_overlap *arg2 = (sp_fog_overlap *) 0 ;
  
  SWIG_check_num_args("sp_fog::basovrlap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::basovrlap",1,"sp_fog *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fog::basovrlap",2,"sp_fog_overlap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_basovrlap_set",1,SWIGTYPE_p_sp_fog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fog_overlap,0))){
    SWIG_fail_ptr("sp_fog_basovrlap_set",2,SWIGTYPE_p_sp_fog_overlap);
  }
  
  if (arg1) (arg1)->basovrlap = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_basovrlap_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  sp_fog_overlap *result = 0 ;
  
  SWIG_check_num_args("sp_fog::basovrlap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::basovrlap",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_basovrlap_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (sp_fog_overlap *)& ((arg1)->basovrlap);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fog_overlap,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_durtogo_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fog::durtogo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::durtogo",1,"sp_fog *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog::durtogo",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_durtogo_set",1,SWIGTYPE_p_sp_fog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fog_durtogo_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->durtogo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_durtogo_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fog::durtogo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::durtogo",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_durtogo_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result =  ((arg1)->durtogo);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_fundphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fog::fundphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::fundphs",1,"sp_fog *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog::fundphs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_fundphs_set",1,SWIGTYPE_p_sp_fog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fog_fundphs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->fundphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_fundphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fog::fundphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::fundphs",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_fundphs_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result =  ((arg1)->fundphs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_fofcount_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fog::fofcount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::fofcount",1,"sp_fog *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog::fofcount",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_fofcount_set",1,SWIGTYPE_p_sp_fog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fog_fofcount_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->fofcount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_fofcount_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fog::fofcount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::fofcount",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_fofcount_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result =  ((arg1)->fofcount);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_prvsmps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fog::prvsmps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::prvsmps",1,"sp_fog *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog::prvsmps",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_prvsmps_set",1,SWIGTYPE_p_sp_fog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fog_prvsmps_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prvsmps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_prvsmps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fog::prvsmps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::prvsmps",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_prvsmps_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result =  ((arg1)->prvsmps);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_spdphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fog::spdphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::spdphs",1,"sp_fog *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog::spdphs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_spdphs_set",1,SWIGTYPE_p_sp_fog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fog_spdphs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->spdphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_spdphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fog::spdphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::spdphs",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_spdphs_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result =  ((arg1)->spdphs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_prvband_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::prvband",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::prvband",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::prvband",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_prvband_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prvband = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_prvband_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::prvband",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::prvband",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_prvband_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->prvband);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_expamp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::expamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::expamp",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::expamp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_expamp_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->expamp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_expamp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::expamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::expamp",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_expamp_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->expamp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_preamp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::preamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::preamp",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::preamp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_preamp_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->preamp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_preamp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::preamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::preamp",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_preamp_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->preamp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_fogcvt_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fog::fogcvt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::fogcvt",1,"sp_fog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fog::fogcvt",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_fogcvt_set",1,SWIGTYPE_p_sp_fog);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->fogcvt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_fogcvt_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fog::fogcvt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::fogcvt",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_fogcvt_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (float) ((arg1)->fogcvt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_formcod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int16_t arg2 ;
  int16_t *argp2 ;
  
  SWIG_check_num_args("sp_fog::formcod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::formcod",1,"sp_fog *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog::formcod",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_formcod_set",1,SWIGTYPE_p_sp_fog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int16_t,0))){
    SWIG_fail_ptr("sp_fog_formcod_set",2,SWIGTYPE_p_int16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->formcod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_formcod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("sp_fog::formcod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::formcod",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_formcod_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result =  ((arg1)->formcod);
  {
    int16_t * resultptr = new int16_t((const int16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_fmtmod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int16_t arg2 ;
  int16_t *argp2 ;
  
  SWIG_check_num_args("sp_fog::fmtmod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::fmtmod",1,"sp_fog *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog::fmtmod",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_fmtmod_set",1,SWIGTYPE_p_sp_fog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int16_t,0))){
    SWIG_fail_ptr("sp_fog_fmtmod_set",2,SWIGTYPE_p_int16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->fmtmod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_fmtmod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("sp_fog::fmtmod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::fmtmod",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_fmtmod_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result =  ((arg1)->fmtmod);
  {
    int16_t * resultptr = new int16_t((const int16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_speedcod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int16_t arg2 ;
  int16_t *argp2 ;
  
  SWIG_check_num_args("sp_fog::speedcod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::speedcod",1,"sp_fog *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fog::speedcod",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_speedcod_set",1,SWIGTYPE_p_sp_fog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int16_t,0))){
    SWIG_fail_ptr("sp_fog_speedcod_set",2,SWIGTYPE_p_int16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->speedcod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_speedcod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("sp_fog::speedcod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::speedcod",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_speedcod_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result =  ((arg1)->speedcod);
  {
    int16_t * resultptr = new int16_t((const int16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_auxch_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_fog::auxch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::auxch",1,"sp_fog *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fog::auxch",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_auxch_set",1,SWIGTYPE_p_sp_fog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_fog_auxch_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->auxch = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_auxch_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_fog::auxch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::auxch",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_auxch_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (sp_auxdata *)& ((arg1)->auxch);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_ftp1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_fog::ftp1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::ftp1",1,"sp_fog *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fog::ftp1",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_ftp1_set",1,SWIGTYPE_p_sp_fog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_fog_ftp1_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ftp1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_ftp1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_fog::ftp1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::ftp1",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_ftp1_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (sp_ftbl *) ((arg1)->ftp1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_ftp2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_fog::ftp2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::ftp2",1,"sp_fog *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fog::ftp2",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_ftp2_set",1,SWIGTYPE_p_sp_fog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_fog_ftp2_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ftp2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_ftp2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *arg1 = (sp_fog *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_fog::ftp2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog::ftp2",1,"sp_fog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_ftp2_get",1,SWIGTYPE_p_sp_fog);
  }
  
  result = (sp_ftbl *) ((arg1)->ftp2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_fog(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog *result = 0 ;
  
  SWIG_check_num_args("sp_fog::sp_fog",0,0)
  result = (sp_fog *)new sp_fog();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fog,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_fog(void *obj) {
sp_fog *arg1 = (sp_fog *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_fog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_fog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_fog_attributes[] = {
    { "amp", _wrap_sp_fog_amp_get, _wrap_sp_fog_amp_set },
    { "dens", _wrap_sp_fog_dens_get, _wrap_sp_fog_dens_set },
    { "trans", _wrap_sp_fog_trans_get, _wrap_sp_fog_trans_set },
    { "spd", _wrap_sp_fog_spd_get, _wrap_sp_fog_spd_set },
    { "oct", _wrap_sp_fog_oct_get, _wrap_sp_fog_oct_set },
    { "band", _wrap_sp_fog_band_get, _wrap_sp_fog_band_set },
    { "ris", _wrap_sp_fog_ris_get, _wrap_sp_fog_ris_set },
    { "dur", _wrap_sp_fog_dur_get, _wrap_sp_fog_dur_set },
    { "dec", _wrap_sp_fog_dec_get, _wrap_sp_fog_dec_set },
    { "iolaps", _wrap_sp_fog_iolaps_get, _wrap_sp_fog_iolaps_set },
    { "iphs", _wrap_sp_fog_iphs_get, _wrap_sp_fog_iphs_set },
    { "itmode", _wrap_sp_fog_itmode_get, _wrap_sp_fog_itmode_set },
    { "basovrlap", _wrap_sp_fog_basovrlap_get, _wrap_sp_fog_basovrlap_set },
    { "durtogo", _wrap_sp_fog_durtogo_get, _wrap_sp_fog_durtogo_set },
    { "fundphs", _wrap_sp_fog_fundphs_get, _wrap_sp_fog_fundphs_set },
    { "fofcount", _wrap_sp_fog_fofcount_get, _wrap_sp_fog_fofcount_set },
    { "prvsmps", _wrap_sp_fog_prvsmps_get, _wrap_sp_fog_prvsmps_set },
    { "spdphs", _wrap_sp_fog_spdphs_get, _wrap_sp_fog_spdphs_set },
    { "prvband", _wrap_sp_fog_prvband_get, _wrap_sp_fog_prvband_set },
    { "expamp", _wrap_sp_fog_expamp_get, _wrap_sp_fog_expamp_set },
    { "preamp", _wrap_sp_fog_preamp_get, _wrap_sp_fog_preamp_set },
    { "fogcvt", _wrap_sp_fog_fogcvt_get, _wrap_sp_fog_fogcvt_set },
    { "formcod", _wrap_sp_fog_formcod_get, _wrap_sp_fog_formcod_set },
    { "fmtmod", _wrap_sp_fog_fmtmod_get, _wrap_sp_fog_fmtmod_set },
    { "speedcod", _wrap_sp_fog_speedcod_get, _wrap_sp_fog_speedcod_set },
    { "auxch", _wrap_sp_fog_auxch_get, _wrap_sp_fog_auxch_set },
    { "ftp1", _wrap_sp_fog_ftp1_get, _wrap_sp_fog_ftp1_set },
    { "ftp2", _wrap_sp_fog_ftp2_get, _wrap_sp_fog_ftp2_set },
    {0,0,0}
};
static swig_lua_method swig_sp_fog_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_fog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_fog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_fog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_fog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_fog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_fog_Sf_SwigStatic = {
    "sp_fog",
    swig_sp_fog_Sf_SwigStatic_methods,
    swig_sp_fog_Sf_SwigStatic_attributes,
    swig_sp_fog_Sf_SwigStatic_constants,
    swig_sp_fog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_fog_bases[] = {0};
static const char *swig_sp_fog_base_names[] = {0};
static swig_lua_class _wrap_class_sp_fog = { "sp_fog", "sp_fog", &SWIGTYPE_p_sp_fog,_proxy__wrap_new_sp_fog, swig_delete_sp_fog, swig_sp_fog_methods, swig_sp_fog_attributes, &swig_sp_fog_Sf_SwigStatic, swig_sp_fog_meta, swig_sp_fog_bases, swig_sp_fog_base_names };

static int _wrap_sp_fog_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog **arg1 = (sp_fog **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fog_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_create",1,"sp_fog **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_create",1,SWIGTYPE_p_p_sp_fog);
  }
  
  result = (int)sp_fog_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_fog **arg1 = (sp_fog **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fog_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_destroy",1,"sp_fog **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_destroy",1,SWIGTYPE_p_p_sp_fog);
  }
  
  result = (int)sp_fog_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_fog *arg2 = (sp_fog *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  sp_ftbl *arg4 = (sp_ftbl *) 0 ;
  int arg5 ;
  float arg6 ;
  int result;
  
  SWIG_check_num_args("sp_fog_init",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fog_init",2,"sp_fog *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_fog_init",3,"sp_ftbl *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_fog_init",4,"sp_ftbl *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("sp_fog_init",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("sp_fog_init",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_fog_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_init",2,SWIGTYPE_p_sp_fog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_fog_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_fog_init",4,SWIGTYPE_p_sp_ftbl);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  result = (int)sp_fog_init(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fog_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_fog *arg2 = (sp_fog *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fog_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fog_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fog_compute",2,"sp_fog *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_fog_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_fog_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_fog_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fog,0))){
    SWIG_fail_ptr("sp_fog_compute",2,SWIGTYPE_p_sp_fog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_fog_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_fog_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_fog_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *arg1 = (sp_fofilt *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fofilt::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt::freq",1,"sp_fofilt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fofilt::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_freq_set",1,SWIGTYPE_p_sp_fofilt);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *arg1 = (sp_fofilt *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fofilt::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt::freq",1,"sp_fofilt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_freq_get",1,SWIGTYPE_p_sp_fofilt);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_atk_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *arg1 = (sp_fofilt *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fofilt::atk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt::atk",1,"sp_fofilt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fofilt::atk",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_atk_set",1,SWIGTYPE_p_sp_fofilt);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->atk = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_atk_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *arg1 = (sp_fofilt *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fofilt::atk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt::atk",1,"sp_fofilt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_atk_get",1,SWIGTYPE_p_sp_fofilt);
  }
  
  result = (float) ((arg1)->atk);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_dec_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *arg1 = (sp_fofilt *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fofilt::dec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt::dec",1,"sp_fofilt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fofilt::dec",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_dec_set",1,SWIGTYPE_p_sp_fofilt);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_dec_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *arg1 = (sp_fofilt *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fofilt::dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt::dec",1,"sp_fofilt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_dec_get",1,SWIGTYPE_p_sp_fofilt);
  }
  
  result = (float) ((arg1)->dec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_istor_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *arg1 = (sp_fofilt *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fofilt::istor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt::istor",1,"sp_fofilt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fofilt::istor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_istor_set",1,SWIGTYPE_p_sp_fofilt);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->istor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_istor_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *arg1 = (sp_fofilt *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fofilt::istor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt::istor",1,"sp_fofilt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_istor_get",1,SWIGTYPE_p_sp_fofilt);
  }
  
  result = (float) ((arg1)->istor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_tpidsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *arg1 = (sp_fofilt *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fofilt::tpidsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt::tpidsr",1,"sp_fofilt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fofilt::tpidsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_tpidsr_set",1,SWIGTYPE_p_sp_fofilt);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tpidsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_tpidsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *arg1 = (sp_fofilt *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fofilt::tpidsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt::tpidsr",1,"sp_fofilt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_tpidsr_get",1,SWIGTYPE_p_sp_fofilt);
  }
  
  result = (float) ((arg1)->tpidsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *arg1 = (sp_fofilt *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fofilt::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt::sr",1,"sp_fofilt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fofilt::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_sr_set",1,SWIGTYPE_p_sp_fofilt);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *arg1 = (sp_fofilt *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fofilt::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt::sr",1,"sp_fofilt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_sr_get",1,SWIGTYPE_p_sp_fofilt);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_delay_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *arg1 = (sp_fofilt *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_fofilt::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt::delay",1,"sp_fofilt *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fofilt::delay",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_delay_set",1,SWIGTYPE_p_sp_fofilt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_fofilt_delay_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->delay;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_delay_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *arg1 = (sp_fofilt *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_fofilt::delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt::delay",1,"sp_fofilt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_delay_get",1,SWIGTYPE_p_sp_fofilt);
  }
  
  result = (float *)(float *) ((arg1)->delay);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_fofilt(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt *result = 0 ;
  
  SWIG_check_num_args("sp_fofilt::sp_fofilt",0,0)
  result = (sp_fofilt *)new sp_fofilt();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fofilt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_fofilt(void *obj) {
sp_fofilt *arg1 = (sp_fofilt *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_fofilt(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_fofilt);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_fofilt_attributes[] = {
    { "freq", _wrap_sp_fofilt_freq_get, _wrap_sp_fofilt_freq_set },
    { "atk", _wrap_sp_fofilt_atk_get, _wrap_sp_fofilt_atk_set },
    { "dec", _wrap_sp_fofilt_dec_get, _wrap_sp_fofilt_dec_set },
    { "istor", _wrap_sp_fofilt_istor_get, _wrap_sp_fofilt_istor_set },
    { "tpidsr", _wrap_sp_fofilt_tpidsr_get, _wrap_sp_fofilt_tpidsr_set },
    { "sr", _wrap_sp_fofilt_sr_get, _wrap_sp_fofilt_sr_set },
    { "delay", _wrap_sp_fofilt_delay_get, _wrap_sp_fofilt_delay_set },
    {0,0,0}
};
static swig_lua_method swig_sp_fofilt_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_fofilt_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_fofilt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_fofilt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_fofilt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_fofilt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_fofilt_Sf_SwigStatic = {
    "sp_fofilt",
    swig_sp_fofilt_Sf_SwigStatic_methods,
    swig_sp_fofilt_Sf_SwigStatic_attributes,
    swig_sp_fofilt_Sf_SwigStatic_constants,
    swig_sp_fofilt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_fofilt_bases[] = {0};
static const char *swig_sp_fofilt_base_names[] = {0};
static swig_lua_class _wrap_class_sp_fofilt = { "sp_fofilt", "sp_fofilt", &SWIGTYPE_p_sp_fofilt,_proxy__wrap_new_sp_fofilt, swig_delete_sp_fofilt, swig_sp_fofilt_methods, swig_sp_fofilt_attributes, &swig_sp_fofilt_Sf_SwigStatic, swig_sp_fofilt_meta, swig_sp_fofilt_bases, swig_sp_fofilt_base_names };

static int _wrap_sp_fofilt_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt **arg1 = (sp_fofilt **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fofilt_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt_create",1,"sp_fofilt **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_create",1,SWIGTYPE_p_p_sp_fofilt);
  }
  
  result = (int)sp_fofilt_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_fofilt **arg1 = (sp_fofilt **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fofilt_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt_destroy",1,"sp_fofilt **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_destroy",1,SWIGTYPE_p_p_sp_fofilt);
  }
  
  result = (int)sp_fofilt_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_fofilt *arg2 = (sp_fofilt *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fofilt_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fofilt_init",2,"sp_fofilt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_fofilt_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_init",2,SWIGTYPE_p_sp_fofilt);
  }
  
  result = (int)sp_fofilt_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fofilt_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_fofilt *arg2 = (sp_fofilt *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fofilt_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fofilt_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fofilt_compute",2,"sp_fofilt *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_fofilt_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_fofilt_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_fofilt_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fofilt,0))){
    SWIG_fail_ptr("sp_fofilt_compute",2,SWIGTYPE_p_sp_fofilt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_fofilt_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_fofilt_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_fofilt_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_foo_bar_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_foo *arg1 = (sp_foo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_foo::bar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_foo::bar",1,"sp_foo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_foo::bar",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_foo,0))){
    SWIG_fail_ptr("sp_foo_bar_set",1,SWIGTYPE_p_sp_foo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->bar = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_foo_bar_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_foo *arg1 = (sp_foo *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_foo::bar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_foo::bar",1,"sp_foo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_foo,0))){
    SWIG_fail_ptr("sp_foo_bar_get",1,SWIGTYPE_p_sp_foo);
  }
  
  result = (float) ((arg1)->bar);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_foo(lua_State* L) {
  int SWIG_arg = 0;
  sp_foo *result = 0 ;
  
  SWIG_check_num_args("sp_foo::sp_foo",0,0)
  result = (sp_foo *)new sp_foo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_foo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_foo(void *obj) {
sp_foo *arg1 = (sp_foo *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_foo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_foo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_foo_attributes[] = {
    { "bar", _wrap_sp_foo_bar_get, _wrap_sp_foo_bar_set },
    {0,0,0}
};
static swig_lua_method swig_sp_foo_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_foo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_foo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_foo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_foo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_foo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_foo_Sf_SwigStatic = {
    "sp_foo",
    swig_sp_foo_Sf_SwigStatic_methods,
    swig_sp_foo_Sf_SwigStatic_attributes,
    swig_sp_foo_Sf_SwigStatic_constants,
    swig_sp_foo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_foo_bases[] = {0};
static const char *swig_sp_foo_base_names[] = {0};
static swig_lua_class _wrap_class_sp_foo = { "sp_foo", "sp_foo", &SWIGTYPE_p_sp_foo,_proxy__wrap_new_sp_foo, swig_delete_sp_foo, swig_sp_foo_methods, swig_sp_foo_attributes, &swig_sp_foo_Sf_SwigStatic, swig_sp_foo_meta, swig_sp_foo_bases, swig_sp_foo_base_names };

static int _wrap_sp_foo_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_foo **arg1 = (sp_foo **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_foo_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_foo_create",1,"sp_foo **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_foo,0))){
    SWIG_fail_ptr("sp_foo_create",1,SWIGTYPE_p_p_sp_foo);
  }
  
  result = (int)sp_foo_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_foo_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_foo **arg1 = (sp_foo **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_foo_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_foo_destroy",1,"sp_foo **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_foo,0))){
    SWIG_fail_ptr("sp_foo_destroy",1,SWIGTYPE_p_p_sp_foo);
  }
  
  result = (int)sp_foo_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_foo_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_foo *arg2 = (sp_foo *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_foo_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_foo_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_foo_init",2,"sp_foo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_foo_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_foo,0))){
    SWIG_fail_ptr("sp_foo_init",2,SWIGTYPE_p_sp_foo);
  }
  
  result = (int)sp_foo_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_foo_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_foo *arg2 = (sp_foo *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_foo_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_foo_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_foo_compute",2,"sp_foo *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_foo_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_foo_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_foo_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_foo,0))){
    SWIG_fail_ptr("sp_foo_compute",2,SWIGTYPE_p_sp_foo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_foo_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_foo_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_foo_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fosc::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::amp",1,"sp_fosc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fosc::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_amp_set",1,SWIGTYPE_p_sp_fosc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fosc::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::amp",1,"sp_fosc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_amp_get",1,SWIGTYPE_p_sp_fosc);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fosc::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::freq",1,"sp_fosc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fosc::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_freq_set",1,SWIGTYPE_p_sp_fosc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fosc::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::freq",1,"sp_fosc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_freq_get",1,SWIGTYPE_p_sp_fosc);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_car_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fosc::car",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::car",1,"sp_fosc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fosc::car",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_car_set",1,SWIGTYPE_p_sp_fosc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->car = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_car_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fosc::car",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::car",1,"sp_fosc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_car_get",1,SWIGTYPE_p_sp_fosc);
  }
  
  result = (float) ((arg1)->car);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_mod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fosc::mod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::mod",1,"sp_fosc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fosc::mod",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_mod_set",1,SWIGTYPE_p_sp_fosc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->mod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_mod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fosc::mod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::mod",1,"sp_fosc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_mod_get",1,SWIGTYPE_p_sp_fosc);
  }
  
  result = (float) ((arg1)->mod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_indx_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fosc::indx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::indx",1,"sp_fosc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fosc::indx",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_indx_set",1,SWIGTYPE_p_sp_fosc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->indx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_indx_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fosc::indx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::indx",1,"sp_fosc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_indx_get",1,SWIGTYPE_p_sp_fosc);
  }
  
  result = (float) ((arg1)->indx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_iphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_fosc::iphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::iphs",1,"sp_fosc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_fosc::iphs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_iphs_set",1,SWIGTYPE_p_sp_fosc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_iphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_fosc::iphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::iphs",1,"sp_fosc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_iphs_get",1,SWIGTYPE_p_sp_fosc);
  }
  
  result = (float) ((arg1)->iphs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_mphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fosc::mphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::mphs",1,"sp_fosc *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fosc::mphs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_mphs_set",1,SWIGTYPE_p_sp_fosc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fosc_mphs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_mphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fosc::mphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::mphs",1,"sp_fosc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_mphs_get",1,SWIGTYPE_p_sp_fosc);
  }
  
  result =  ((arg1)->mphs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_cphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_fosc::cphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::cphs",1,"sp_fosc *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_fosc::cphs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_cphs_set",1,SWIGTYPE_p_sp_fosc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_fosc_cphs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->cphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_cphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_fosc::cphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::cphs",1,"sp_fosc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_cphs_get",1,SWIGTYPE_p_sp_fosc);
  }
  
  result =  ((arg1)->cphs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_ft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_fosc::ft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::ft",1,"sp_fosc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fosc::ft",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_ft_set",1,SWIGTYPE_p_sp_fosc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_fosc_ft_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_ft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *arg1 = (sp_fosc *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_fosc::ft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc::ft",1,"sp_fosc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_ft_get",1,SWIGTYPE_p_sp_fosc);
  }
  
  result = (sp_ftbl *) ((arg1)->ft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_fosc(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc *result = 0 ;
  
  SWIG_check_num_args("sp_fosc::sp_fosc",0,0)
  result = (sp_fosc *)new sp_fosc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fosc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_fosc(void *obj) {
sp_fosc *arg1 = (sp_fosc *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_fosc(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_fosc);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_fosc_attributes[] = {
    { "amp", _wrap_sp_fosc_amp_get, _wrap_sp_fosc_amp_set },
    { "freq", _wrap_sp_fosc_freq_get, _wrap_sp_fosc_freq_set },
    { "car", _wrap_sp_fosc_car_get, _wrap_sp_fosc_car_set },
    { "mod", _wrap_sp_fosc_mod_get, _wrap_sp_fosc_mod_set },
    { "indx", _wrap_sp_fosc_indx_get, _wrap_sp_fosc_indx_set },
    { "iphs", _wrap_sp_fosc_iphs_get, _wrap_sp_fosc_iphs_set },
    { "mphs", _wrap_sp_fosc_mphs_get, _wrap_sp_fosc_mphs_set },
    { "cphs", _wrap_sp_fosc_cphs_get, _wrap_sp_fosc_cphs_set },
    { "ft", _wrap_sp_fosc_ft_get, _wrap_sp_fosc_ft_set },
    {0,0,0}
};
static swig_lua_method swig_sp_fosc_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_fosc_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_fosc_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_fosc_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_fosc_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_fosc_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_fosc_Sf_SwigStatic = {
    "sp_fosc",
    swig_sp_fosc_Sf_SwigStatic_methods,
    swig_sp_fosc_Sf_SwigStatic_attributes,
    swig_sp_fosc_Sf_SwigStatic_constants,
    swig_sp_fosc_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_fosc_bases[] = {0};
static const char *swig_sp_fosc_base_names[] = {0};
static swig_lua_class _wrap_class_sp_fosc = { "sp_fosc", "sp_fosc", &SWIGTYPE_p_sp_fosc,_proxy__wrap_new_sp_fosc, swig_delete_sp_fosc, swig_sp_fosc_methods, swig_sp_fosc_attributes, &swig_sp_fosc_Sf_SwigStatic, swig_sp_fosc_meta, swig_sp_fosc_bases, swig_sp_fosc_base_names };

static int _wrap_sp_fosc_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc **arg1 = (sp_fosc **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fosc_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc_create",1,"sp_fosc **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_create",1,SWIGTYPE_p_p_sp_fosc);
  }
  
  result = (int)sp_fosc_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_fosc **arg1 = (sp_fosc **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fosc_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc_destroy",1,"sp_fosc **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_destroy",1,SWIGTYPE_p_p_sp_fosc);
  }
  
  result = (int)sp_fosc_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_fosc *arg2 = (sp_fosc *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fosc_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fosc_init",2,"sp_fosc *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_fosc_init",3,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_fosc_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_init",2,SWIGTYPE_p_sp_fosc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_fosc_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  result = (int)sp_fosc_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_fosc_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_fosc *arg2 = (sp_fosc *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_fosc_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_fosc_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_fosc_compute",2,"sp_fosc *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_fosc_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_fosc_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_fosc_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fosc,0))){
    SWIG_fail_ptr("sp_fosc_compute",2,SWIGTYPE_p_sp_fosc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_fosc_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_fosc_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_fosc_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_gbuzz::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::amp",1,"sp_gbuzz *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_gbuzz::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_amp_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_gbuzz::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::amp",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_amp_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_gbuzz::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::freq",1,"sp_gbuzz *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_gbuzz::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_freq_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_gbuzz::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::freq",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_freq_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_nharm_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_gbuzz::nharm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::nharm",1,"sp_gbuzz *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_gbuzz::nharm",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_nharm_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->nharm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_nharm_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_gbuzz::nharm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::nharm",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_nharm_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (float) ((arg1)->nharm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_lharm_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_gbuzz::lharm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::lharm",1,"sp_gbuzz *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_gbuzz::lharm",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_lharm_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lharm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_lharm_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_gbuzz::lharm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::lharm",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_lharm_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (float) ((arg1)->lharm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_mul_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_gbuzz::mul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::mul",1,"sp_gbuzz *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_gbuzz::mul",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_mul_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->mul = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_mul_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_gbuzz::mul",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::mul",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_mul_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (float) ((arg1)->mul);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_iphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_gbuzz::iphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::iphs",1,"sp_gbuzz *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_gbuzz::iphs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_iphs_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_iphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_gbuzz::iphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::iphs",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_iphs_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (float) ((arg1)->iphs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_ampcod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  int16_t arg2 ;
  int16_t *argp2 ;
  
  SWIG_check_num_args("sp_gbuzz::ampcod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::ampcod",1,"sp_gbuzz *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_gbuzz::ampcod",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_ampcod_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int16_t,0))){
    SWIG_fail_ptr("sp_gbuzz_ampcod_set",2,SWIGTYPE_p_int16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->ampcod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_ampcod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("sp_gbuzz::ampcod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::ampcod",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_ampcod_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result =  ((arg1)->ampcod);
  {
    int16_t * resultptr = new int16_t((const int16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_cpscod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  int16_t arg2 ;
  int16_t *argp2 ;
  
  SWIG_check_num_args("sp_gbuzz::cpscod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::cpscod",1,"sp_gbuzz *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_gbuzz::cpscod",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_cpscod_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int16_t,0))){
    SWIG_fail_ptr("sp_gbuzz_cpscod_set",2,SWIGTYPE_p_int16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->cpscod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_cpscod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("sp_gbuzz::cpscod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::cpscod",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_cpscod_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result =  ((arg1)->cpscod);
  {
    int16_t * resultptr = new int16_t((const int16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_prvn_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  int16_t arg2 ;
  int16_t *argp2 ;
  
  SWIG_check_num_args("sp_gbuzz::prvn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::prvn",1,"sp_gbuzz *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_gbuzz::prvn",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_prvn_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int16_t,0))){
    SWIG_fail_ptr("sp_gbuzz_prvn_set",2,SWIGTYPE_p_int16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prvn = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_prvn_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("sp_gbuzz::prvn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::prvn",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_prvn_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result =  ((arg1)->prvn);
  {
    int16_t * resultptr = new int16_t((const int16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_prvr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_gbuzz::prvr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::prvr",1,"sp_gbuzz *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_gbuzz::prvr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_prvr_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prvr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_prvr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_gbuzz::prvr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::prvr",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_prvr_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (float) ((arg1)->prvr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_twor_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_gbuzz::twor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::twor",1,"sp_gbuzz *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_gbuzz::twor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_twor_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->twor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_twor_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_gbuzz::twor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::twor",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_twor_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (float) ((arg1)->twor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_rsqp1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_gbuzz::rsqp1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::rsqp1",1,"sp_gbuzz *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_gbuzz::rsqp1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_rsqp1_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rsqp1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_rsqp1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_gbuzz::rsqp1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::rsqp1",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_rsqp1_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (float) ((arg1)->rsqp1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_rtn_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_gbuzz::rtn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::rtn",1,"sp_gbuzz *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_gbuzz::rtn",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_rtn_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rtn = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_rtn_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_gbuzz::rtn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::rtn",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_rtn_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (float) ((arg1)->rtn);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_rtnp1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_gbuzz::rtnp1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::rtnp1",1,"sp_gbuzz *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_gbuzz::rtnp1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_rtnp1_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rtnp1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_rtnp1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_gbuzz::rtnp1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::rtnp1",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_rtnp1_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (float) ((arg1)->rtnp1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_rsumr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_gbuzz::rsumr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::rsumr",1,"sp_gbuzz *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_gbuzz::rsumr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_rsumr_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rsumr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_rsumr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_gbuzz::rsumr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::rsumr",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_rsumr_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (float) ((arg1)->rsumr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_lphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_gbuzz::lphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::lphs",1,"sp_gbuzz *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_gbuzz::lphs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_lphs_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_gbuzz_lphs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->lphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_lphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_gbuzz::lphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::lphs",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_lphs_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result =  ((arg1)->lphs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_reported_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_gbuzz::reported",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::reported",1,"sp_gbuzz *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_gbuzz::reported",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_reported_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->reported = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_reported_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_gbuzz::reported",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::reported",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_reported_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (int) ((arg1)->reported);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_last_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_gbuzz::last",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::last",1,"sp_gbuzz *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_gbuzz::last",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_last_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->last = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_last_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_gbuzz::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::last",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_last_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (float) ((arg1)->last);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_ft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_gbuzz::ft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::ft",1,"sp_gbuzz *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gbuzz::ft",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_ft_set",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_gbuzz_ft_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_ft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *arg1 = (sp_gbuzz *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_gbuzz::ft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz::ft",1,"sp_gbuzz *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_ft_get",1,SWIGTYPE_p_sp_gbuzz);
  }
  
  result = (sp_ftbl *) ((arg1)->ft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_gbuzz(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz *result = 0 ;
  
  SWIG_check_num_args("sp_gbuzz::sp_gbuzz",0,0)
  result = (sp_gbuzz *)new sp_gbuzz();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_gbuzz,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_gbuzz(void *obj) {
sp_gbuzz *arg1 = (sp_gbuzz *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_gbuzz(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_gbuzz);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_gbuzz_attributes[] = {
    { "amp", _wrap_sp_gbuzz_amp_get, _wrap_sp_gbuzz_amp_set },
    { "freq", _wrap_sp_gbuzz_freq_get, _wrap_sp_gbuzz_freq_set },
    { "nharm", _wrap_sp_gbuzz_nharm_get, _wrap_sp_gbuzz_nharm_set },
    { "lharm", _wrap_sp_gbuzz_lharm_get, _wrap_sp_gbuzz_lharm_set },
    { "mul", _wrap_sp_gbuzz_mul_get, _wrap_sp_gbuzz_mul_set },
    { "iphs", _wrap_sp_gbuzz_iphs_get, _wrap_sp_gbuzz_iphs_set },
    { "ampcod", _wrap_sp_gbuzz_ampcod_get, _wrap_sp_gbuzz_ampcod_set },
    { "cpscod", _wrap_sp_gbuzz_cpscod_get, _wrap_sp_gbuzz_cpscod_set },
    { "prvn", _wrap_sp_gbuzz_prvn_get, _wrap_sp_gbuzz_prvn_set },
    { "prvr", _wrap_sp_gbuzz_prvr_get, _wrap_sp_gbuzz_prvr_set },
    { "twor", _wrap_sp_gbuzz_twor_get, _wrap_sp_gbuzz_twor_set },
    { "rsqp1", _wrap_sp_gbuzz_rsqp1_get, _wrap_sp_gbuzz_rsqp1_set },
    { "rtn", _wrap_sp_gbuzz_rtn_get, _wrap_sp_gbuzz_rtn_set },
    { "rtnp1", _wrap_sp_gbuzz_rtnp1_get, _wrap_sp_gbuzz_rtnp1_set },
    { "rsumr", _wrap_sp_gbuzz_rsumr_get, _wrap_sp_gbuzz_rsumr_set },
    { "lphs", _wrap_sp_gbuzz_lphs_get, _wrap_sp_gbuzz_lphs_set },
    { "reported", _wrap_sp_gbuzz_reported_get, _wrap_sp_gbuzz_reported_set },
    { "last", _wrap_sp_gbuzz_last_get, _wrap_sp_gbuzz_last_set },
    { "ft", _wrap_sp_gbuzz_ft_get, _wrap_sp_gbuzz_ft_set },
    {0,0,0}
};
static swig_lua_method swig_sp_gbuzz_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_gbuzz_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_gbuzz_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_gbuzz_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_gbuzz_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_gbuzz_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_gbuzz_Sf_SwigStatic = {
    "sp_gbuzz",
    swig_sp_gbuzz_Sf_SwigStatic_methods,
    swig_sp_gbuzz_Sf_SwigStatic_attributes,
    swig_sp_gbuzz_Sf_SwigStatic_constants,
    swig_sp_gbuzz_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_gbuzz_bases[] = {0};
static const char *swig_sp_gbuzz_base_names[] = {0};
static swig_lua_class _wrap_class_sp_gbuzz = { "sp_gbuzz", "sp_gbuzz", &SWIGTYPE_p_sp_gbuzz,_proxy__wrap_new_sp_gbuzz, swig_delete_sp_gbuzz, swig_sp_gbuzz_methods, swig_sp_gbuzz_attributes, &swig_sp_gbuzz_Sf_SwigStatic, swig_sp_gbuzz_meta, swig_sp_gbuzz_bases, swig_sp_gbuzz_base_names };

static int _wrap_sp_gbuzz_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz **arg1 = (sp_gbuzz **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_gbuzz_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz_create",1,"sp_gbuzz **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_create",1,SWIGTYPE_p_p_sp_gbuzz);
  }
  
  result = (int)sp_gbuzz_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_gbuzz **arg1 = (sp_gbuzz **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_gbuzz_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz_destroy",1,"sp_gbuzz **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_destroy",1,SWIGTYPE_p_p_sp_gbuzz);
  }
  
  result = (int)sp_gbuzz_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_gbuzz *arg2 = (sp_gbuzz *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  float arg4 ;
  int result;
  
  SWIG_check_num_args("sp_gbuzz_init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gbuzz_init",2,"sp_gbuzz *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_gbuzz_init",3,"sp_ftbl *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("sp_gbuzz_init",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_gbuzz_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_init",2,SWIGTYPE_p_sp_gbuzz);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gbuzz_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  result = (int)sp_gbuzz_init(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gbuzz_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_gbuzz *arg2 = (sp_gbuzz *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_gbuzz_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gbuzz_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gbuzz_compute",2,"sp_gbuzz *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_gbuzz_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_gbuzz_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_gbuzz_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_gbuzz,0))){
    SWIG_fail_ptr("sp_gbuzz_compute",2,SWIGTYPE_p_sp_gbuzz);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_gbuzz_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_gbuzz_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_gbuzz_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_hilbert_xnm1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_hilbert *arg1 = (sp_hilbert *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_hilbert::xnm1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_hilbert::xnm1",1,"sp_hilbert *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_hilbert::xnm1",2,"float [12]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_hilbert,0))){
    SWIG_fail_ptr("sp_hilbert_xnm1_set",1,SWIGTYPE_p_sp_hilbert);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_hilbert_xnm1_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->xnm1;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_hilbert_xnm1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_hilbert *arg1 = (sp_hilbert *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_hilbert::xnm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_hilbert::xnm1",1,"sp_hilbert *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_hilbert,0))){
    SWIG_fail_ptr("sp_hilbert_xnm1_get",1,SWIGTYPE_p_sp_hilbert);
  }
  
  result = (float *)(float *) ((arg1)->xnm1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_hilbert_ynm1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_hilbert *arg1 = (sp_hilbert *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_hilbert::ynm1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_hilbert::ynm1",1,"sp_hilbert *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_hilbert::ynm1",2,"float [12]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_hilbert,0))){
    SWIG_fail_ptr("sp_hilbert_ynm1_set",1,SWIGTYPE_p_sp_hilbert);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_hilbert_ynm1_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->ynm1;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_hilbert_ynm1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_hilbert *arg1 = (sp_hilbert *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_hilbert::ynm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_hilbert::ynm1",1,"sp_hilbert *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_hilbert,0))){
    SWIG_fail_ptr("sp_hilbert_ynm1_get",1,SWIGTYPE_p_sp_hilbert);
  }
  
  result = (float *)(float *) ((arg1)->ynm1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_hilbert_coef_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_hilbert *arg1 = (sp_hilbert *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_hilbert::coef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_hilbert::coef",1,"sp_hilbert *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_hilbert::coef",2,"float [12]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_hilbert,0))){
    SWIG_fail_ptr("sp_hilbert_coef_set",1,SWIGTYPE_p_sp_hilbert);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_hilbert_coef_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->coef;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_hilbert_coef_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_hilbert *arg1 = (sp_hilbert *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_hilbert::coef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_hilbert::coef",1,"sp_hilbert *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_hilbert,0))){
    SWIG_fail_ptr("sp_hilbert_coef_get",1,SWIGTYPE_p_sp_hilbert);
  }
  
  result = (float *)(float *) ((arg1)->coef);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_hilbert(lua_State* L) {
  int SWIG_arg = 0;
  sp_hilbert *result = 0 ;
  
  SWIG_check_num_args("sp_hilbert::sp_hilbert",0,0)
  result = (sp_hilbert *)new sp_hilbert();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_hilbert,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_hilbert(void *obj) {
sp_hilbert *arg1 = (sp_hilbert *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_hilbert(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_hilbert);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_hilbert_attributes[] = {
    { "xnm1", _wrap_sp_hilbert_xnm1_get, _wrap_sp_hilbert_xnm1_set },
    { "ynm1", _wrap_sp_hilbert_ynm1_get, _wrap_sp_hilbert_ynm1_set },
    { "coef", _wrap_sp_hilbert_coef_get, _wrap_sp_hilbert_coef_set },
    {0,0,0}
};
static swig_lua_method swig_sp_hilbert_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_hilbert_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_hilbert_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_hilbert_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_hilbert_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_hilbert_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_hilbert_Sf_SwigStatic = {
    "sp_hilbert",
    swig_sp_hilbert_Sf_SwigStatic_methods,
    swig_sp_hilbert_Sf_SwigStatic_attributes,
    swig_sp_hilbert_Sf_SwigStatic_constants,
    swig_sp_hilbert_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_hilbert_bases[] = {0};
static const char *swig_sp_hilbert_base_names[] = {0};
static swig_lua_class _wrap_class_sp_hilbert = { "sp_hilbert", "sp_hilbert", &SWIGTYPE_p_sp_hilbert,_proxy__wrap_new_sp_hilbert, swig_delete_sp_hilbert, swig_sp_hilbert_methods, swig_sp_hilbert_attributes, &swig_sp_hilbert_Sf_SwigStatic, swig_sp_hilbert_meta, swig_sp_hilbert_bases, swig_sp_hilbert_base_names };

static int _wrap_sp_hilbert_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_hilbert **arg1 = (sp_hilbert **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_hilbert_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_hilbert_create",1,"sp_hilbert **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_hilbert,0))){
    SWIG_fail_ptr("sp_hilbert_create",1,SWIGTYPE_p_p_sp_hilbert);
  }
  
  result = (int)sp_hilbert_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_hilbert_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_hilbert **arg1 = (sp_hilbert **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_hilbert_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_hilbert_destroy",1,"sp_hilbert **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_hilbert,0))){
    SWIG_fail_ptr("sp_hilbert_destroy",1,SWIGTYPE_p_p_sp_hilbert);
  }
  
  result = (int)sp_hilbert_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_hilbert_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_hilbert *arg2 = (sp_hilbert *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_hilbert_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_hilbert_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_hilbert_init",2,"sp_hilbert *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_hilbert_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_hilbert,0))){
    SWIG_fail_ptr("sp_hilbert_init",2,SWIGTYPE_p_sp_hilbert);
  }
  
  result = (int)sp_hilbert_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_hilbert_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_hilbert *arg2 = (sp_hilbert *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_hilbert_compute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_hilbert_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_hilbert_compute",2,"sp_hilbert *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_hilbert_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_hilbert_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_hilbert_compute",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_hilbert_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_hilbert,0))){
    SWIG_fail_ptr("sp_hilbert_compute",2,SWIGTYPE_p_sp_hilbert);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_hilbert_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_hilbert_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_hilbert_compute",5,SWIGTYPE_p_float);
  }
  
  result = (int)sp_hilbert_compute(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_in_fp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_in *arg1 = (sp_in *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  SWIG_check_num_args("sp_in::fp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_in::fp",1,"sp_in *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_in::fp",2,"FILE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_in,0))){
    SWIG_fail_ptr("sp_in_fp_set",1,SWIGTYPE_p_sp_in);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_in_fp_set",2,SWIGTYPE_p_FILE);
  }
  
  if (arg1) (arg1)->fp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_in_fp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_in *arg1 = (sp_in *) 0 ;
  FILE *result = 0 ;
  
  SWIG_check_num_args("sp_in::fp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_in::fp",1,"sp_in *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_in,0))){
    SWIG_fail_ptr("sp_in_fp_get",1,SWIGTYPE_p_sp_in);
  }
  
  result = (FILE *) ((arg1)->fp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FILE,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_in(lua_State* L) {
  int SWIG_arg = 0;
  sp_in *result = 0 ;
  
  SWIG_check_num_args("sp_in::sp_in",0,0)
  result = (sp_in *)new sp_in();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_in,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_in(void *obj) {
sp_in *arg1 = (sp_in *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_in(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_in);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_in_attributes[] = {
    { "fp", _wrap_sp_in_fp_get, _wrap_sp_in_fp_set },
    {0,0,0}
};
static swig_lua_method swig_sp_in_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_in_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_in_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_in_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_in_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_in_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_in_Sf_SwigStatic = {
    "sp_in",
    swig_sp_in_Sf_SwigStatic_methods,
    swig_sp_in_Sf_SwigStatic_attributes,
    swig_sp_in_Sf_SwigStatic_constants,
    swig_sp_in_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_in_bases[] = {0};
static const char *swig_sp_in_base_names[] = {0};
static swig_lua_class _wrap_class_sp_in = { "sp_in", "sp_in", &SWIGTYPE_p_sp_in,_proxy__wrap_new_sp_in, swig_delete_sp_in, swig_sp_in_methods, swig_sp_in_attributes, &swig_sp_in_Sf_SwigStatic, swig_sp_in_meta, swig_sp_in_bases, swig_sp_in_base_names };

static int _wrap_sp_in_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_in **arg1 = (sp_in **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_in_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_in_create",1,"sp_in **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_in,0))){
    SWIG_fail_ptr("sp_in_create",1,SWIGTYPE_p_p_sp_in);
  }
  
  result = (int)sp_in_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_in_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_in **arg1 = (sp_in **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_in_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_in_destroy",1,"sp_in **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_in,0))){
    SWIG_fail_ptr("sp_in_destroy",1,SWIGTYPE_p_p_sp_in);
  }
  
  result = (int)sp_in_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_in_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_in *arg2 = (sp_in *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_in_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_in_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_in_init",2,"sp_in *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_in_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_in,0))){
    SWIG_fail_ptr("sp_in_init",2,SWIGTYPE_p_sp_in);
  }
  
  result = (int)sp_in_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_in_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_in *arg2 = (sp_in *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_in_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_in_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_in_compute",2,"sp_in *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_in_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_in_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_in_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_in,0))){
    SWIG_fail_ptr("sp_in_compute",2,SWIGTYPE_p_sp_in);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_in_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_in_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_in_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_incr_step_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_incr *arg1 = (sp_incr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_incr::step",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_incr::step",1,"sp_incr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_incr::step",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_incr,0))){
    SWIG_fail_ptr("sp_incr_step_set",1,SWIGTYPE_p_sp_incr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->step = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_incr_step_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_incr *arg1 = (sp_incr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_incr::step",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_incr::step",1,"sp_incr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_incr,0))){
    SWIG_fail_ptr("sp_incr_step_get",1,SWIGTYPE_p_sp_incr);
  }
  
  result = (float) ((arg1)->step);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_incr_min_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_incr *arg1 = (sp_incr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_incr::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_incr::min",1,"sp_incr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_incr::min",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_incr,0))){
    SWIG_fail_ptr("sp_incr_min_set",1,SWIGTYPE_p_sp_incr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->min = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_incr_min_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_incr *arg1 = (sp_incr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_incr::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_incr::min",1,"sp_incr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_incr,0))){
    SWIG_fail_ptr("sp_incr_min_get",1,SWIGTYPE_p_sp_incr);
  }
  
  result = (float) ((arg1)->min);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_incr_max_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_incr *arg1 = (sp_incr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_incr::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_incr::max",1,"sp_incr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_incr::max",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_incr,0))){
    SWIG_fail_ptr("sp_incr_max_set",1,SWIGTYPE_p_sp_incr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_incr_max_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_incr *arg1 = (sp_incr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_incr::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_incr::max",1,"sp_incr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_incr,0))){
    SWIG_fail_ptr("sp_incr_max_get",1,SWIGTYPE_p_sp_incr);
  }
  
  result = (float) ((arg1)->max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_incr_val_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_incr *arg1 = (sp_incr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_incr::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_incr::val",1,"sp_incr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_incr::val",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_incr,0))){
    SWIG_fail_ptr("sp_incr_val_set",1,SWIGTYPE_p_sp_incr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_incr_val_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_incr *arg1 = (sp_incr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_incr::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_incr::val",1,"sp_incr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_incr,0))){
    SWIG_fail_ptr("sp_incr_val_get",1,SWIGTYPE_p_sp_incr);
  }
  
  result = (float) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_incr(lua_State* L) {
  int SWIG_arg = 0;
  sp_incr *result = 0 ;
  
  SWIG_check_num_args("sp_incr::sp_incr",0,0)
  result = (sp_incr *)new sp_incr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_incr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_incr(void *obj) {
sp_incr *arg1 = (sp_incr *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_incr(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_incr);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_incr_attributes[] = {
    { "step", _wrap_sp_incr_step_get, _wrap_sp_incr_step_set },
    { "min", _wrap_sp_incr_min_get, _wrap_sp_incr_min_set },
    { "max", _wrap_sp_incr_max_get, _wrap_sp_incr_max_set },
    { "val", _wrap_sp_incr_val_get, _wrap_sp_incr_val_set },
    {0,0,0}
};
static swig_lua_method swig_sp_incr_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_incr_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_incr_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_incr_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_incr_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_incr_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_incr_Sf_SwigStatic = {
    "sp_incr",
    swig_sp_incr_Sf_SwigStatic_methods,
    swig_sp_incr_Sf_SwigStatic_attributes,
    swig_sp_incr_Sf_SwigStatic_constants,
    swig_sp_incr_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_incr_bases[] = {0};
static const char *swig_sp_incr_base_names[] = {0};
static swig_lua_class _wrap_class_sp_incr = { "sp_incr", "sp_incr", &SWIGTYPE_p_sp_incr,_proxy__wrap_new_sp_incr, swig_delete_sp_incr, swig_sp_incr_methods, swig_sp_incr_attributes, &swig_sp_incr_Sf_SwigStatic, swig_sp_incr_meta, swig_sp_incr_bases, swig_sp_incr_base_names };

static int _wrap_sp_incr_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_incr **arg1 = (sp_incr **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_incr_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_incr_create",1,"sp_incr **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_incr,0))){
    SWIG_fail_ptr("sp_incr_create",1,SWIGTYPE_p_p_sp_incr);
  }
  
  result = (int)sp_incr_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_incr_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_incr **arg1 = (sp_incr **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_incr_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_incr_destroy",1,"sp_incr **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_incr,0))){
    SWIG_fail_ptr("sp_incr_destroy",1,SWIGTYPE_p_p_sp_incr);
  }
  
  result = (int)sp_incr_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_incr_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_incr *arg2 = (sp_incr *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("sp_incr_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_incr_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_incr_init",2,"sp_incr *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_incr_init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_incr_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_incr,0))){
    SWIG_fail_ptr("sp_incr_init",2,SWIGTYPE_p_sp_incr);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)sp_incr_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_incr_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_incr *arg2 = (sp_incr *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_incr_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_incr_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_incr_compute",2,"sp_incr *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_incr_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_incr_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_incr_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_incr,0))){
    SWIG_fail_ptr("sp_incr_compute",2,SWIGTYPE_p_sp_incr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_incr_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_incr_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_incr_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jcrev_ud_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_jcrev *arg1 = (sp_jcrev *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("sp_jcrev::ud",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jcrev::ud",1,"sp_jcrev *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_jcrev::ud",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jcrev,0))){
    SWIG_fail_ptr("sp_jcrev_ud_set",1,SWIGTYPE_p_sp_jcrev);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_jcrev_ud_set");
  if (arg1) (arg1)->ud = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jcrev_ud_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_jcrev *arg1 = (sp_jcrev *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("sp_jcrev::ud",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jcrev::ud",1,"sp_jcrev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jcrev,0))){
    SWIG_fail_ptr("sp_jcrev_ud_get",1,SWIGTYPE_p_sp_jcrev);
  }
  
  result = (void *) ((arg1)->ud);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_jcrev(lua_State* L) {
  int SWIG_arg = 0;
  sp_jcrev *result = 0 ;
  
  SWIG_check_num_args("sp_jcrev::sp_jcrev",0,0)
  result = (sp_jcrev *)new sp_jcrev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_jcrev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_jcrev(void *obj) {
sp_jcrev *arg1 = (sp_jcrev *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_jcrev(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_jcrev);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_jcrev_attributes[] = {
    { "ud", _wrap_sp_jcrev_ud_get, _wrap_sp_jcrev_ud_set },
    {0,0,0}
};
static swig_lua_method swig_sp_jcrev_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_jcrev_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_jcrev_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_jcrev_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_jcrev_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_jcrev_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_jcrev_Sf_SwigStatic = {
    "sp_jcrev",
    swig_sp_jcrev_Sf_SwigStatic_methods,
    swig_sp_jcrev_Sf_SwigStatic_attributes,
    swig_sp_jcrev_Sf_SwigStatic_constants,
    swig_sp_jcrev_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_jcrev_bases[] = {0};
static const char *swig_sp_jcrev_base_names[] = {0};
static swig_lua_class _wrap_class_sp_jcrev = { "sp_jcrev", "sp_jcrev", &SWIGTYPE_p_sp_jcrev,_proxy__wrap_new_sp_jcrev, swig_delete_sp_jcrev, swig_sp_jcrev_methods, swig_sp_jcrev_attributes, &swig_sp_jcrev_Sf_SwigStatic, swig_sp_jcrev_meta, swig_sp_jcrev_bases, swig_sp_jcrev_base_names };

static int _wrap_sp_jcrev_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_jcrev **arg1 = (sp_jcrev **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_jcrev_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jcrev_create",1,"sp_jcrev **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_jcrev,0))){
    SWIG_fail_ptr("sp_jcrev_create",1,SWIGTYPE_p_p_sp_jcrev);
  }
  
  result = (int)sp_jcrev_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jcrev_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_jcrev **arg1 = (sp_jcrev **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_jcrev_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jcrev_destroy",1,"sp_jcrev **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_jcrev,0))){
    SWIG_fail_ptr("sp_jcrev_destroy",1,SWIGTYPE_p_p_sp_jcrev);
  }
  
  result = (int)sp_jcrev_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jcrev_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_jcrev *arg2 = (sp_jcrev *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_jcrev_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jcrev_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_jcrev_init",2,"sp_jcrev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_jcrev_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_jcrev,0))){
    SWIG_fail_ptr("sp_jcrev_init",2,SWIGTYPE_p_sp_jcrev);
  }
  
  result = (int)sp_jcrev_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jcrev_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_jcrev *arg2 = (sp_jcrev *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_jcrev_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jcrev_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_jcrev_compute",2,"sp_jcrev *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_jcrev_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_jcrev_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_jcrev_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_jcrev,0))){
    SWIG_fail_ptr("sp_jcrev_compute",2,SWIGTYPE_p_sp_jcrev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_jcrev_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_jcrev_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_jcrev_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_jitter::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::amp",1,"sp_jitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_jitter::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_amp_set",1,SWIGTYPE_p_sp_jitter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_jitter::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::amp",1,"sp_jitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_amp_get",1,SWIGTYPE_p_sp_jitter);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_cpsMin_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_jitter::cpsMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::cpsMin",1,"sp_jitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_jitter::cpsMin",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_cpsMin_set",1,SWIGTYPE_p_sp_jitter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->cpsMin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_cpsMin_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_jitter::cpsMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::cpsMin",1,"sp_jitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_cpsMin_get",1,SWIGTYPE_p_sp_jitter);
  }
  
  result = (float) ((arg1)->cpsMin);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_cpsMax_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_jitter::cpsMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::cpsMax",1,"sp_jitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_jitter::cpsMax",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_cpsMax_set",1,SWIGTYPE_p_sp_jitter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->cpsMax = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_cpsMax_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_jitter::cpsMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::cpsMax",1,"sp_jitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_cpsMax_get",1,SWIGTYPE_p_sp_jitter);
  }
  
  result = (float) ((arg1)->cpsMax);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_cps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_jitter::cps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::cps",1,"sp_jitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_jitter::cps",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_cps_set",1,SWIGTYPE_p_sp_jitter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->cps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_cps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_jitter::cps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::cps",1,"sp_jitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_cps_get",1,SWIGTYPE_p_sp_jitter);
  }
  
  result = (float) ((arg1)->cps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_phs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_jitter::phs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::phs",1,"sp_jitter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_jitter::phs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_phs_set",1,SWIGTYPE_p_sp_jitter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_jitter_phs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->phs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_phs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_jitter::phs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::phs",1,"sp_jitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_phs_get",1,SWIGTYPE_p_sp_jitter);
  }
  
  result =  ((arg1)->phs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_initflag_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_jitter::initflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::initflag",1,"sp_jitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_jitter::initflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_initflag_set",1,SWIGTYPE_p_sp_jitter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->initflag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_initflag_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_jitter::initflag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::initflag",1,"sp_jitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_initflag_get",1,SWIGTYPE_p_sp_jitter);
  }
  
  result = (int) ((arg1)->initflag);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_num1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_jitter::num1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::num1",1,"sp_jitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_jitter::num1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_num1_set",1,SWIGTYPE_p_sp_jitter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->num1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_num1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_jitter::num1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::num1",1,"sp_jitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_num1_get",1,SWIGTYPE_p_sp_jitter);
  }
  
  result = (float) ((arg1)->num1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_num2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_jitter::num2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::num2",1,"sp_jitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_jitter::num2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_num2_set",1,SWIGTYPE_p_sp_jitter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->num2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_num2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_jitter::num2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::num2",1,"sp_jitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_num2_get",1,SWIGTYPE_p_sp_jitter);
  }
  
  result = (float) ((arg1)->num2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_dfdmax_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_jitter::dfdmax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::dfdmax",1,"sp_jitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_jitter::dfdmax",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_dfdmax_set",1,SWIGTYPE_p_sp_jitter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dfdmax = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_dfdmax_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *arg1 = (sp_jitter *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_jitter::dfdmax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter::dfdmax",1,"sp_jitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_dfdmax_get",1,SWIGTYPE_p_sp_jitter);
  }
  
  result = (float) ((arg1)->dfdmax);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_jitter(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter *result = 0 ;
  
  SWIG_check_num_args("sp_jitter::sp_jitter",0,0)
  result = (sp_jitter *)new sp_jitter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_jitter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_jitter(void *obj) {
sp_jitter *arg1 = (sp_jitter *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_jitter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_jitter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_jitter_attributes[] = {
    { "amp", _wrap_sp_jitter_amp_get, _wrap_sp_jitter_amp_set },
    { "cpsMin", _wrap_sp_jitter_cpsMin_get, _wrap_sp_jitter_cpsMin_set },
    { "cpsMax", _wrap_sp_jitter_cpsMax_get, _wrap_sp_jitter_cpsMax_set },
    { "cps", _wrap_sp_jitter_cps_get, _wrap_sp_jitter_cps_set },
    { "phs", _wrap_sp_jitter_phs_get, _wrap_sp_jitter_phs_set },
    { "initflag", _wrap_sp_jitter_initflag_get, _wrap_sp_jitter_initflag_set },
    { "num1", _wrap_sp_jitter_num1_get, _wrap_sp_jitter_num1_set },
    { "num2", _wrap_sp_jitter_num2_get, _wrap_sp_jitter_num2_set },
    { "dfdmax", _wrap_sp_jitter_dfdmax_get, _wrap_sp_jitter_dfdmax_set },
    {0,0,0}
};
static swig_lua_method swig_sp_jitter_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_jitter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_jitter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_jitter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_jitter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_jitter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_jitter_Sf_SwigStatic = {
    "sp_jitter",
    swig_sp_jitter_Sf_SwigStatic_methods,
    swig_sp_jitter_Sf_SwigStatic_attributes,
    swig_sp_jitter_Sf_SwigStatic_constants,
    swig_sp_jitter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_jitter_bases[] = {0};
static const char *swig_sp_jitter_base_names[] = {0};
static swig_lua_class _wrap_class_sp_jitter = { "sp_jitter", "sp_jitter", &SWIGTYPE_p_sp_jitter,_proxy__wrap_new_sp_jitter, swig_delete_sp_jitter, swig_sp_jitter_methods, swig_sp_jitter_attributes, &swig_sp_jitter_Sf_SwigStatic, swig_sp_jitter_meta, swig_sp_jitter_bases, swig_sp_jitter_base_names };

static int _wrap_sp_jitter_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter **arg1 = (sp_jitter **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_jitter_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter_create",1,"sp_jitter **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_create",1,SWIGTYPE_p_p_sp_jitter);
  }
  
  result = (int)sp_jitter_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_jitter **arg1 = (sp_jitter **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_jitter_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter_destroy",1,"sp_jitter **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_destroy",1,SWIGTYPE_p_p_sp_jitter);
  }
  
  result = (int)sp_jitter_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_jitter *arg2 = (sp_jitter *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_jitter_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_jitter_init",2,"sp_jitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_jitter_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_init",2,SWIGTYPE_p_sp_jitter);
  }
  
  result = (int)sp_jitter_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_jitter_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_jitter *arg2 = (sp_jitter *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_jitter_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_jitter_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_jitter_compute",2,"sp_jitter *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_jitter_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_jitter_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_jitter_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_jitter,0))){
    SWIG_fail_ptr("sp_jitter_compute",2,SWIGTYPE_p_sp_jitter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_jitter_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_jitter_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_jitter_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_a_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_line::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::a",1,"sp_line *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_line::a",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_a_set",1,SWIGTYPE_p_sp_line);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_a_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_line::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::a",1,"sp_line *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_a_get",1,SWIGTYPE_p_sp_line);
  }
  
  result = (float) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_dur_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_line::dur",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::dur",1,"sp_line *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_line::dur",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_dur_set",1,SWIGTYPE_p_sp_line);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dur = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_dur_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_line::dur",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::dur",1,"sp_line *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_dur_get",1,SWIGTYPE_p_sp_line);
  }
  
  result = (float) ((arg1)->dur);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_b_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_line::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::b",1,"sp_line *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_line::b",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_b_set",1,SWIGTYPE_p_sp_line);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_b_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_line::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::b",1,"sp_line *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_b_get",1,SWIGTYPE_p_sp_line);
  }
  
  result = (float) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_val_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_line::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::val",1,"sp_line *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_line::val",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_val_set",1,SWIGTYPE_p_sp_line);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_val_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_line::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::val",1,"sp_line *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_val_get",1,SWIGTYPE_p_sp_line);
  }
  
  result = (float) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_incr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_line::incr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::incr",1,"sp_line *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_line::incr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_incr_set",1,SWIGTYPE_p_sp_line);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->incr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_incr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_line::incr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::incr",1,"sp_line *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_incr_get",1,SWIGTYPE_p_sp_line);
  }
  
  result = (float) ((arg1)->incr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_sdur_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_line::sdur",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::sdur",1,"sp_line *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_line::sdur",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_sdur_set",1,SWIGTYPE_p_sp_line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_line_sdur_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->sdur = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_sdur_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_line::sdur",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::sdur",1,"sp_line *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_sdur_get",1,SWIGTYPE_p_sp_line);
  }
  
  result =  ((arg1)->sdur);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_stime_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_line::stime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::stime",1,"sp_line *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_line::stime",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_stime_set",1,SWIGTYPE_p_sp_line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_line_stime_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->stime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_stime_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_line::stime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::stime",1,"sp_line *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_stime_get",1,SWIGTYPE_p_sp_line);
  }
  
  result =  ((arg1)->stime);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_init_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_line::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::init",1,"sp_line *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_line::init",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_init_set",1,SWIGTYPE_p_sp_line);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->init = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_init_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *arg1 = (sp_line *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_line::init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line::init",1,"sp_line *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_init_get",1,SWIGTYPE_p_sp_line);
  }
  
  result = (int) ((arg1)->init);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_line(lua_State* L) {
  int SWIG_arg = 0;
  sp_line *result = 0 ;
  
  SWIG_check_num_args("sp_line::sp_line",0,0)
  result = (sp_line *)new sp_line();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_line,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_line(void *obj) {
sp_line *arg1 = (sp_line *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_line(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_line);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_line_attributes[] = {
    { "a", _wrap_sp_line_a_get, _wrap_sp_line_a_set },
    { "dur", _wrap_sp_line_dur_get, _wrap_sp_line_dur_set },
    { "b", _wrap_sp_line_b_get, _wrap_sp_line_b_set },
    { "val", _wrap_sp_line_val_get, _wrap_sp_line_val_set },
    { "incr", _wrap_sp_line_incr_get, _wrap_sp_line_incr_set },
    { "sdur", _wrap_sp_line_sdur_get, _wrap_sp_line_sdur_set },
    { "stime", _wrap_sp_line_stime_get, _wrap_sp_line_stime_set },
    { "init", _wrap_sp_line_init_get, _wrap_sp_line_init_set },
    {0,0,0}
};
static swig_lua_method swig_sp_line_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_line_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_line_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_line_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_line_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_line_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_line_Sf_SwigStatic = {
    "sp_line",
    swig_sp_line_Sf_SwigStatic_methods,
    swig_sp_line_Sf_SwigStatic_attributes,
    swig_sp_line_Sf_SwigStatic_constants,
    swig_sp_line_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_line_bases[] = {0};
static const char *swig_sp_line_base_names[] = {0};
static swig_lua_class _wrap_class_sp_line = { "sp_line", "sp_line", &SWIGTYPE_p_sp_line,_proxy__wrap_new_sp_line, swig_delete_sp_line, swig_sp_line_methods, swig_sp_line_attributes, &swig_sp_line_Sf_SwigStatic, swig_sp_line_meta, swig_sp_line_bases, swig_sp_line_base_names };

static int _wrap_sp_line_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_line **arg1 = (sp_line **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_line_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line_create",1,"sp_line **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_create",1,SWIGTYPE_p_p_sp_line);
  }
  
  result = (int)sp_line_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_line **arg1 = (sp_line **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_line_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line_destroy",1,"sp_line **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_destroy",1,SWIGTYPE_p_p_sp_line);
  }
  
  result = (int)sp_line_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_line *arg2 = (sp_line *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_line_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_line_init",2,"sp_line *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_line_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_init",2,SWIGTYPE_p_sp_line);
  }
  
  result = (int)sp_line_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_line_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_line *arg2 = (sp_line *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_line_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_line_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_line_compute",2,"sp_line *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_line_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_line_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_line_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_line,0))){
    SWIG_fail_ptr("sp_line_compute",2,SWIGTYPE_p_sp_line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_line_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_line_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_line_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_e_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  openlpc_e_state *arg2 = (openlpc_e_state *) 0 ;
  
  SWIG_check_num_args("sp_lpc::e",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::e",1,"sp_lpc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpc::e",2,"openlpc_e_state *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_e_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_openlpc_e_state,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_lpc_e_set",2,SWIGTYPE_p_openlpc_e_state);
  }
  
  if (arg1) (arg1)->e = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_e_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  openlpc_e_state *result = 0 ;
  
  SWIG_check_num_args("sp_lpc::e",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::e",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_e_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (openlpc_e_state *) ((arg1)->e);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_openlpc_e_state,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_d_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  openlpc_d_state *arg2 = (openlpc_d_state *) 0 ;
  
  SWIG_check_num_args("sp_lpc::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::d",1,"sp_lpc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpc::d",2,"openlpc_d_state *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_d_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_openlpc_d_state,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_lpc_d_set",2,SWIGTYPE_p_openlpc_d_state);
  }
  
  if (arg1) (arg1)->d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_d_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  openlpc_d_state *result = 0 ;
  
  SWIG_check_num_args("sp_lpc::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::d",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_d_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (openlpc_d_state *) ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_openlpc_d_state,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_counter_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_lpc::counter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::counter",1,"sp_lpc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpc::counter",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_counter_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->counter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_counter_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_lpc::counter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::counter",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_counter_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (int) ((arg1)->counter);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_c_in_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  short *arg2 = (short *) 0 ;
  
  SWIG_check_num_args("sp_lpc::in",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::in",1,"sp_lpc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpc::in",2,"short *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_c_in_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_short,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_lpc_c_in_set",2,SWIGTYPE_p_short);
  }
  
  if (arg1) (arg1)->in = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_c_in_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("sp_lpc::in",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::in",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_c_in_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (short *) ((arg1)->in);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_out_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  short *arg2 = (short *) 0 ;
  
  SWIG_check_num_args("sp_lpc::out",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::out",1,"sp_lpc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpc::out",2,"short *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_out_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_short,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_lpc_out_set",2,SWIGTYPE_p_short);
  }
  
  if (arg1) (arg1)->out = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_out_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("sp_lpc::out",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::out",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_out_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (short *) ((arg1)->out);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_data_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  unsigned char *arg2 ;
  
  SWIG_check_num_args("sp_lpc::data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::data",1,"sp_lpc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpc::data",2,"unsigned char [7]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_data_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("sp_lpc_data_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->data;
    for (ii = 0; ii < (size_t)7; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_data_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("sp_lpc::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::data",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_data_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (unsigned char *)(unsigned char *) ((arg1)->data);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_y_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_lpc::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::y",1,"sp_lpc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpc::y",2,"float [7]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_y_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_lpc_y_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->y;
    for (ii = 0; ii < (size_t)7; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_y_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_lpc::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::y",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_y_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (float *)(float *) ((arg1)->y);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_smooth_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_lpc::smooth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::smooth",1,"sp_lpc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpc::smooth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_smooth_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->smooth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_smooth_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_lpc::smooth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::smooth",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_smooth_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (float) ((arg1)->smooth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_samp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_lpc::samp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::samp",1,"sp_lpc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpc::samp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_samp_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->samp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_samp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_lpc::samp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::samp",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_samp_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (float) ((arg1)->samp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_clock_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("sp_lpc::clock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::clock",1,"sp_lpc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpc::clock",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_clock_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->clock = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_clock_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("sp_lpc::clock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::clock",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_clock_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (unsigned int) ((arg1)->clock);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_block_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("sp_lpc::block",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::block",1,"sp_lpc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpc::block",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_block_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->block = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_block_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("sp_lpc::block",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::block",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_block_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (unsigned int) ((arg1)->block);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_framesize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_lpc::framesize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::framesize",1,"sp_lpc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpc::framesize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_framesize_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->framesize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_framesize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_lpc::framesize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::framesize",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_framesize_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (int) ((arg1)->framesize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_m_in_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_lpc::m_in",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::m_in",1,"sp_lpc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpc::m_in",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_m_in_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_lpc_m_in_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->m_in = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_m_in_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_lpc::m_in",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::m_in",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_m_in_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (sp_auxdata *)& ((arg1)->m_in);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_m_out_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_lpc::m_out",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::m_out",1,"sp_lpc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpc::m_out",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_m_out_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_lpc_m_out_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->m_out = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_m_out_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_lpc::m_out",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::m_out",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_m_out_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (sp_auxdata *)& ((arg1)->m_out);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_m_e_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_lpc::m_e",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::m_e",1,"sp_lpc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpc::m_e",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_m_e_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_lpc_m_e_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->m_e = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_m_e_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_lpc::m_e",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::m_e",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_m_e_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (sp_auxdata *)& ((arg1)->m_e);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_m_d_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_lpc::m_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::m_d",1,"sp_lpc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpc::m_d",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_m_d_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_lpc_m_d_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->m_d = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_m_d_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_lpc::m_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::m_d",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_m_d_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (sp_auxdata *)& ((arg1)->m_d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_lpc::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::mode",1,"sp_lpc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpc::mode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_mode_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_lpc::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::mode",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_mode_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (int) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_ft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_lpc::ft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::ft",1,"sp_lpc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpc::ft",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_ft_set",1,SWIGTYPE_p_sp_lpc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_lpc_ft_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_ft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *arg1 = (sp_lpc *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_lpc::ft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc::ft",1,"sp_lpc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_ft_get",1,SWIGTYPE_p_sp_lpc);
  }
  
  result = (sp_ftbl *) ((arg1)->ft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_lpc(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc *result = 0 ;
  
  SWIG_check_num_args("sp_lpc::sp_lpc",0,0)
  result = (sp_lpc *)new sp_lpc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_lpc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_lpc(void *obj) {
sp_lpc *arg1 = (sp_lpc *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_lpc(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_lpc);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_lpc_attributes[] = {
    { "e", _wrap_sp_lpc_e_get, _wrap_sp_lpc_e_set },
    { "d", _wrap_sp_lpc_d_get, _wrap_sp_lpc_d_set },
    { "counter", _wrap_sp_lpc_counter_get, _wrap_sp_lpc_counter_set },
    { "c_in", _wrap_sp_lpc_c_in_get, _wrap_sp_lpc_c_in_set },
    { "out", _wrap_sp_lpc_out_get, _wrap_sp_lpc_out_set },
    { "data", _wrap_sp_lpc_data_get, _wrap_sp_lpc_data_set },
    { "y", _wrap_sp_lpc_y_get, _wrap_sp_lpc_y_set },
    { "smooth", _wrap_sp_lpc_smooth_get, _wrap_sp_lpc_smooth_set },
    { "samp", _wrap_sp_lpc_samp_get, _wrap_sp_lpc_samp_set },
    { "clock", _wrap_sp_lpc_clock_get, _wrap_sp_lpc_clock_set },
    { "block", _wrap_sp_lpc_block_get, _wrap_sp_lpc_block_set },
    { "framesize", _wrap_sp_lpc_framesize_get, _wrap_sp_lpc_framesize_set },
    { "m_in", _wrap_sp_lpc_m_in_get, _wrap_sp_lpc_m_in_set },
    { "m_out", _wrap_sp_lpc_m_out_get, _wrap_sp_lpc_m_out_set },
    { "m_e", _wrap_sp_lpc_m_e_get, _wrap_sp_lpc_m_e_set },
    { "m_d", _wrap_sp_lpc_m_d_get, _wrap_sp_lpc_m_d_set },
    { "mode", _wrap_sp_lpc_mode_get, _wrap_sp_lpc_mode_set },
    { "ft", _wrap_sp_lpc_ft_get, _wrap_sp_lpc_ft_set },
    {0,0,0}
};
static swig_lua_method swig_sp_lpc_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_lpc_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_lpc_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_lpc_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_lpc_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_lpc_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_lpc_Sf_SwigStatic = {
    "sp_lpc",
    swig_sp_lpc_Sf_SwigStatic_methods,
    swig_sp_lpc_Sf_SwigStatic_attributes,
    swig_sp_lpc_Sf_SwigStatic_constants,
    swig_sp_lpc_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_lpc_bases[] = {0};
static const char *swig_sp_lpc_base_names[] = {0};
static swig_lua_class _wrap_class_sp_lpc = { "sp_lpc", "sp_lpc", &SWIGTYPE_p_sp_lpc,_proxy__wrap_new_sp_lpc, swig_delete_sp_lpc, swig_sp_lpc_methods, swig_sp_lpc_attributes, &swig_sp_lpc_Sf_SwigStatic, swig_sp_lpc_meta, swig_sp_lpc_bases, swig_sp_lpc_base_names };

static int _wrap_sp_lpc_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc **arg1 = (sp_lpc **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_lpc_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc_create",1,"sp_lpc **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_create",1,SWIGTYPE_p_p_sp_lpc);
  }
  
  result = (int)sp_lpc_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpc **arg1 = (sp_lpc **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_lpc_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc_destroy",1,"sp_lpc **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_destroy",1,SWIGTYPE_p_p_sp_lpc);
  }
  
  result = (int)sp_lpc_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_lpc *arg2 = (sp_lpc *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("sp_lpc_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpc_init",2,"sp_lpc *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_lpc_init",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_lpc_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_init",2,SWIGTYPE_p_sp_lpc);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)sp_lpc_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_synth(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_lpc *arg2 = (sp_lpc *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_lpc_synth",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc_synth",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpc_synth",2,"sp_lpc *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_lpc_synth",3,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_lpc_synth",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_synth",2,SWIGTYPE_p_sp_lpc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_lpc_synth",3,SWIGTYPE_p_sp_ftbl);
  }
  
  result = (int)sp_lpc_synth(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpc_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_lpc *arg2 = (sp_lpc *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_lpc_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpc_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpc_compute",2,"sp_lpc *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_lpc_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_lpc_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_lpc_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_lpc,0))){
    SWIG_fail_ptr("sp_lpc_compute",2,SWIGTYPE_p_sp_lpc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_lpc_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_lpc_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_lpc_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_cutoff_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_lpf18::cutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::cutoff",1,"sp_lpf18 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpf18::cutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_cutoff_set",1,SWIGTYPE_p_sp_lpf18);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->cutoff = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_cutoff_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_lpf18::cutoff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::cutoff",1,"sp_lpf18 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_cutoff_get",1,SWIGTYPE_p_sp_lpf18);
  }
  
  result = (float) ((arg1)->cutoff);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_res_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_lpf18::res",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::res",1,"sp_lpf18 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpf18::res",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_res_set",1,SWIGTYPE_p_sp_lpf18);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->res = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_res_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_lpf18::res",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::res",1,"sp_lpf18 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_res_get",1,SWIGTYPE_p_sp_lpf18);
  }
  
  result = (float) ((arg1)->res);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_dist_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_lpf18::dist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::dist",1,"sp_lpf18 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpf18::dist",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_dist_set",1,SWIGTYPE_p_sp_lpf18);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dist = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_dist_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_lpf18::dist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::dist",1,"sp_lpf18 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_dist_get",1,SWIGTYPE_p_sp_lpf18);
  }
  
  result = (float) ((arg1)->dist);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_ay1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_lpf18::ay1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::ay1",1,"sp_lpf18 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpf18::ay1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_ay1_set",1,SWIGTYPE_p_sp_lpf18);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ay1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_ay1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_lpf18::ay1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::ay1",1,"sp_lpf18 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_ay1_get",1,SWIGTYPE_p_sp_lpf18);
  }
  
  result = (float) ((arg1)->ay1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_ay2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_lpf18::ay2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::ay2",1,"sp_lpf18 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpf18::ay2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_ay2_set",1,SWIGTYPE_p_sp_lpf18);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ay2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_ay2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_lpf18::ay2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::ay2",1,"sp_lpf18 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_ay2_get",1,SWIGTYPE_p_sp_lpf18);
  }
  
  result = (float) ((arg1)->ay2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_aout_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_lpf18::aout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::aout",1,"sp_lpf18 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpf18::aout",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_aout_set",1,SWIGTYPE_p_sp_lpf18);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->aout = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_aout_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_lpf18::aout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::aout",1,"sp_lpf18 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_aout_get",1,SWIGTYPE_p_sp_lpf18);
  }
  
  result = (float) ((arg1)->aout);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_lastin_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_lpf18::lastin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::lastin",1,"sp_lpf18 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpf18::lastin",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_lastin_set",1,SWIGTYPE_p_sp_lpf18);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lastin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_lastin_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_lpf18::lastin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::lastin",1,"sp_lpf18 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_lastin_get",1,SWIGTYPE_p_sp_lpf18);
  }
  
  result = (float) ((arg1)->lastin);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_onedsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_lpf18::onedsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::onedsr",1,"sp_lpf18 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_lpf18::onedsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_onedsr_set",1,SWIGTYPE_p_sp_lpf18);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->onedsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_onedsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *arg1 = (sp_lpf18 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_lpf18::onedsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18::onedsr",1,"sp_lpf18 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_onedsr_get",1,SWIGTYPE_p_sp_lpf18);
  }
  
  result = (float) ((arg1)->onedsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_lpf18(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 *result = 0 ;
  
  SWIG_check_num_args("sp_lpf18::sp_lpf18",0,0)
  result = (sp_lpf18 *)new sp_lpf18();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_lpf18,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_lpf18(void *obj) {
sp_lpf18 *arg1 = (sp_lpf18 *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_lpf18(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_lpf18);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_lpf18_attributes[] = {
    { "cutoff", _wrap_sp_lpf18_cutoff_get, _wrap_sp_lpf18_cutoff_set },
    { "res", _wrap_sp_lpf18_res_get, _wrap_sp_lpf18_res_set },
    { "dist", _wrap_sp_lpf18_dist_get, _wrap_sp_lpf18_dist_set },
    { "ay1", _wrap_sp_lpf18_ay1_get, _wrap_sp_lpf18_ay1_set },
    { "ay2", _wrap_sp_lpf18_ay2_get, _wrap_sp_lpf18_ay2_set },
    { "aout", _wrap_sp_lpf18_aout_get, _wrap_sp_lpf18_aout_set },
    { "lastin", _wrap_sp_lpf18_lastin_get, _wrap_sp_lpf18_lastin_set },
    { "onedsr", _wrap_sp_lpf18_onedsr_get, _wrap_sp_lpf18_onedsr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_lpf18_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_lpf18_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_lpf18_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_lpf18_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_lpf18_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_lpf18_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_lpf18_Sf_SwigStatic = {
    "sp_lpf18",
    swig_sp_lpf18_Sf_SwigStatic_methods,
    swig_sp_lpf18_Sf_SwigStatic_attributes,
    swig_sp_lpf18_Sf_SwigStatic_constants,
    swig_sp_lpf18_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_lpf18_bases[] = {0};
static const char *swig_sp_lpf18_base_names[] = {0};
static swig_lua_class _wrap_class_sp_lpf18 = { "sp_lpf18", "sp_lpf18", &SWIGTYPE_p_sp_lpf18,_proxy__wrap_new_sp_lpf18, swig_delete_sp_lpf18, swig_sp_lpf18_methods, swig_sp_lpf18_attributes, &swig_sp_lpf18_Sf_SwigStatic, swig_sp_lpf18_meta, swig_sp_lpf18_bases, swig_sp_lpf18_base_names };

static int _wrap_sp_lpf18_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 **arg1 = (sp_lpf18 **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_lpf18_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18_create",1,"sp_lpf18 **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_create",1,SWIGTYPE_p_p_sp_lpf18);
  }
  
  result = (int)sp_lpf18_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_lpf18 **arg1 = (sp_lpf18 **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_lpf18_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18_destroy",1,"sp_lpf18 **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_destroy",1,SWIGTYPE_p_p_sp_lpf18);
  }
  
  result = (int)sp_lpf18_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_lpf18 *arg2 = (sp_lpf18 *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_lpf18_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpf18_init",2,"sp_lpf18 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_lpf18_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_init",2,SWIGTYPE_p_sp_lpf18);
  }
  
  result = (int)sp_lpf18_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_lpf18_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_lpf18 *arg2 = (sp_lpf18 *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_lpf18_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_lpf18_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_lpf18_compute",2,"sp_lpf18 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_lpf18_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_lpf18_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_lpf18_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_lpf18,0))){
    SWIG_fail_ptr("sp_lpf18_compute",2,SWIGTYPE_p_sp_lpf18);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_lpf18_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_lpf18_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_lpf18_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_maygate_prob_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_maygate *arg1 = (sp_maygate *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_maygate::prob",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_maygate::prob",1,"sp_maygate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_maygate::prob",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_maygate,0))){
    SWIG_fail_ptr("sp_maygate_prob_set",1,SWIGTYPE_p_sp_maygate);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prob = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_maygate_prob_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_maygate *arg1 = (sp_maygate *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_maygate::prob",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_maygate::prob",1,"sp_maygate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_maygate,0))){
    SWIG_fail_ptr("sp_maygate_prob_get",1,SWIGTYPE_p_sp_maygate);
  }
  
  result = (float) ((arg1)->prob);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_maygate_gate_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_maygate *arg1 = (sp_maygate *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_maygate::gate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_maygate::gate",1,"sp_maygate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_maygate::gate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_maygate,0))){
    SWIG_fail_ptr("sp_maygate_gate_set",1,SWIGTYPE_p_sp_maygate);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->gate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_maygate_gate_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_maygate *arg1 = (sp_maygate *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_maygate::gate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_maygate::gate",1,"sp_maygate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_maygate,0))){
    SWIG_fail_ptr("sp_maygate_gate_get",1,SWIGTYPE_p_sp_maygate);
  }
  
  result = (float) ((arg1)->gate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_maygate_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_maygate *arg1 = (sp_maygate *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_maygate::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_maygate::mode",1,"sp_maygate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_maygate::mode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_maygate,0))){
    SWIG_fail_ptr("sp_maygate_mode_set",1,SWIGTYPE_p_sp_maygate);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_maygate_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_maygate *arg1 = (sp_maygate *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_maygate::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_maygate::mode",1,"sp_maygate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_maygate,0))){
    SWIG_fail_ptr("sp_maygate_mode_get",1,SWIGTYPE_p_sp_maygate);
  }
  
  result = (int) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_maygate(lua_State* L) {
  int SWIG_arg = 0;
  sp_maygate *result = 0 ;
  
  SWIG_check_num_args("sp_maygate::sp_maygate",0,0)
  result = (sp_maygate *)new sp_maygate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_maygate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_maygate(void *obj) {
sp_maygate *arg1 = (sp_maygate *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_maygate(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_maygate);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_maygate_attributes[] = {
    { "prob", _wrap_sp_maygate_prob_get, _wrap_sp_maygate_prob_set },
    { "gate", _wrap_sp_maygate_gate_get, _wrap_sp_maygate_gate_set },
    { "mode", _wrap_sp_maygate_mode_get, _wrap_sp_maygate_mode_set },
    {0,0,0}
};
static swig_lua_method swig_sp_maygate_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_maygate_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_maygate_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_maygate_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_maygate_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_maygate_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_maygate_Sf_SwigStatic = {
    "sp_maygate",
    swig_sp_maygate_Sf_SwigStatic_methods,
    swig_sp_maygate_Sf_SwigStatic_attributes,
    swig_sp_maygate_Sf_SwigStatic_constants,
    swig_sp_maygate_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_maygate_bases[] = {0};
static const char *swig_sp_maygate_base_names[] = {0};
static swig_lua_class _wrap_class_sp_maygate = { "sp_maygate", "sp_maygate", &SWIGTYPE_p_sp_maygate,_proxy__wrap_new_sp_maygate, swig_delete_sp_maygate, swig_sp_maygate_methods, swig_sp_maygate_attributes, &swig_sp_maygate_Sf_SwigStatic, swig_sp_maygate_meta, swig_sp_maygate_bases, swig_sp_maygate_base_names };

static int _wrap_sp_maygate_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_maygate **arg1 = (sp_maygate **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_maygate_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_maygate_create",1,"sp_maygate **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_maygate,0))){
    SWIG_fail_ptr("sp_maygate_create",1,SWIGTYPE_p_p_sp_maygate);
  }
  
  result = (int)sp_maygate_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_maygate_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_maygate **arg1 = (sp_maygate **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_maygate_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_maygate_destroy",1,"sp_maygate **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_maygate,0))){
    SWIG_fail_ptr("sp_maygate_destroy",1,SWIGTYPE_p_p_sp_maygate);
  }
  
  result = (int)sp_maygate_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_maygate_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_maygate *arg2 = (sp_maygate *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_maygate_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_maygate_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_maygate_init",2,"sp_maygate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_maygate_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_maygate,0))){
    SWIG_fail_ptr("sp_maygate_init",2,SWIGTYPE_p_sp_maygate);
  }
  
  result = (int)sp_maygate_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_maygate_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_maygate *arg2 = (sp_maygate *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_maygate_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_maygate_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_maygate_compute",2,"sp_maygate *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_maygate_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_maygate_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_maygate_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_maygate,0))){
    SWIG_fail_ptr("sp_maygate_compute",2,SWIGTYPE_p_sp_maygate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_maygate_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_maygate_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_maygate_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro *arg1 = (sp_metro *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_metro::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro::sr",1,"sp_metro *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_metro::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_sr_set",1,SWIGTYPE_p_sp_metro);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro *arg1 = (sp_metro *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_metro::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro::sr",1,"sp_metro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_sr_get",1,SWIGTYPE_p_sp_metro);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro *arg1 = (sp_metro *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_metro::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro::freq",1,"sp_metro *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_metro::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_freq_set",1,SWIGTYPE_p_sp_metro);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro *arg1 = (sp_metro *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_metro::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro::freq",1,"sp_metro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_freq_get",1,SWIGTYPE_p_sp_metro);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_iphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro *arg1 = (sp_metro *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_metro::iphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro::iphs",1,"sp_metro *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_metro::iphs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_iphs_set",1,SWIGTYPE_p_sp_metro);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_iphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro *arg1 = (sp_metro *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_metro::iphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro::iphs",1,"sp_metro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_iphs_get",1,SWIGTYPE_p_sp_metro);
  }
  
  result = (float) ((arg1)->iphs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_curphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro *arg1 = (sp_metro *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_metro::curphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro::curphs",1,"sp_metro *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_metro::curphs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_curphs_set",1,SWIGTYPE_p_sp_metro);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->curphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_curphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro *arg1 = (sp_metro *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_metro::curphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro::curphs",1,"sp_metro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_curphs_get",1,SWIGTYPE_p_sp_metro);
  }
  
  result = (float) ((arg1)->curphs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_flag_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro *arg1 = (sp_metro *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_metro::flag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro::flag",1,"sp_metro *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_metro::flag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_flag_set",1,SWIGTYPE_p_sp_metro);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->flag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_flag_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro *arg1 = (sp_metro *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_metro::flag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro::flag",1,"sp_metro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_flag_get",1,SWIGTYPE_p_sp_metro);
  }
  
  result = (int) ((arg1)->flag);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_onedsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro *arg1 = (sp_metro *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_metro::onedsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro::onedsr",1,"sp_metro *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_metro::onedsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_onedsr_set",1,SWIGTYPE_p_sp_metro);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->onedsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_onedsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro *arg1 = (sp_metro *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_metro::onedsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro::onedsr",1,"sp_metro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_onedsr_get",1,SWIGTYPE_p_sp_metro);
  }
  
  result = (float) ((arg1)->onedsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_metro(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro *result = 0 ;
  
  SWIG_check_num_args("sp_metro::sp_metro",0,0)
  result = (sp_metro *)new sp_metro();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_metro,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_metro(void *obj) {
sp_metro *arg1 = (sp_metro *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_metro(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_metro);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_metro_attributes[] = {
    { "sr", _wrap_sp_metro_sr_get, _wrap_sp_metro_sr_set },
    { "freq", _wrap_sp_metro_freq_get, _wrap_sp_metro_freq_set },
    { "iphs", _wrap_sp_metro_iphs_get, _wrap_sp_metro_iphs_set },
    { "curphs", _wrap_sp_metro_curphs_get, _wrap_sp_metro_curphs_set },
    { "flag", _wrap_sp_metro_flag_get, _wrap_sp_metro_flag_set },
    { "onedsr", _wrap_sp_metro_onedsr_get, _wrap_sp_metro_onedsr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_metro_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_metro_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_metro_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_metro_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_metro_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_metro_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_metro_Sf_SwigStatic = {
    "sp_metro",
    swig_sp_metro_Sf_SwigStatic_methods,
    swig_sp_metro_Sf_SwigStatic_attributes,
    swig_sp_metro_Sf_SwigStatic_constants,
    swig_sp_metro_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_metro_bases[] = {0};
static const char *swig_sp_metro_base_names[] = {0};
static swig_lua_class _wrap_class_sp_metro = { "sp_metro", "sp_metro", &SWIGTYPE_p_sp_metro,_proxy__wrap_new_sp_metro, swig_delete_sp_metro, swig_sp_metro_methods, swig_sp_metro_attributes, &swig_sp_metro_Sf_SwigStatic, swig_sp_metro_meta, swig_sp_metro_bases, swig_sp_metro_base_names };

static int _wrap_sp_metro_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro **arg1 = (sp_metro **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_metro_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro_create",1,"sp_metro **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_create",1,SWIGTYPE_p_p_sp_metro);
  }
  
  result = (int)sp_metro_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_metro **arg1 = (sp_metro **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_metro_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro_destroy",1,"sp_metro **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_destroy",1,SWIGTYPE_p_p_sp_metro);
  }
  
  result = (int)sp_metro_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_metro *arg2 = (sp_metro *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_metro_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_metro_init",2,"sp_metro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_metro_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_init",2,SWIGTYPE_p_sp_metro);
  }
  
  result = (int)sp_metro_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_metro_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_metro *arg2 = (sp_metro *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_metro_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_metro_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_metro_compute",2,"sp_metro *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_metro_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_metro_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_metro_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_metro,0))){
    SWIG_fail_ptr("sp_metro_compute",2,SWIGTYPE_p_sp_metro);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_metro_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_metro_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_metro_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_time_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mincer::time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::time",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::time",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_time_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->time = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_time_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mincer::time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::time",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_time_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (float) ((arg1)->time);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mincer::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::amp",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_amp_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mincer::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::amp",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_amp_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_pitch_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mincer::pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::pitch",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::pitch",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_pitch_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pitch = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_pitch_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mincer::pitch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::pitch",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_pitch_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (float) ((arg1)->pitch);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_lock_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mincer::lock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::lock",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::lock",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_lock_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lock = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_lock_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mincer::lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::lock",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_lock_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (float) ((arg1)->lock);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_iN_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mincer::iN",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::iN",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::iN",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_iN_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iN = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_iN_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mincer::iN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::iN",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_iN_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (float) ((arg1)->iN);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_idecim_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mincer::idecim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::idecim",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::idecim",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_idecim_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->idecim = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_idecim_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mincer::idecim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::idecim",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_idecim_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (float) ((arg1)->idecim);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_onset_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mincer::onset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::onset",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::onset",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_onset_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->onset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_onset_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mincer::onset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::onset",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_onset_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (float) ((arg1)->onset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mincer::offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::offset",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::offset",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_offset_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mincer::offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::offset",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_offset_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (float) ((arg1)->offset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_dbthresh_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mincer::dbthresh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::dbthresh",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::dbthresh",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_dbthresh_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dbthresh = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_dbthresh_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mincer::dbthresh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::dbthresh",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_dbthresh_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (float) ((arg1)->dbthresh);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_cnt_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_mincer::cnt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::cnt",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::cnt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_cnt_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->cnt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_cnt_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_mincer::cnt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::cnt",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_cnt_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (int) ((arg1)->cnt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_hsize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_mincer::hsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::hsize",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::hsize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_hsize_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->hsize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_hsize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_mincer::hsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::hsize",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_hsize_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (int) ((arg1)->hsize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_curframe_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_mincer::curframe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::curframe",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::curframe",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_curframe_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->curframe = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_curframe_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_mincer::curframe",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::curframe",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_curframe_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (int) ((arg1)->curframe);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_N_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_mincer::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::N",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::N",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_N_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_N_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_mincer::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::N",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_N_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (int) ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_decim_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_mincer::decim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::decim",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::decim",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_decim_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->decim = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_decim_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_mincer::decim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::decim",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_decim_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (int) ((arg1)->decim);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_tscale_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_mincer::tscale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::tscale",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::tscale",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_tscale_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->tscale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_tscale_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_mincer::tscale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::tscale",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_tscale_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (int) ((arg1)->tscale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mincer::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::pos",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::pos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_pos_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mincer::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::pos",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_pos_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (float) ((arg1)->pos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_accum_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mincer::accum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::accum",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::accum",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_accum_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->accum = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_accum_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mincer::accum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::accum",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_accum_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (float) ((arg1)->accum);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_outframe_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_mincer::outframe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::outframe",1,"sp_mincer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mincer::outframe",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_outframe_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_mincer_outframe_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->outframe = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_outframe_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_mincer::outframe",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::outframe",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_outframe_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (sp_auxdata *)& ((arg1)->outframe);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_win_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_mincer::win",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::win",1,"sp_mincer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mincer::win",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_win_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_mincer_win_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->win = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_win_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_mincer::win",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::win",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_win_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (sp_auxdata *)& ((arg1)->win);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_bwin_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_mincer::bwin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::bwin",1,"sp_mincer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mincer::bwin",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_bwin_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_mincer_bwin_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->bwin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_bwin_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_mincer::bwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::bwin",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_bwin_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (sp_auxdata *)& ((arg1)->bwin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_fwin_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_mincer::fwin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::fwin",1,"sp_mincer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mincer::fwin",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_fwin_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_mincer_fwin_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->fwin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_fwin_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_mincer::fwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::fwin",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_fwin_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (sp_auxdata *)& ((arg1)->fwin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_nwin_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_mincer::nwin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::nwin",1,"sp_mincer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mincer::nwin",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_nwin_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_mincer_nwin_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->nwin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_nwin_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_mincer::nwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::nwin",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_nwin_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (sp_auxdata *)& ((arg1)->nwin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_prev_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_mincer::prev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::prev",1,"sp_mincer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mincer::prev",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_prev_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_mincer_prev_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->prev = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_prev_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_mincer::prev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::prev",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_prev_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (sp_auxdata *)& ((arg1)->prev);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_framecount_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_mincer::framecount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::framecount",1,"sp_mincer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mincer::framecount",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_framecount_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_mincer_framecount_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->framecount = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_framecount_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_mincer::framecount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::framecount",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_framecount_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (sp_auxdata *)& ((arg1)->framecount);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_indata_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *arg2 ;
  
  SWIG_check_num_args("sp_mincer::indata",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::indata",1,"sp_mincer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mincer::indata",2,"sp_auxdata [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_indata_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_mincer_indata_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  {
    size_t ii;
    sp_auxdata *b = (sp_auxdata *) arg1->indata;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((sp_auxdata *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_indata_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_mincer::indata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::indata",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_indata_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (sp_auxdata *)(sp_auxdata *) ((arg1)->indata);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_tab_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_mincer::tab",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::tab",1,"sp_mincer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mincer::tab",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_tab_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_mincer_tab_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->tab = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_tab_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_mincer::tab",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::tab",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_tab_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (float *) ((arg1)->tab);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_curbuf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_mincer::curbuf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::curbuf",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::curbuf",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_curbuf_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->curbuf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_curbuf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_mincer::curbuf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::curbuf",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_curbuf_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (int) ((arg1)->curbuf);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_resamp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mincer::resamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::resamp",1,"sp_mincer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mincer::resamp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_resamp_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->resamp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_resamp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mincer::resamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::resamp",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_resamp_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (float) ((arg1)->resamp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_ft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_mincer::ft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::ft",1,"sp_mincer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mincer::ft",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_ft_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_mincer_ft_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_ft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_mincer::ft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::ft",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_ft_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (sp_ftbl *) ((arg1)->ft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_fft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_fft *arg2 = (sp_fft *) 0 ;
  
  SWIG_check_num_args("sp_mincer::fft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::fft",1,"sp_mincer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mincer::fft",2,"sp_fft *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_fft_set",1,SWIGTYPE_p_sp_mincer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fft,0))){
    SWIG_fail_ptr("sp_mincer_fft_set",2,SWIGTYPE_p_sp_fft);
  }
  
  if (arg1) (arg1)->fft = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_fft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *arg1 = (sp_mincer *) 0 ;
  sp_fft *result = 0 ;
  
  SWIG_check_num_args("sp_mincer::fft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer::fft",1,"sp_mincer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_fft_get",1,SWIGTYPE_p_sp_mincer);
  }
  
  result = (sp_fft *)& ((arg1)->fft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fft,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_mincer(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer *result = 0 ;
  
  SWIG_check_num_args("sp_mincer::sp_mincer",0,0)
  result = (sp_mincer *)new sp_mincer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_mincer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_mincer(void *obj) {
sp_mincer *arg1 = (sp_mincer *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_mincer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_mincer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_mincer_attributes[] = {
    { "time", _wrap_sp_mincer_time_get, _wrap_sp_mincer_time_set },
    { "amp", _wrap_sp_mincer_amp_get, _wrap_sp_mincer_amp_set },
    { "pitch", _wrap_sp_mincer_pitch_get, _wrap_sp_mincer_pitch_set },
    { "lock", _wrap_sp_mincer_lock_get, _wrap_sp_mincer_lock_set },
    { "iN", _wrap_sp_mincer_iN_get, _wrap_sp_mincer_iN_set },
    { "idecim", _wrap_sp_mincer_idecim_get, _wrap_sp_mincer_idecim_set },
    { "onset", _wrap_sp_mincer_onset_get, _wrap_sp_mincer_onset_set },
    { "offset", _wrap_sp_mincer_offset_get, _wrap_sp_mincer_offset_set },
    { "dbthresh", _wrap_sp_mincer_dbthresh_get, _wrap_sp_mincer_dbthresh_set },
    { "cnt", _wrap_sp_mincer_cnt_get, _wrap_sp_mincer_cnt_set },
    { "hsize", _wrap_sp_mincer_hsize_get, _wrap_sp_mincer_hsize_set },
    { "curframe", _wrap_sp_mincer_curframe_get, _wrap_sp_mincer_curframe_set },
    { "N", _wrap_sp_mincer_N_get, _wrap_sp_mincer_N_set },
    { "decim", _wrap_sp_mincer_decim_get, _wrap_sp_mincer_decim_set },
    { "tscale", _wrap_sp_mincer_tscale_get, _wrap_sp_mincer_tscale_set },
    { "pos", _wrap_sp_mincer_pos_get, _wrap_sp_mincer_pos_set },
    { "accum", _wrap_sp_mincer_accum_get, _wrap_sp_mincer_accum_set },
    { "outframe", _wrap_sp_mincer_outframe_get, _wrap_sp_mincer_outframe_set },
    { "win", _wrap_sp_mincer_win_get, _wrap_sp_mincer_win_set },
    { "bwin", _wrap_sp_mincer_bwin_get, _wrap_sp_mincer_bwin_set },
    { "fwin", _wrap_sp_mincer_fwin_get, _wrap_sp_mincer_fwin_set },
    { "nwin", _wrap_sp_mincer_nwin_get, _wrap_sp_mincer_nwin_set },
    { "prev", _wrap_sp_mincer_prev_get, _wrap_sp_mincer_prev_set },
    { "framecount", _wrap_sp_mincer_framecount_get, _wrap_sp_mincer_framecount_set },
    { "indata", _wrap_sp_mincer_indata_get, _wrap_sp_mincer_indata_set },
    { "tab", _wrap_sp_mincer_tab_get, _wrap_sp_mincer_tab_set },
    { "curbuf", _wrap_sp_mincer_curbuf_get, _wrap_sp_mincer_curbuf_set },
    { "resamp", _wrap_sp_mincer_resamp_get, _wrap_sp_mincer_resamp_set },
    { "ft", _wrap_sp_mincer_ft_get, _wrap_sp_mincer_ft_set },
    { "fft", _wrap_sp_mincer_fft_get, _wrap_sp_mincer_fft_set },
    {0,0,0}
};
static swig_lua_method swig_sp_mincer_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_mincer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_mincer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_mincer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_mincer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_mincer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_mincer_Sf_SwigStatic = {
    "sp_mincer",
    swig_sp_mincer_Sf_SwigStatic_methods,
    swig_sp_mincer_Sf_SwigStatic_attributes,
    swig_sp_mincer_Sf_SwigStatic_constants,
    swig_sp_mincer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_mincer_bases[] = {0};
static const char *swig_sp_mincer_base_names[] = {0};
static swig_lua_class _wrap_class_sp_mincer = { "sp_mincer", "sp_mincer", &SWIGTYPE_p_sp_mincer,_proxy__wrap_new_sp_mincer, swig_delete_sp_mincer, swig_sp_mincer_methods, swig_sp_mincer_attributes, &swig_sp_mincer_Sf_SwigStatic, swig_sp_mincer_meta, swig_sp_mincer_bases, swig_sp_mincer_base_names };

static int _wrap_sp_mincer_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer **arg1 = (sp_mincer **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_mincer_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer_create",1,"sp_mincer **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_create",1,SWIGTYPE_p_p_sp_mincer);
  }
  
  result = (int)sp_mincer_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_mincer **arg1 = (sp_mincer **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_mincer_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer_destroy",1,"sp_mincer **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_destroy",1,SWIGTYPE_p_p_sp_mincer);
  }
  
  result = (int)sp_mincer_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_mincer *arg2 = (sp_mincer *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("sp_mincer_init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mincer_init",2,"sp_mincer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_mincer_init",3,"sp_ftbl *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("sp_mincer_init",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_mincer_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_init",2,SWIGTYPE_p_sp_mincer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_mincer_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)sp_mincer_init(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mincer_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_mincer *arg2 = (sp_mincer *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_mincer_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mincer_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mincer_compute",2,"sp_mincer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_mincer_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_mincer_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_mincer_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_mincer,0))){
    SWIG_fail_ptr("sp_mincer_compute",2,SWIGTYPE_p_sp_mincer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_mincer_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_mincer_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_mincer_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mode::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::freq",1,"sp_mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mode::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_freq_set",1,SWIGTYPE_p_sp_mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mode::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::freq",1,"sp_mode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_freq_get",1,SWIGTYPE_p_sp_mode);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_q_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mode::q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::q",1,"sp_mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mode::q",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_q_set",1,SWIGTYPE_p_sp_mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_q_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mode::q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::q",1,"sp_mode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_q_get",1,SWIGTYPE_p_sp_mode);
  }
  
  result = (float) ((arg1)->q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_xnm1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mode::xnm1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::xnm1",1,"sp_mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mode::xnm1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_xnm1_set",1,SWIGTYPE_p_sp_mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->xnm1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_xnm1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mode::xnm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::xnm1",1,"sp_mode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_xnm1_get",1,SWIGTYPE_p_sp_mode);
  }
  
  result = (float) ((arg1)->xnm1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_ynm1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mode::ynm1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::ynm1",1,"sp_mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mode::ynm1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_ynm1_set",1,SWIGTYPE_p_sp_mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ynm1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_ynm1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mode::ynm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::ynm1",1,"sp_mode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_ynm1_get",1,SWIGTYPE_p_sp_mode);
  }
  
  result = (float) ((arg1)->ynm1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_ynm2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mode::ynm2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::ynm2",1,"sp_mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mode::ynm2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_ynm2_set",1,SWIGTYPE_p_sp_mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ynm2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_ynm2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mode::ynm2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::ynm2",1,"sp_mode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_ynm2_get",1,SWIGTYPE_p_sp_mode);
  }
  
  result = (float) ((arg1)->ynm2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_a0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mode::a0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::a0",1,"sp_mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mode::a0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_a0_set",1,SWIGTYPE_p_sp_mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_a0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mode::a0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::a0",1,"sp_mode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_a0_get",1,SWIGTYPE_p_sp_mode);
  }
  
  result = (float) ((arg1)->a0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_a1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mode::a1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::a1",1,"sp_mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mode::a1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_a1_set",1,SWIGTYPE_p_sp_mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_a1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mode::a1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::a1",1,"sp_mode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_a1_get",1,SWIGTYPE_p_sp_mode);
  }
  
  result = (float) ((arg1)->a1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_a2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mode::a2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::a2",1,"sp_mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mode::a2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_a2_set",1,SWIGTYPE_p_sp_mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_a2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mode::a2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::a2",1,"sp_mode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_a2_get",1,SWIGTYPE_p_sp_mode);
  }
  
  result = (float) ((arg1)->a2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_d_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mode::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::d",1,"sp_mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mode::d",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_d_set",1,SWIGTYPE_p_sp_mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_d_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mode::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::d",1,"sp_mode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_d_get",1,SWIGTYPE_p_sp_mode);
  }
  
  result = (float) ((arg1)->d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_lfq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mode::lfq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::lfq",1,"sp_mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mode::lfq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_lfq_set",1,SWIGTYPE_p_sp_mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lfq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_lfq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mode::lfq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::lfq",1,"sp_mode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_lfq_get",1,SWIGTYPE_p_sp_mode);
  }
  
  result = (float) ((arg1)->lfq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_lq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mode::lq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::lq",1,"sp_mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mode::lq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_lq_set",1,SWIGTYPE_p_sp_mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_lq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mode::lq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::lq",1,"sp_mode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_lq_get",1,SWIGTYPE_p_sp_mode);
  }
  
  result = (float) ((arg1)->lq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_mode::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::sr",1,"sp_mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_mode::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_sr_set",1,SWIGTYPE_p_sp_mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *arg1 = (sp_mode *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_mode::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode::sr",1,"sp_mode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_sr_get",1,SWIGTYPE_p_sp_mode);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_mode(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode *result = 0 ;
  
  SWIG_check_num_args("sp_mode::sp_mode",0,0)
  result = (sp_mode *)new sp_mode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_mode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_mode(void *obj) {
sp_mode *arg1 = (sp_mode *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_mode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_mode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_mode_attributes[] = {
    { "freq", _wrap_sp_mode_freq_get, _wrap_sp_mode_freq_set },
    { "q", _wrap_sp_mode_q_get, _wrap_sp_mode_q_set },
    { "xnm1", _wrap_sp_mode_xnm1_get, _wrap_sp_mode_xnm1_set },
    { "ynm1", _wrap_sp_mode_ynm1_get, _wrap_sp_mode_ynm1_set },
    { "ynm2", _wrap_sp_mode_ynm2_get, _wrap_sp_mode_ynm2_set },
    { "a0", _wrap_sp_mode_a0_get, _wrap_sp_mode_a0_set },
    { "a1", _wrap_sp_mode_a1_get, _wrap_sp_mode_a1_set },
    { "a2", _wrap_sp_mode_a2_get, _wrap_sp_mode_a2_set },
    { "d", _wrap_sp_mode_d_get, _wrap_sp_mode_d_set },
    { "lfq", _wrap_sp_mode_lfq_get, _wrap_sp_mode_lfq_set },
    { "lq", _wrap_sp_mode_lq_get, _wrap_sp_mode_lq_set },
    { "sr", _wrap_sp_mode_sr_get, _wrap_sp_mode_sr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_mode_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_mode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_mode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_mode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_mode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_mode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_mode_Sf_SwigStatic = {
    "sp_mode",
    swig_sp_mode_Sf_SwigStatic_methods,
    swig_sp_mode_Sf_SwigStatic_attributes,
    swig_sp_mode_Sf_SwigStatic_constants,
    swig_sp_mode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_mode_bases[] = {0};
static const char *swig_sp_mode_base_names[] = {0};
static swig_lua_class _wrap_class_sp_mode = { "sp_mode", "sp_mode", &SWIGTYPE_p_sp_mode,_proxy__wrap_new_sp_mode, swig_delete_sp_mode, swig_sp_mode_methods, swig_sp_mode_attributes, &swig_sp_mode_Sf_SwigStatic, swig_sp_mode_meta, swig_sp_mode_bases, swig_sp_mode_base_names };

static int _wrap_sp_mode_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode **arg1 = (sp_mode **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_mode_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode_create",1,"sp_mode **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_create",1,SWIGTYPE_p_p_sp_mode);
  }
  
  result = (int)sp_mode_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_mode **arg1 = (sp_mode **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_mode_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode_destroy",1,"sp_mode **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_destroy",1,SWIGTYPE_p_p_sp_mode);
  }
  
  result = (int)sp_mode_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_mode *arg2 = (sp_mode *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_mode_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mode_init",2,"sp_mode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_mode_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_init",2,SWIGTYPE_p_sp_mode);
  }
  
  result = (int)sp_mode_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_mode_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_mode *arg2 = (sp_mode *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_mode_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_mode_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_mode_compute",2,"sp_mode *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_mode_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_mode_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_mode_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_mode,0))){
    SWIG_fail_ptr("sp_mode_compute",2,SWIGTYPE_p_sp_mode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_mode_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_mode_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_mode_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_moogladder::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::freq",1,"sp_moogladder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_moogladder::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_freq_set",1,SWIGTYPE_p_sp_moogladder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_moogladder::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::freq",1,"sp_moogladder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_freq_get",1,SWIGTYPE_p_sp_moogladder);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_res_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_moogladder::res",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::res",1,"sp_moogladder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_moogladder::res",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_res_set",1,SWIGTYPE_p_sp_moogladder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->res = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_res_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_moogladder::res",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::res",1,"sp_moogladder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_res_get",1,SWIGTYPE_p_sp_moogladder);
  }
  
  result = (float) ((arg1)->res);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_istor_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_moogladder::istor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::istor",1,"sp_moogladder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_moogladder::istor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_istor_set",1,SWIGTYPE_p_sp_moogladder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->istor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_istor_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_moogladder::istor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::istor",1,"sp_moogladder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_istor_get",1,SWIGTYPE_p_sp_moogladder);
  }
  
  result = (float) ((arg1)->istor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_delay_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_moogladder::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::delay",1,"sp_moogladder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_moogladder::delay",2,"float [6]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_delay_set",1,SWIGTYPE_p_sp_moogladder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_moogladder_delay_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->delay;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_delay_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_moogladder::delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::delay",1,"sp_moogladder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_delay_get",1,SWIGTYPE_p_sp_moogladder);
  }
  
  result = (float *)(float *) ((arg1)->delay);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_tanhstg_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_moogladder::tanhstg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::tanhstg",1,"sp_moogladder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_moogladder::tanhstg",2,"float [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_tanhstg_set",1,SWIGTYPE_p_sp_moogladder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_moogladder_tanhstg_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->tanhstg;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_tanhstg_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_moogladder::tanhstg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::tanhstg",1,"sp_moogladder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_tanhstg_get",1,SWIGTYPE_p_sp_moogladder);
  }
  
  result = (float *)(float *) ((arg1)->tanhstg);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_oldfreq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_moogladder::oldfreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::oldfreq",1,"sp_moogladder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_moogladder::oldfreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_oldfreq_set",1,SWIGTYPE_p_sp_moogladder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->oldfreq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_oldfreq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_moogladder::oldfreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::oldfreq",1,"sp_moogladder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_oldfreq_get",1,SWIGTYPE_p_sp_moogladder);
  }
  
  result = (float) ((arg1)->oldfreq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_oldres_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_moogladder::oldres",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::oldres",1,"sp_moogladder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_moogladder::oldres",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_oldres_set",1,SWIGTYPE_p_sp_moogladder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->oldres = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_oldres_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_moogladder::oldres",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::oldres",1,"sp_moogladder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_oldres_get",1,SWIGTYPE_p_sp_moogladder);
  }
  
  result = (float) ((arg1)->oldres);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_oldacr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_moogladder::oldacr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::oldacr",1,"sp_moogladder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_moogladder::oldacr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_oldacr_set",1,SWIGTYPE_p_sp_moogladder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->oldacr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_oldacr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_moogladder::oldacr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::oldacr",1,"sp_moogladder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_oldacr_get",1,SWIGTYPE_p_sp_moogladder);
  }
  
  result = (float) ((arg1)->oldacr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_oldtune_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_moogladder::oldtune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::oldtune",1,"sp_moogladder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_moogladder::oldtune",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_oldtune_set",1,SWIGTYPE_p_sp_moogladder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->oldtune = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_oldtune_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *arg1 = (sp_moogladder *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_moogladder::oldtune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder::oldtune",1,"sp_moogladder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_oldtune_get",1,SWIGTYPE_p_sp_moogladder);
  }
  
  result = (float) ((arg1)->oldtune);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_moogladder(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder *result = 0 ;
  
  SWIG_check_num_args("sp_moogladder::sp_moogladder",0,0)
  result = (sp_moogladder *)new sp_moogladder();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_moogladder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_moogladder(void *obj) {
sp_moogladder *arg1 = (sp_moogladder *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_moogladder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_moogladder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_moogladder_attributes[] = {
    { "freq", _wrap_sp_moogladder_freq_get, _wrap_sp_moogladder_freq_set },
    { "res", _wrap_sp_moogladder_res_get, _wrap_sp_moogladder_res_set },
    { "istor", _wrap_sp_moogladder_istor_get, _wrap_sp_moogladder_istor_set },
    { "delay", _wrap_sp_moogladder_delay_get, _wrap_sp_moogladder_delay_set },
    { "tanhstg", _wrap_sp_moogladder_tanhstg_get, _wrap_sp_moogladder_tanhstg_set },
    { "oldfreq", _wrap_sp_moogladder_oldfreq_get, _wrap_sp_moogladder_oldfreq_set },
    { "oldres", _wrap_sp_moogladder_oldres_get, _wrap_sp_moogladder_oldres_set },
    { "oldacr", _wrap_sp_moogladder_oldacr_get, _wrap_sp_moogladder_oldacr_set },
    { "oldtune", _wrap_sp_moogladder_oldtune_get, _wrap_sp_moogladder_oldtune_set },
    {0,0,0}
};
static swig_lua_method swig_sp_moogladder_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_moogladder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_moogladder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_moogladder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_moogladder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_moogladder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_moogladder_Sf_SwigStatic = {
    "sp_moogladder",
    swig_sp_moogladder_Sf_SwigStatic_methods,
    swig_sp_moogladder_Sf_SwigStatic_attributes,
    swig_sp_moogladder_Sf_SwigStatic_constants,
    swig_sp_moogladder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_moogladder_bases[] = {0};
static const char *swig_sp_moogladder_base_names[] = {0};
static swig_lua_class _wrap_class_sp_moogladder = { "sp_moogladder", "sp_moogladder", &SWIGTYPE_p_sp_moogladder,_proxy__wrap_new_sp_moogladder, swig_delete_sp_moogladder, swig_sp_moogladder_methods, swig_sp_moogladder_attributes, &swig_sp_moogladder_Sf_SwigStatic, swig_sp_moogladder_meta, swig_sp_moogladder_bases, swig_sp_moogladder_base_names };

static int _wrap_sp_moogladder_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder **arg1 = (sp_moogladder **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_moogladder_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder_create",1,"sp_moogladder **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_create",1,SWIGTYPE_p_p_sp_moogladder);
  }
  
  result = (int)sp_moogladder_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_moogladder **arg1 = (sp_moogladder **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_moogladder_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder_destroy",1,"sp_moogladder **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_destroy",1,SWIGTYPE_p_p_sp_moogladder);
  }
  
  result = (int)sp_moogladder_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_moogladder *arg2 = (sp_moogladder *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_moogladder_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_moogladder_init",2,"sp_moogladder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_moogladder_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_init",2,SWIGTYPE_p_sp_moogladder);
  }
  
  result = (int)sp_moogladder_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_moogladder_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_moogladder *arg2 = (sp_moogladder *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_moogladder_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_moogladder_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_moogladder_compute",2,"sp_moogladder *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_moogladder_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_moogladder_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_moogladder_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_moogladder,0))){
    SWIG_fail_ptr("sp_moogladder_compute",2,SWIGTYPE_p_sp_moogladder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_moogladder_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_moogladder_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_moogladder_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_noise_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_noise *arg1 = (sp_noise *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_noise::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_noise::amp",1,"sp_noise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_noise::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_noise,0))){
    SWIG_fail_ptr("sp_noise_amp_set",1,SWIGTYPE_p_sp_noise);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_noise_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_noise *arg1 = (sp_noise *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_noise::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_noise::amp",1,"sp_noise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_noise,0))){
    SWIG_fail_ptr("sp_noise_amp_get",1,SWIGTYPE_p_sp_noise);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_noise(lua_State* L) {
  int SWIG_arg = 0;
  sp_noise *result = 0 ;
  
  SWIG_check_num_args("sp_noise::sp_noise",0,0)
  result = (sp_noise *)new sp_noise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_noise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_noise(void *obj) {
sp_noise *arg1 = (sp_noise *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_noise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_noise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_noise_attributes[] = {
    { "amp", _wrap_sp_noise_amp_get, _wrap_sp_noise_amp_set },
    {0,0,0}
};
static swig_lua_method swig_sp_noise_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_noise_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_noise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_noise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_noise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_noise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_noise_Sf_SwigStatic = {
    "sp_noise",
    swig_sp_noise_Sf_SwigStatic_methods,
    swig_sp_noise_Sf_SwigStatic_attributes,
    swig_sp_noise_Sf_SwigStatic_constants,
    swig_sp_noise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_noise_bases[] = {0};
static const char *swig_sp_noise_base_names[] = {0};
static swig_lua_class _wrap_class_sp_noise = { "sp_noise", "sp_noise", &SWIGTYPE_p_sp_noise,_proxy__wrap_new_sp_noise, swig_delete_sp_noise, swig_sp_noise_methods, swig_sp_noise_attributes, &swig_sp_noise_Sf_SwigStatic, swig_sp_noise_meta, swig_sp_noise_bases, swig_sp_noise_base_names };

static int _wrap_sp_noise_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_noise **arg1 = (sp_noise **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_noise_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_noise_create",1,"sp_noise **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_noise,0))){
    SWIG_fail_ptr("sp_noise_create",1,SWIGTYPE_p_p_sp_noise);
  }
  
  result = (int)sp_noise_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_noise_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_noise *arg2 = (sp_noise *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_noise_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_noise_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_noise_init",2,"sp_noise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_noise_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_noise,0))){
    SWIG_fail_ptr("sp_noise_init",2,SWIGTYPE_p_sp_noise);
  }
  
  result = (int)sp_noise_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_noise_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_noise *arg2 = (sp_noise *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_noise_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_noise_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_noise_compute",2,"sp_noise *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_noise_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_noise_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_noise_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_noise,0))){
    SWIG_fail_ptr("sp_noise_compute",2,SWIGTYPE_p_sp_noise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_noise_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_noise_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_noise_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_noise_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_noise **arg1 = (sp_noise **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_noise_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_noise_destroy",1,"sp_noise **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_noise,0))){
    SWIG_fail_ptr("sp_noise_destroy",1,SWIGTYPE_p_p_sp_noise);
  }
  
  result = (int)sp_noise_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_entry_name_set(lua_State* L) {
  int SWIG_arg = 0;
  nano_entry *arg1 = (nano_entry *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("nano_entry::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_entry::name",1,"nano_entry *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("nano_entry::name",2,"char [50]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_entry,0))){
    SWIG_fail_ptr("nano_entry_name_set",1,SWIGTYPE_p_nano_entry);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 50-1);
      arg1->name[50-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_entry_name_get(lua_State* L) {
  int SWIG_arg = 0;
  nano_entry *arg1 = (nano_entry *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("nano_entry::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_entry::name",1,"nano_entry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_entry,0))){
    SWIG_fail_ptr("nano_entry_name_get",1,SWIGTYPE_p_nano_entry);
  }
  
  result = (char *)(char *) ((arg1)->name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_entry_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  nano_entry *arg1 = (nano_entry *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("nano_entry::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_entry::pos",1,"nano_entry *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("nano_entry::pos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_entry,0))){
    SWIG_fail_ptr("nano_entry_pos_set",1,SWIGTYPE_p_nano_entry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("nano_entry_pos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_entry_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  nano_entry *arg1 = (nano_entry *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("nano_entry::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_entry::pos",1,"nano_entry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_entry,0))){
    SWIG_fail_ptr("nano_entry_pos_get",1,SWIGTYPE_p_nano_entry);
  }
  
  result =  ((arg1)->pos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_entry_size_set(lua_State* L) {
  int SWIG_arg = 0;
  nano_entry *arg1 = (nano_entry *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("nano_entry::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_entry::size",1,"nano_entry *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("nano_entry::size",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_entry,0))){
    SWIG_fail_ptr("nano_entry_size_set",1,SWIGTYPE_p_nano_entry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("nano_entry_size_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_entry_size_get(lua_State* L) {
  int SWIG_arg = 0;
  nano_entry *arg1 = (nano_entry *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("nano_entry::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_entry::size",1,"nano_entry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_entry,0))){
    SWIG_fail_ptr("nano_entry_size_get",1,SWIGTYPE_p_nano_entry);
  }
  
  result =  ((arg1)->size);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_entry_speed_set(lua_State* L) {
  int SWIG_arg = 0;
  nano_entry *arg1 = (nano_entry *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("nano_entry::speed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_entry::speed",1,"nano_entry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nano_entry::speed",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_entry,0))){
    SWIG_fail_ptr("nano_entry_speed_set",1,SWIGTYPE_p_nano_entry);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->speed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_entry_speed_get(lua_State* L) {
  int SWIG_arg = 0;
  nano_entry *arg1 = (nano_entry *) 0 ;
  float result;
  
  SWIG_check_num_args("nano_entry::speed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_entry::speed",1,"nano_entry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_entry,0))){
    SWIG_fail_ptr("nano_entry_speed_get",1,SWIGTYPE_p_nano_entry);
  }
  
  result = (float) ((arg1)->speed);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_entry_next_set(lua_State* L) {
  int SWIG_arg = 0;
  nano_entry *arg1 = (nano_entry *) 0 ;
  nano_entry *arg2 = (nano_entry *) 0 ;
  
  SWIG_check_num_args("nano_entry::next",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_entry::next",1,"nano_entry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("nano_entry::next",2,"nano_entry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_entry,0))){
    SWIG_fail_ptr("nano_entry_next_set",1,SWIGTYPE_p_nano_entry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_nano_entry,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("nano_entry_next_set",2,SWIGTYPE_p_nano_entry);
  }
  
  if (arg1) (arg1)->next = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_entry_next_get(lua_State* L) {
  int SWIG_arg = 0;
  nano_entry *arg1 = (nano_entry *) 0 ;
  nano_entry *result = 0 ;
  
  SWIG_check_num_args("nano_entry::next",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_entry::next",1,"nano_entry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_entry,0))){
    SWIG_fail_ptr("nano_entry_next_get",1,SWIGTYPE_p_nano_entry);
  }
  
  result = (nano_entry *) ((arg1)->next);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_nano_entry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_nano_entry(lua_State* L) {
  int SWIG_arg = 0;
  nano_entry *result = 0 ;
  
  SWIG_check_num_args("nano_entry::nano_entry",0,0)
  result = (nano_entry *)new nano_entry();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_nano_entry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_nano_entry(void *obj) {
nano_entry *arg1 = (nano_entry *) obj;
delete arg1;
}
static int _proxy__wrap_new_nano_entry(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_nano_entry);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_nano_entry_attributes[] = {
    { "name", _wrap_nano_entry_name_get, _wrap_nano_entry_name_set },
    { "pos", _wrap_nano_entry_pos_get, _wrap_nano_entry_pos_set },
    { "size", _wrap_nano_entry_size_get, _wrap_nano_entry_size_set },
    { "speed", _wrap_nano_entry_speed_get, _wrap_nano_entry_speed_set },
    { "next", _wrap_nano_entry_next_get, _wrap_nano_entry_next_set },
    {0,0,0}
};
static swig_lua_method swig_nano_entry_methods[]= {
    {0,0}
};
static swig_lua_method swig_nano_entry_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_nano_entry_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_nano_entry_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_nano_entry_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_nano_entry_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_nano_entry_Sf_SwigStatic = {
    "nano_entry",
    swig_nano_entry_Sf_SwigStatic_methods,
    swig_nano_entry_Sf_SwigStatic_attributes,
    swig_nano_entry_Sf_SwigStatic_constants,
    swig_nano_entry_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_nano_entry_bases[] = {0};
static const char *swig_nano_entry_base_names[] = {0};
static swig_lua_class _wrap_class_nano_entry = { "nano_entry", "nano_entry", &SWIGTYPE_p_nano_entry,_proxy__wrap_new_nano_entry, swig_delete_nano_entry, swig_nano_entry_methods, swig_nano_entry_attributes, &swig_nano_entry_Sf_SwigStatic, swig_nano_entry_meta, swig_nano_entry_bases, swig_nano_entry_base_names };

static int _wrap_nano_dict_nval_set(lua_State* L) {
  int SWIG_arg = 0;
  nano_dict *arg1 = (nano_dict *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("nano_dict::nval",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_dict::nval",1,"nano_dict *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nano_dict::nval",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_dict,0))){
    SWIG_fail_ptr("nano_dict_nval_set",1,SWIGTYPE_p_nano_dict);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nval = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_dict_nval_get(lua_State* L) {
  int SWIG_arg = 0;
  nano_dict *arg1 = (nano_dict *) 0 ;
  int result;
  
  SWIG_check_num_args("nano_dict::nval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_dict::nval",1,"nano_dict *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_dict,0))){
    SWIG_fail_ptr("nano_dict_nval_get",1,SWIGTYPE_p_nano_dict);
  }
  
  result = (int) ((arg1)->nval);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_dict_init_set(lua_State* L) {
  int SWIG_arg = 0;
  nano_dict *arg1 = (nano_dict *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("nano_dict::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_dict::init",1,"nano_dict *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nano_dict::init",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_dict,0))){
    SWIG_fail_ptr("nano_dict_init_set",1,SWIGTYPE_p_nano_dict);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->init = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_dict_init_get(lua_State* L) {
  int SWIG_arg = 0;
  nano_dict *arg1 = (nano_dict *) 0 ;
  int result;
  
  SWIG_check_num_args("nano_dict::init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_dict::init",1,"nano_dict *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_dict,0))){
    SWIG_fail_ptr("nano_dict_init_get",1,SWIGTYPE_p_nano_dict);
  }
  
  result = (int) ((arg1)->init);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_dict_root_set(lua_State* L) {
  int SWIG_arg = 0;
  nano_dict *arg1 = (nano_dict *) 0 ;
  nano_entry *arg2 = (nano_entry *) 0 ;
  
  SWIG_check_num_args("nano_dict::root",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_dict::root",1,"nano_dict *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("nano_dict::root",2,"nano_entry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_dict,0))){
    SWIG_fail_ptr("nano_dict_root_set",1,SWIGTYPE_p_nano_dict);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_nano_entry,0))){
    SWIG_fail_ptr("nano_dict_root_set",2,SWIGTYPE_p_nano_entry);
  }
  
  if (arg1) (arg1)->root = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_dict_root_get(lua_State* L) {
  int SWIG_arg = 0;
  nano_dict *arg1 = (nano_dict *) 0 ;
  nano_entry *result = 0 ;
  
  SWIG_check_num_args("nano_dict::root",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_dict::root",1,"nano_dict *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_dict,0))){
    SWIG_fail_ptr("nano_dict_root_get",1,SWIGTYPE_p_nano_dict);
  }
  
  result = (nano_entry *)& ((arg1)->root);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_nano_entry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_dict_last_set(lua_State* L) {
  int SWIG_arg = 0;
  nano_dict *arg1 = (nano_dict *) 0 ;
  nano_entry *arg2 = (nano_entry *) 0 ;
  
  SWIG_check_num_args("nano_dict::last",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_dict::last",1,"nano_dict *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("nano_dict::last",2,"nano_entry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_dict,0))){
    SWIG_fail_ptr("nano_dict_last_set",1,SWIGTYPE_p_nano_dict);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_nano_entry,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("nano_dict_last_set",2,SWIGTYPE_p_nano_entry);
  }
  
  if (arg1) (arg1)->last = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nano_dict_last_get(lua_State* L) {
  int SWIG_arg = 0;
  nano_dict *arg1 = (nano_dict *) 0 ;
  nano_entry *result = 0 ;
  
  SWIG_check_num_args("nano_dict::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nano_dict::last",1,"nano_dict *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nano_dict,0))){
    SWIG_fail_ptr("nano_dict_last_get",1,SWIGTYPE_p_nano_dict);
  }
  
  result = (nano_entry *) ((arg1)->last);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_nano_entry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_nano_dict(lua_State* L) {
  int SWIG_arg = 0;
  nano_dict *result = 0 ;
  
  SWIG_check_num_args("nano_dict::nano_dict",0,0)
  result = (nano_dict *)new nano_dict();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_nano_dict,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_nano_dict(void *obj) {
nano_dict *arg1 = (nano_dict *) obj;
delete arg1;
}
static int _proxy__wrap_new_nano_dict(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_nano_dict);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_nano_dict_attributes[] = {
    { "nval", _wrap_nano_dict_nval_get, _wrap_nano_dict_nval_set },
    { "init", _wrap_nano_dict_init_get, _wrap_nano_dict_init_set },
    { "root", _wrap_nano_dict_root_get, _wrap_nano_dict_root_set },
    { "last", _wrap_nano_dict_last_get, _wrap_nano_dict_last_set },
    {0,0,0}
};
static swig_lua_method swig_nano_dict_methods[]= {
    {0,0}
};
static swig_lua_method swig_nano_dict_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_nano_dict_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_nano_dict_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_nano_dict_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_nano_dict_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_nano_dict_Sf_SwigStatic = {
    "nano_dict",
    swig_nano_dict_Sf_SwigStatic_methods,
    swig_nano_dict_Sf_SwigStatic_attributes,
    swig_nano_dict_Sf_SwigStatic_constants,
    swig_nano_dict_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_nano_dict_bases[] = {0};
static const char *swig_nano_dict_base_names[] = {0};
static swig_lua_class _wrap_class_nano_dict = { "nano_dict", "nano_dict", &SWIGTYPE_p_nano_dict,_proxy__wrap_new_nano_dict, swig_delete_nano_dict, swig_nano_dict_methods, swig_nano_dict_attributes, &swig_nano_dict_Sf_SwigStatic, swig_nano_dict_meta, swig_nano_dict_bases, swig_nano_dict_base_names };

static int _wrap_nanosamp_ini_set(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("nanosamp::ini",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::ini",1,"nanosamp *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("nanosamp::ini",2,"char [100]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_ini_set",1,SWIGTYPE_p_nanosamp);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->ini, (const char *)arg2, 100-1);
      arg1->ini[100-1] = 0;
    } else {
      arg1->ini[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_ini_get(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("nanosamp::ini",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::ini",1,"nanosamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_ini_get",1,SWIGTYPE_p_nanosamp);
  }
  
  result = (char *)(char *) ((arg1)->ini);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_curpos_set(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("nanosamp::curpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::curpos",1,"nanosamp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nanosamp::curpos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_curpos_set",1,SWIGTYPE_p_nanosamp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->curpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_curpos_get(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  float result;
  
  SWIG_check_num_args("nanosamp::curpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::curpos",1,"nanosamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_curpos_get",1,SWIGTYPE_p_nanosamp);
  }
  
  result = (float) ((arg1)->curpos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_dict_set(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  nano_dict *arg2 = (nano_dict *) 0 ;
  
  SWIG_check_num_args("nanosamp::dict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::dict",1,"nanosamp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("nanosamp::dict",2,"nano_dict *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_dict_set",1,SWIGTYPE_p_nanosamp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_nano_dict,0))){
    SWIG_fail_ptr("nanosamp_dict_set",2,SWIGTYPE_p_nano_dict);
  }
  
  if (arg1) (arg1)->dict = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_dict_get(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  nano_dict *result = 0 ;
  
  SWIG_check_num_args("nanosamp::dict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::dict",1,"nanosamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_dict_get",1,SWIGTYPE_p_nanosamp);
  }
  
  result = (nano_dict *)& ((arg1)->dict);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_nano_dict,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_selected_set(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("nanosamp::selected",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::selected",1,"nanosamp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nanosamp::selected",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_selected_set",1,SWIGTYPE_p_nanosamp);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->selected = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_selected_get(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  int result;
  
  SWIG_check_num_args("nanosamp::selected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::selected",1,"nanosamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_selected_get",1,SWIGTYPE_p_nanosamp);
  }
  
  result = (int) ((arg1)->selected);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_sample_set(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  nano_entry *arg2 = (nano_entry *) 0 ;
  
  SWIG_check_num_args("nanosamp::sample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::sample",1,"nanosamp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("nanosamp::sample",2,"nano_entry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_sample_set",1,SWIGTYPE_p_nanosamp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_nano_entry,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("nanosamp_sample_set",2,SWIGTYPE_p_nano_entry);
  }
  
  if (arg1) (arg1)->sample = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_sample_get(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  nano_entry *result = 0 ;
  
  SWIG_check_num_args("nanosamp::sample",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::sample",1,"nanosamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_sample_get",1,SWIGTYPE_p_nanosamp);
  }
  
  result = (nano_entry *) ((arg1)->sample);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_nano_entry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_index_set(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  nano_entry **arg2 = (nano_entry **) 0 ;
  
  SWIG_check_num_args("nanosamp::index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::index",1,"nanosamp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("nanosamp::index",2,"nano_entry **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_index_set",1,SWIGTYPE_p_nanosamp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_nano_entry,0))){
    SWIG_fail_ptr("nanosamp_index_set",2,SWIGTYPE_p_p_nano_entry);
  }
  
  if (arg1) (arg1)->index = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_index_get(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  nano_entry **result = 0 ;
  
  SWIG_check_num_args("nanosamp::index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::index",1,"nanosamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_index_get",1,SWIGTYPE_p_nanosamp);
  }
  
  result = (nano_entry **) ((arg1)->index);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_nano_entry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_ft_set(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("nanosamp::ft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::ft",1,"nanosamp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("nanosamp::ft",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_ft_set",1,SWIGTYPE_p_nanosamp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("nanosamp_ft_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_ft_get(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("nanosamp::ft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::ft",1,"nanosamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_ft_get",1,SWIGTYPE_p_nanosamp);
  }
  
  result = (sp_ftbl *) ((arg1)->ft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("nanosamp::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::sr",1,"nanosamp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nanosamp::sr",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_sr_set",1,SWIGTYPE_p_nanosamp);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanosamp_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *arg1 = (nanosamp *) 0 ;
  int result;
  
  SWIG_check_num_args("nanosamp::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nanosamp::sr",1,"nanosamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_nanosamp,0))){
    SWIG_fail_ptr("nanosamp_sr_get",1,SWIGTYPE_p_nanosamp);
  }
  
  result = (int) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_nanosamp(lua_State* L) {
  int SWIG_arg = 0;
  nanosamp *result = 0 ;
  
  SWIG_check_num_args("nanosamp::nanosamp",0,0)
  result = (nanosamp *)new nanosamp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_nanosamp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_nanosamp(void *obj) {
nanosamp *arg1 = (nanosamp *) obj;
delete arg1;
}
static int _proxy__wrap_new_nanosamp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_nanosamp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_nanosamp_attributes[] = {
    { "ini", _wrap_nanosamp_ini_get, _wrap_nanosamp_ini_set },
    { "curpos", _wrap_nanosamp_curpos_get, _wrap_nanosamp_curpos_set },
    { "dict", _wrap_nanosamp_dict_get, _wrap_nanosamp_dict_set },
    { "selected", _wrap_nanosamp_selected_get, _wrap_nanosamp_selected_set },
    { "sample", _wrap_nanosamp_sample_get, _wrap_nanosamp_sample_set },
    { "index", _wrap_nanosamp_index_get, _wrap_nanosamp_index_set },
    { "ft", _wrap_nanosamp_ft_get, _wrap_nanosamp_ft_set },
    { "sr", _wrap_nanosamp_sr_get, _wrap_nanosamp_sr_set },
    {0,0,0}
};
static swig_lua_method swig_nanosamp_methods[]= {
    {0,0}
};
static swig_lua_method swig_nanosamp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_nanosamp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_nanosamp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_nanosamp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_nanosamp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_nanosamp_SwigStatic = {
    "nanosamp",
    swig_nanosamp_SwigStatic_methods,
    swig_nanosamp_SwigStatic_attributes,
    swig_nanosamp_SwigStatic_constants,
    swig_nanosamp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_nanosamp_bases[] = {0};
static const char *swig_nanosamp_base_names[] = {0};
static swig_lua_class _wrap_class_nanosamp = { "nanosamp", "nanosamp", &SWIGTYPE_p_nanosamp,_proxy__wrap_new_nanosamp, swig_delete_nanosamp, swig_nanosamp_methods, swig_nanosamp_attributes, &swig_nanosamp_SwigStatic, swig_nanosamp_meta, swig_nanosamp_bases, swig_nanosamp_base_names };

static int _wrap_sp_nsmp_smp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_nsmp *arg1 = (sp_nsmp *) 0 ;
  nanosamp *arg2 = (nanosamp *) 0 ;
  
  SWIG_check_num_args("sp_nsmp::smp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_nsmp::smp",1,"sp_nsmp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_nsmp::smp",2,"nanosamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_nsmp,0))){
    SWIG_fail_ptr("sp_nsmp_smp_set",1,SWIGTYPE_p_sp_nsmp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_nanosamp,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_nsmp_smp_set",2,SWIGTYPE_p_nanosamp);
  }
  
  if (arg1) (arg1)->smp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_nsmp_smp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_nsmp *arg1 = (sp_nsmp *) 0 ;
  nanosamp *result = 0 ;
  
  SWIG_check_num_args("sp_nsmp::smp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_nsmp::smp",1,"sp_nsmp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_nsmp,0))){
    SWIG_fail_ptr("sp_nsmp_smp_get",1,SWIGTYPE_p_sp_nsmp);
  }
  
  result = (nanosamp *) ((arg1)->smp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_nanosamp,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_nsmp_index_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_nsmp *arg1 = (sp_nsmp *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_nsmp::index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_nsmp::index",1,"sp_nsmp *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_nsmp::index",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_nsmp,0))){
    SWIG_fail_ptr("sp_nsmp_index_set",1,SWIGTYPE_p_sp_nsmp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_nsmp_index_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->index = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_nsmp_index_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_nsmp *arg1 = (sp_nsmp *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_nsmp::index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_nsmp::index",1,"sp_nsmp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_nsmp,0))){
    SWIG_fail_ptr("sp_nsmp_index_get",1,SWIGTYPE_p_sp_nsmp);
  }
  
  result =  ((arg1)->index);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_nsmp_triggered_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_nsmp *arg1 = (sp_nsmp *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_nsmp::triggered",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_nsmp::triggered",1,"sp_nsmp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_nsmp::triggered",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_nsmp,0))){
    SWIG_fail_ptr("sp_nsmp_triggered_set",1,SWIGTYPE_p_sp_nsmp);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->triggered = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_nsmp_triggered_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_nsmp *arg1 = (sp_nsmp *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_nsmp::triggered",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_nsmp::triggered",1,"sp_nsmp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_nsmp,0))){
    SWIG_fail_ptr("sp_nsmp_triggered_get",1,SWIGTYPE_p_sp_nsmp);
  }
  
  result = (int) ((arg1)->triggered);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_nsmp(lua_State* L) {
  int SWIG_arg = 0;
  sp_nsmp *result = 0 ;
  
  SWIG_check_num_args("sp_nsmp::sp_nsmp",0,0)
  result = (sp_nsmp *)new sp_nsmp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_nsmp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_nsmp(void *obj) {
sp_nsmp *arg1 = (sp_nsmp *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_nsmp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_nsmp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_nsmp_attributes[] = {
    { "smp", _wrap_sp_nsmp_smp_get, _wrap_sp_nsmp_smp_set },
    { "index", _wrap_sp_nsmp_index_get, _wrap_sp_nsmp_index_set },
    { "triggered", _wrap_sp_nsmp_triggered_get, _wrap_sp_nsmp_triggered_set },
    {0,0,0}
};
static swig_lua_method swig_sp_nsmp_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_nsmp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_nsmp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_nsmp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_nsmp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_nsmp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_nsmp_SwigStatic = {
    "sp_nsmp",
    swig_sp_nsmp_SwigStatic_methods,
    swig_sp_nsmp_SwigStatic_attributes,
    swig_sp_nsmp_SwigStatic_constants,
    swig_sp_nsmp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_nsmp_bases[] = {0};
static const char *swig_sp_nsmp_base_names[] = {0};
static swig_lua_class _wrap_class_sp_nsmp = { "sp_nsmp", "sp_nsmp", &SWIGTYPE_p_sp_nsmp,_proxy__wrap_new_sp_nsmp, swig_delete_sp_nsmp, swig_sp_nsmp_methods, swig_sp_nsmp_attributes, &swig_sp_nsmp_SwigStatic, swig_sp_nsmp_meta, swig_sp_nsmp_bases, swig_sp_nsmp_base_names };

static int _wrap_sp_nsmp_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_nsmp **arg1 = (sp_nsmp **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_nsmp_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_nsmp_create",1,"sp_nsmp **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_nsmp,0))){
    SWIG_fail_ptr("sp_nsmp_create",1,SWIGTYPE_p_p_sp_nsmp);
  }
  
  result = (int)sp_nsmp_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_nsmp_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_nsmp **arg1 = (sp_nsmp **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_nsmp_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_nsmp_destroy",1,"sp_nsmp **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_nsmp,0))){
    SWIG_fail_ptr("sp_nsmp_destroy",1,SWIGTYPE_p_p_sp_nsmp);
  }
  
  result = (int)sp_nsmp_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_nsmp_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_nsmp *arg2 = (sp_nsmp *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_nsmp_init",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_nsmp_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_nsmp_init",2,"sp_nsmp *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_nsmp_init",3,"sp_ftbl *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("sp_nsmp_init",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("sp_nsmp_init",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_nsmp_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_nsmp,0))){
    SWIG_fail_ptr("sp_nsmp_init",2,SWIGTYPE_p_sp_nsmp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_nsmp_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (int)sp_nsmp_init(arg1,arg2,arg3,arg4,(char const *)arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_nsmp_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_nsmp *arg2 = (sp_nsmp *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_nsmp_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_nsmp_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_nsmp_compute",2,"sp_nsmp *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_nsmp_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_nsmp_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_nsmp_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_nsmp,0))){
    SWIG_fail_ptr("sp_nsmp_compute",2,SWIGTYPE_p_sp_nsmp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_nsmp_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_nsmp_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_nsmp_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_nsmp_print_index(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_nsmp *arg2 = (sp_nsmp *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_nsmp_print_index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_nsmp_print_index",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_nsmp_print_index",2,"sp_nsmp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_nsmp_print_index",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_nsmp,0))){
    SWIG_fail_ptr("sp_nsmp_print_index",2,SWIGTYPE_p_sp_nsmp);
  }
  
  result = (int)sp_nsmp_print_index(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc *arg1 = (sp_osc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_osc::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc::freq",1,"sp_osc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_osc::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_freq_set",1,SWIGTYPE_p_sp_osc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc *arg1 = (sp_osc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_osc::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc::freq",1,"sp_osc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_freq_get",1,SWIGTYPE_p_sp_osc);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc *arg1 = (sp_osc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_osc::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc::amp",1,"sp_osc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_osc::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_amp_set",1,SWIGTYPE_p_sp_osc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc *arg1 = (sp_osc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_osc::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc::amp",1,"sp_osc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_amp_get",1,SWIGTYPE_p_sp_osc);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_iphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc *arg1 = (sp_osc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_osc::iphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc::iphs",1,"sp_osc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_osc::iphs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_iphs_set",1,SWIGTYPE_p_sp_osc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_iphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc *arg1 = (sp_osc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_osc::iphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc::iphs",1,"sp_osc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_iphs_get",1,SWIGTYPE_p_sp_osc);
  }
  
  result = (float) ((arg1)->iphs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_lphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc *arg1 = (sp_osc *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_osc::lphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc::lphs",1,"sp_osc *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_osc::lphs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_lphs_set",1,SWIGTYPE_p_sp_osc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_osc_lphs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->lphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_lphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc *arg1 = (sp_osc *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_osc::lphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc::lphs",1,"sp_osc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_lphs_get",1,SWIGTYPE_p_sp_osc);
  }
  
  result =  ((arg1)->lphs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_tbl_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc *arg1 = (sp_osc *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_osc::tbl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc::tbl",1,"sp_osc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_osc::tbl",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_tbl_set",1,SWIGTYPE_p_sp_osc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_osc_tbl_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->tbl = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_tbl_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc *arg1 = (sp_osc *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_osc::tbl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc::tbl",1,"sp_osc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_tbl_get",1,SWIGTYPE_p_sp_osc);
  }
  
  result = (sp_ftbl *) ((arg1)->tbl);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_inc_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc *arg1 = (sp_osc *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_osc::inc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc::inc",1,"sp_osc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_osc::inc",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_inc_set",1,SWIGTYPE_p_sp_osc);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->inc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_inc_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc *arg1 = (sp_osc *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_osc::inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc::inc",1,"sp_osc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_inc_get",1,SWIGTYPE_p_sp_osc);
  }
  
  result = (int) ((arg1)->inc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_osc(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc *result = 0 ;
  
  SWIG_check_num_args("sp_osc::sp_osc",0,0)
  result = (sp_osc *)new sp_osc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_osc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_osc(void *obj) {
sp_osc *arg1 = (sp_osc *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_osc(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_osc);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_osc_attributes[] = {
    { "freq", _wrap_sp_osc_freq_get, _wrap_sp_osc_freq_set },
    { "amp", _wrap_sp_osc_amp_get, _wrap_sp_osc_amp_set },
    { "iphs", _wrap_sp_osc_iphs_get, _wrap_sp_osc_iphs_set },
    { "lphs", _wrap_sp_osc_lphs_get, _wrap_sp_osc_lphs_set },
    { "tbl", _wrap_sp_osc_tbl_get, _wrap_sp_osc_tbl_set },
    { "inc", _wrap_sp_osc_inc_get, _wrap_sp_osc_inc_set },
    {0,0,0}
};
static swig_lua_method swig_sp_osc_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_osc_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_osc_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_osc_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_osc_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_osc_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_osc_Sf_SwigStatic = {
    "sp_osc",
    swig_sp_osc_Sf_SwigStatic_methods,
    swig_sp_osc_Sf_SwigStatic_attributes,
    swig_sp_osc_Sf_SwigStatic_constants,
    swig_sp_osc_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_osc_bases[] = {0};
static const char *swig_sp_osc_base_names[] = {0};
static swig_lua_class _wrap_class_sp_osc = { "sp_osc", "sp_osc", &SWIGTYPE_p_sp_osc,_proxy__wrap_new_sp_osc, swig_delete_sp_osc, swig_sp_osc_methods, swig_sp_osc_attributes, &swig_sp_osc_Sf_SwigStatic, swig_sp_osc_meta, swig_sp_osc_bases, swig_sp_osc_base_names };

static int _wrap_sp_osc_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc **arg1 = (sp_osc **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_osc_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc_create",1,"sp_osc **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_create",1,SWIGTYPE_p_p_sp_osc);
  }
  
  result = (int)sp_osc_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_osc **arg1 = (sp_osc **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_osc_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc_destroy",1,"sp_osc **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_destroy",1,SWIGTYPE_p_p_sp_osc);
  }
  
  result = (int)sp_osc_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_osc *arg2 = (sp_osc *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  float arg4 ;
  int result;
  
  SWIG_check_num_args("sp_osc_init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_osc_init",2,"sp_osc *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_osc_init",3,"sp_ftbl *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("sp_osc_init",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_osc_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_init",2,SWIGTYPE_p_sp_osc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_osc_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  result = (int)sp_osc_init(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_osc_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_osc *arg2 = (sp_osc *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_osc_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_osc_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_osc_compute",2,"sp_osc *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_osc_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_osc_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_osc_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_osc,0))){
    SWIG_fail_ptr("sp_osc_compute",2,SWIGTYPE_p_sp_osc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_osc_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_osc_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_osc_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_oscmorph::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::freq",1,"sp_oscmorph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_oscmorph::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_freq_set",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_oscmorph::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::freq",1,"sp_oscmorph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_freq_get",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_oscmorph::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::amp",1,"sp_oscmorph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_oscmorph::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_amp_set",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_oscmorph::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::amp",1,"sp_oscmorph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_amp_get",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_iphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_oscmorph::iphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::iphs",1,"sp_oscmorph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_oscmorph::iphs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_iphs_set",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_iphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_oscmorph::iphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::iphs",1,"sp_oscmorph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_iphs_get",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  result = (float) ((arg1)->iphs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_lphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_oscmorph::lphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::lphs",1,"sp_oscmorph *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_oscmorph::lphs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_lphs_set",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_oscmorph_lphs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->lphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_lphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_oscmorph::lphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::lphs",1,"sp_oscmorph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_lphs_get",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  result =  ((arg1)->lphs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_tbl_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  sp_ftbl **arg2 = (sp_ftbl **) 0 ;
  
  SWIG_check_num_args("sp_oscmorph::tbl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::tbl",1,"sp_oscmorph *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_oscmorph::tbl",2,"sp_ftbl **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_tbl_set",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_oscmorph_tbl_set",2,SWIGTYPE_p_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->tbl = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_tbl_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  sp_ftbl **result = 0 ;
  
  SWIG_check_num_args("sp_oscmorph::tbl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::tbl",1,"sp_oscmorph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_tbl_get",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  result = (sp_ftbl **) ((arg1)->tbl);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_inc_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_oscmorph::inc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::inc",1,"sp_oscmorph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_oscmorph::inc",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_inc_set",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->inc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_inc_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_oscmorph::inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::inc",1,"sp_oscmorph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_inc_get",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  result = (int) ((arg1)->inc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_wtpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_oscmorph::wtpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::wtpos",1,"sp_oscmorph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_oscmorph::wtpos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_wtpos_set",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->wtpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_wtpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_oscmorph::wtpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::wtpos",1,"sp_oscmorph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_wtpos_get",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  result = (float) ((arg1)->wtpos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_nft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_oscmorph::nft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::nft",1,"sp_oscmorph *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_oscmorph::nft",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_nft_set",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_nft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *arg1 = (sp_oscmorph *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_oscmorph::nft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph::nft",1,"sp_oscmorph *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_nft_get",1,SWIGTYPE_p_sp_oscmorph);
  }
  
  result = (int) ((arg1)->nft);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_oscmorph(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph *result = 0 ;
  
  SWIG_check_num_args("sp_oscmorph::sp_oscmorph",0,0)
  result = (sp_oscmorph *)new sp_oscmorph();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_oscmorph,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_oscmorph(void *obj) {
sp_oscmorph *arg1 = (sp_oscmorph *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_oscmorph(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_oscmorph);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_oscmorph_attributes[] = {
    { "freq", _wrap_sp_oscmorph_freq_get, _wrap_sp_oscmorph_freq_set },
    { "amp", _wrap_sp_oscmorph_amp_get, _wrap_sp_oscmorph_amp_set },
    { "iphs", _wrap_sp_oscmorph_iphs_get, _wrap_sp_oscmorph_iphs_set },
    { "lphs", _wrap_sp_oscmorph_lphs_get, _wrap_sp_oscmorph_lphs_set },
    { "tbl", _wrap_sp_oscmorph_tbl_get, _wrap_sp_oscmorph_tbl_set },
    { "inc", _wrap_sp_oscmorph_inc_get, _wrap_sp_oscmorph_inc_set },
    { "wtpos", _wrap_sp_oscmorph_wtpos_get, _wrap_sp_oscmorph_wtpos_set },
    { "nft", _wrap_sp_oscmorph_nft_get, _wrap_sp_oscmorph_nft_set },
    {0,0,0}
};
static swig_lua_method swig_sp_oscmorph_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_oscmorph_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_oscmorph_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_oscmorph_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_oscmorph_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_oscmorph_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_oscmorph_Sf_SwigStatic = {
    "sp_oscmorph",
    swig_sp_oscmorph_Sf_SwigStatic_methods,
    swig_sp_oscmorph_Sf_SwigStatic_attributes,
    swig_sp_oscmorph_Sf_SwigStatic_constants,
    swig_sp_oscmorph_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_oscmorph_bases[] = {0};
static const char *swig_sp_oscmorph_base_names[] = {0};
static swig_lua_class _wrap_class_sp_oscmorph = { "sp_oscmorph", "sp_oscmorph", &SWIGTYPE_p_sp_oscmorph,_proxy__wrap_new_sp_oscmorph, swig_delete_sp_oscmorph, swig_sp_oscmorph_methods, swig_sp_oscmorph_attributes, &swig_sp_oscmorph_Sf_SwigStatic, swig_sp_oscmorph_meta, swig_sp_oscmorph_bases, swig_sp_oscmorph_base_names };

static int _wrap_sp_oscmorph_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph **arg1 = (sp_oscmorph **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_oscmorph_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph_create",1,"sp_oscmorph **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_create",1,SWIGTYPE_p_p_sp_oscmorph);
  }
  
  result = (int)sp_oscmorph_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_oscmorph **arg1 = (sp_oscmorph **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_oscmorph_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph_destroy",1,"sp_oscmorph **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_destroy",1,SWIGTYPE_p_p_sp_oscmorph);
  }
  
  result = (int)sp_oscmorph_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_oscmorph *arg2 = (sp_oscmorph *) 0 ;
  sp_ftbl **arg3 = (sp_ftbl **) 0 ;
  int arg4 ;
  float arg5 ;
  int result;
  
  SWIG_check_num_args("sp_oscmorph_init",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_oscmorph_init",2,"sp_oscmorph *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_oscmorph_init",3,"sp_ftbl **");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("sp_oscmorph_init",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("sp_oscmorph_init",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_oscmorph_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_init",2,SWIGTYPE_p_sp_oscmorph);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_oscmorph_init",3,SWIGTYPE_p_p_sp_ftbl);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (int)sp_oscmorph_init(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_oscmorph_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_oscmorph *arg2 = (sp_oscmorph *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_oscmorph_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_oscmorph_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_oscmorph_compute",2,"sp_oscmorph *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_oscmorph_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_oscmorph_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_oscmorph_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_oscmorph,0))){
    SWIG_fail_ptr("sp_oscmorph_compute",2,SWIGTYPE_p_sp_oscmorph);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_oscmorph_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_oscmorph_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_oscmorph_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pan2_pan_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pan2 *arg1 = (sp_pan2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pan2::pan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pan2::pan",1,"sp_pan2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pan2::pan",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pan2,0))){
    SWIG_fail_ptr("sp_pan2_pan_set",1,SWIGTYPE_p_sp_pan2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pan = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pan2_pan_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pan2 *arg1 = (sp_pan2 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pan2::pan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pan2::pan",1,"sp_pan2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pan2,0))){
    SWIG_fail_ptr("sp_pan2_pan_get",1,SWIGTYPE_p_sp_pan2);
  }
  
  result = (float) ((arg1)->pan);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pan2_type_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pan2 *arg1 = (sp_pan2 *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_pan2::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pan2::type",1,"sp_pan2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pan2::type",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pan2,0))){
    SWIG_fail_ptr("sp_pan2_type_set",1,SWIGTYPE_p_sp_pan2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_pan2_type_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pan2_type_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pan2 *arg1 = (sp_pan2 *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_pan2::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pan2::type",1,"sp_pan2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pan2,0))){
    SWIG_fail_ptr("sp_pan2_type_get",1,SWIGTYPE_p_sp_pan2);
  }
  
  result =  ((arg1)->type);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_pan2(lua_State* L) {
  int SWIG_arg = 0;
  sp_pan2 *result = 0 ;
  
  SWIG_check_num_args("sp_pan2::sp_pan2",0,0)
  result = (sp_pan2 *)new sp_pan2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_pan2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_pan2(void *obj) {
sp_pan2 *arg1 = (sp_pan2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_pan2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_pan2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_pan2_attributes[] = {
    { "pan", _wrap_sp_pan2_pan_get, _wrap_sp_pan2_pan_set },
    { "type", _wrap_sp_pan2_type_get, _wrap_sp_pan2_type_set },
    {0,0,0}
};
static swig_lua_method swig_sp_pan2_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_pan2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_pan2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_pan2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_pan2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_pan2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_pan2_Sf_SwigStatic = {
    "sp_pan2",
    swig_sp_pan2_Sf_SwigStatic_methods,
    swig_sp_pan2_Sf_SwigStatic_attributes,
    swig_sp_pan2_Sf_SwigStatic_constants,
    swig_sp_pan2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_pan2_bases[] = {0};
static const char *swig_sp_pan2_base_names[] = {0};
static swig_lua_class _wrap_class_sp_pan2 = { "sp_pan2", "sp_pan2", &SWIGTYPE_p_sp_pan2,_proxy__wrap_new_sp_pan2, swig_delete_sp_pan2, swig_sp_pan2_methods, swig_sp_pan2_attributes, &swig_sp_pan2_Sf_SwigStatic, swig_sp_pan2_meta, swig_sp_pan2_bases, swig_sp_pan2_base_names };

static int _wrap_sp_pan2_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_pan2 **arg1 = (sp_pan2 **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pan2_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pan2_create",1,"sp_pan2 **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_pan2,0))){
    SWIG_fail_ptr("sp_pan2_create",1,SWIGTYPE_p_p_sp_pan2);
  }
  
  result = (int)sp_pan2_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pan2_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_pan2 **arg1 = (sp_pan2 **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pan2_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pan2_destroy",1,"sp_pan2 **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_pan2,0))){
    SWIG_fail_ptr("sp_pan2_destroy",1,SWIGTYPE_p_p_sp_pan2);
  }
  
  result = (int)sp_pan2_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pan2_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_pan2 *arg2 = (sp_pan2 *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pan2_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pan2_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pan2_init",2,"sp_pan2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_pan2_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_pan2,0))){
    SWIG_fail_ptr("sp_pan2_init",2,SWIGTYPE_p_sp_pan2);
  }
  
  result = (int)sp_pan2_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pan2_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_pan2 *arg2 = (sp_pan2 *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pan2_compute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pan2_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pan2_compute",2,"sp_pan2 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_pan2_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_pan2_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_pan2_compute",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_pan2_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_pan2,0))){
    SWIG_fail_ptr("sp_pan2_compute",2,SWIGTYPE_p_sp_pan2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pan2_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pan2_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pan2_compute",5,SWIGTYPE_p_float);
  }
  
  result = (int)sp_pan2_compute(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_panst_pan_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_panst *arg1 = (sp_panst *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_panst::pan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_panst::pan",1,"sp_panst *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_panst::pan",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_panst,0))){
    SWIG_fail_ptr("sp_panst_pan_set",1,SWIGTYPE_p_sp_panst);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pan = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_panst_pan_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_panst *arg1 = (sp_panst *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_panst::pan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_panst::pan",1,"sp_panst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_panst,0))){
    SWIG_fail_ptr("sp_panst_pan_get",1,SWIGTYPE_p_sp_panst);
  }
  
  result = (float) ((arg1)->pan);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_panst_type_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_panst *arg1 = (sp_panst *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_panst::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_panst::type",1,"sp_panst *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_panst::type",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_panst,0))){
    SWIG_fail_ptr("sp_panst_type_set",1,SWIGTYPE_p_sp_panst);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_panst_type_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_panst_type_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_panst *arg1 = (sp_panst *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_panst::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_panst::type",1,"sp_panst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_panst,0))){
    SWIG_fail_ptr("sp_panst_type_get",1,SWIGTYPE_p_sp_panst);
  }
  
  result =  ((arg1)->type);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_panst(lua_State* L) {
  int SWIG_arg = 0;
  sp_panst *result = 0 ;
  
  SWIG_check_num_args("sp_panst::sp_panst",0,0)
  result = (sp_panst *)new sp_panst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_panst,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_panst(void *obj) {
sp_panst *arg1 = (sp_panst *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_panst(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_panst);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_panst_attributes[] = {
    { "pan", _wrap_sp_panst_pan_get, _wrap_sp_panst_pan_set },
    { "type", _wrap_sp_panst_type_get, _wrap_sp_panst_type_set },
    {0,0,0}
};
static swig_lua_method swig_sp_panst_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_panst_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_panst_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_panst_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_panst_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_panst_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_panst_Sf_SwigStatic = {
    "sp_panst",
    swig_sp_panst_Sf_SwigStatic_methods,
    swig_sp_panst_Sf_SwigStatic_attributes,
    swig_sp_panst_Sf_SwigStatic_constants,
    swig_sp_panst_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_panst_bases[] = {0};
static const char *swig_sp_panst_base_names[] = {0};
static swig_lua_class _wrap_class_sp_panst = { "sp_panst", "sp_panst", &SWIGTYPE_p_sp_panst,_proxy__wrap_new_sp_panst, swig_delete_sp_panst, swig_sp_panst_methods, swig_sp_panst_attributes, &swig_sp_panst_Sf_SwigStatic, swig_sp_panst_meta, swig_sp_panst_bases, swig_sp_panst_base_names };

static int _wrap_sp_panst_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_panst **arg1 = (sp_panst **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_panst_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_panst_create",1,"sp_panst **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_panst,0))){
    SWIG_fail_ptr("sp_panst_create",1,SWIGTYPE_p_p_sp_panst);
  }
  
  result = (int)sp_panst_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_panst_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_panst **arg1 = (sp_panst **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_panst_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_panst_destroy",1,"sp_panst **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_panst,0))){
    SWIG_fail_ptr("sp_panst_destroy",1,SWIGTYPE_p_p_sp_panst);
  }
  
  result = (int)sp_panst_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_panst_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_panst *arg2 = (sp_panst *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_panst_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_panst_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_panst_init",2,"sp_panst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_panst_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_panst,0))){
    SWIG_fail_ptr("sp_panst_init",2,SWIGTYPE_p_sp_panst);
  }
  
  result = (int)sp_panst_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_panst_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_panst *arg2 = (sp_panst *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_panst_compute",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_panst_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_panst_compute",2,"sp_panst *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_panst_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_panst_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_panst_compute",5,"float *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("sp_panst_compute",6,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_panst_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_panst,0))){
    SWIG_fail_ptr("sp_panst_compute",2,SWIGTYPE_p_sp_panst);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_panst_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_panst_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_panst_compute",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_panst_compute",6,SWIGTYPE_p_float);
  }
  
  result = (int)sp_panst_compute(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::fc",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::fc",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_fc_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::fc",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_fc_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_v_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::v",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::v",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_v_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->v = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_v_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::v",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_v_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->v);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_q_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::q",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::q",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_q_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_q_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::q",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_q_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::mode",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::mode",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_mode_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::mode",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_mode_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_xnm1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::xnm1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::xnm1",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::xnm1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_xnm1_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->xnm1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_xnm1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::xnm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::xnm1",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_xnm1_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->xnm1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_xnm2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::xnm2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::xnm2",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::xnm2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_xnm2_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->xnm2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_xnm2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::xnm2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::xnm2",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_xnm2_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->xnm2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_ynm1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::ynm1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::ynm1",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::ynm1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_ynm1_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ynm1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_ynm1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::ynm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::ynm1",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_ynm1_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->ynm1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_ynm2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::ynm2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::ynm2",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::ynm2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_ynm2_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ynm2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_ynm2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::ynm2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::ynm2",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_ynm2_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->ynm2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_prv_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::prv_fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::prv_fc",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::prv_fc",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_prv_fc_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prv_fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_prv_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::prv_fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::prv_fc",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_prv_fc_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->prv_fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_prv_v_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::prv_v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::prv_v",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::prv_v",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_prv_v_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prv_v = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_prv_v_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::prv_v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::prv_v",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_prv_v_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->prv_v);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_prv_q_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::prv_q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::prv_q",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::prv_q",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_prv_q_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prv_q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_prv_q_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::prv_q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::prv_q",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_prv_q_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->prv_q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_b0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::b0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::b0",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::b0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_b0_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_b0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::b0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::b0",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_b0_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->b0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_b1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::b1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::b1",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::b1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_b1_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_b1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::b1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::b1",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_b1_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->b1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_b2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::b2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::b2",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::b2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_b2_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_b2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::b2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::b2",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_b2_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->b2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_a1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::a1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::a1",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::a1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_a1_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_a1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::a1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::a1",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_a1_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->a1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_a2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::a2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::a2",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::a2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_a2_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_a2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::a2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::a2",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_a2_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->a2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_tpidsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pareq::tpidsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::tpidsr",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::tpidsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_tpidsr_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tpidsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_tpidsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pareq::tpidsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::tpidsr",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_tpidsr_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (float) ((arg1)->tpidsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_imode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_pareq::imode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::imode",1,"sp_pareq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pareq::imode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_imode_set",1,SWIGTYPE_p_sp_pareq);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->imode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_imode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *arg1 = (sp_pareq *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pareq::imode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq::imode",1,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_imode_get",1,SWIGTYPE_p_sp_pareq);
  }
  
  result = (int) ((arg1)->imode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_pareq(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq *result = 0 ;
  
  SWIG_check_num_args("sp_pareq::sp_pareq",0,0)
  result = (sp_pareq *)new sp_pareq();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_pareq,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_pareq(void *obj) {
sp_pareq *arg1 = (sp_pareq *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_pareq(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_pareq);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_pareq_attributes[] = {
    { "fc", _wrap_sp_pareq_fc_get, _wrap_sp_pareq_fc_set },
    { "v", _wrap_sp_pareq_v_get, _wrap_sp_pareq_v_set },
    { "q", _wrap_sp_pareq_q_get, _wrap_sp_pareq_q_set },
    { "mode", _wrap_sp_pareq_mode_get, _wrap_sp_pareq_mode_set },
    { "xnm1", _wrap_sp_pareq_xnm1_get, _wrap_sp_pareq_xnm1_set },
    { "xnm2", _wrap_sp_pareq_xnm2_get, _wrap_sp_pareq_xnm2_set },
    { "ynm1", _wrap_sp_pareq_ynm1_get, _wrap_sp_pareq_ynm1_set },
    { "ynm2", _wrap_sp_pareq_ynm2_get, _wrap_sp_pareq_ynm2_set },
    { "prv_fc", _wrap_sp_pareq_prv_fc_get, _wrap_sp_pareq_prv_fc_set },
    { "prv_v", _wrap_sp_pareq_prv_v_get, _wrap_sp_pareq_prv_v_set },
    { "prv_q", _wrap_sp_pareq_prv_q_get, _wrap_sp_pareq_prv_q_set },
    { "b0", _wrap_sp_pareq_b0_get, _wrap_sp_pareq_b0_set },
    { "b1", _wrap_sp_pareq_b1_get, _wrap_sp_pareq_b1_set },
    { "b2", _wrap_sp_pareq_b2_get, _wrap_sp_pareq_b2_set },
    { "a1", _wrap_sp_pareq_a1_get, _wrap_sp_pareq_a1_set },
    { "a2", _wrap_sp_pareq_a2_get, _wrap_sp_pareq_a2_set },
    { "tpidsr", _wrap_sp_pareq_tpidsr_get, _wrap_sp_pareq_tpidsr_set },
    { "imode", _wrap_sp_pareq_imode_get, _wrap_sp_pareq_imode_set },
    {0,0,0}
};
static swig_lua_method swig_sp_pareq_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_pareq_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_pareq_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_pareq_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_pareq_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_pareq_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_pareq_Sf_SwigStatic = {
    "sp_pareq",
    swig_sp_pareq_Sf_SwigStatic_methods,
    swig_sp_pareq_Sf_SwigStatic_attributes,
    swig_sp_pareq_Sf_SwigStatic_constants,
    swig_sp_pareq_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_pareq_bases[] = {0};
static const char *swig_sp_pareq_base_names[] = {0};
static swig_lua_class _wrap_class_sp_pareq = { "sp_pareq", "sp_pareq", &SWIGTYPE_p_sp_pareq,_proxy__wrap_new_sp_pareq, swig_delete_sp_pareq, swig_sp_pareq_methods, swig_sp_pareq_attributes, &swig_sp_pareq_Sf_SwigStatic, swig_sp_pareq_meta, swig_sp_pareq_bases, swig_sp_pareq_base_names };

static int _wrap_sp_pareq_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq **arg1 = (sp_pareq **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pareq_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq_create",1,"sp_pareq **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_create",1,SWIGTYPE_p_p_sp_pareq);
  }
  
  result = (int)sp_pareq_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_pareq **arg1 = (sp_pareq **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pareq_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq_destroy",1,"sp_pareq **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_destroy",1,SWIGTYPE_p_p_sp_pareq);
  }
  
  result = (int)sp_pareq_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_pareq *arg2 = (sp_pareq *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pareq_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pareq_init",2,"sp_pareq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_pareq_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_init",2,SWIGTYPE_p_sp_pareq);
  }
  
  result = (int)sp_pareq_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pareq_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_pareq *arg2 = (sp_pareq *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pareq_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pareq_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pareq_compute",2,"sp_pareq *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_pareq_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_pareq_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_pareq_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_pareq,0))){
    SWIG_fail_ptr("sp_pareq_compute",2,SWIGTYPE_p_sp_pareq);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pareq_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pareq_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_pareq_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_windowsize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_paulstretch::windowsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::windowsize",1,"sp_paulstretch *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_paulstretch::windowsize",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_windowsize_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_paulstretch_windowsize_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->windowsize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_windowsize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_paulstretch::windowsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::windowsize",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_windowsize_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result =  ((arg1)->windowsize);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_half_windowsize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_paulstretch::half_windowsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::half_windowsize",1,"sp_paulstretch *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_paulstretch::half_windowsize",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_half_windowsize_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_paulstretch_half_windowsize_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->half_windowsize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_half_windowsize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_paulstretch::half_windowsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::half_windowsize",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_half_windowsize_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result =  ((arg1)->half_windowsize);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_stretch_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_paulstretch::stretch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::stretch",1,"sp_paulstretch *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_paulstretch::stretch",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_stretch_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->stretch = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_stretch_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_paulstretch::stretch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::stretch",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_stretch_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (float) ((arg1)->stretch);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_start_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_paulstretch::start_pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::start_pos",1,"sp_paulstretch *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_paulstretch::start_pos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_start_pos_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->start_pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_start_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_paulstretch::start_pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::start_pos",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_start_pos_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (float) ((arg1)->start_pos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_displace_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_paulstretch::displace_pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::displace_pos",1,"sp_paulstretch *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_paulstretch::displace_pos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_displace_pos_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->displace_pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_displace_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_paulstretch::displace_pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::displace_pos",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_displace_pos_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (float) ((arg1)->displace_pos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_window_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::window",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::window",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::window",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_window_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_paulstretch_window_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->window = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_window_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_paulstretch::window",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::window",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_window_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (float *) ((arg1)->window);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_old_windowed_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::old_windowed_buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::old_windowed_buf",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::old_windowed_buf",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_old_windowed_buf_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_paulstretch_old_windowed_buf_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->old_windowed_buf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_old_windowed_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_paulstretch::old_windowed_buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::old_windowed_buf",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_old_windowed_buf_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (float *) ((arg1)->old_windowed_buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_hinv_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::hinv_buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::hinv_buf",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::hinv_buf",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_hinv_buf_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_paulstretch_hinv_buf_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->hinv_buf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_hinv_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_paulstretch::hinv_buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::hinv_buf",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_hinv_buf_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (float *) ((arg1)->hinv_buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::buf",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::buf",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_buf_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_paulstretch_buf_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->buf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_paulstretch::buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::buf",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_buf_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (float *) ((arg1)->buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_output_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::output",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::output",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_output_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_paulstretch_output_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->output = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_output_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_paulstretch::output",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::output",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_output_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (float *) ((arg1)->output);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_ft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::ft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::ft",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::ft",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_ft_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_paulstretch_ft_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_ft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_paulstretch::ft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::ft",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_ft_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (sp_ftbl *) ((arg1)->ft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_fft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  kiss_fftr_cfg arg2 = (kiss_fftr_cfg) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::fft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::fft",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::fft",2,"kiss_fftr_cfg");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_fft_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kiss_fftr_state,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_paulstretch_fft_set",2,SWIGTYPE_p_kiss_fftr_state);
  }
  
  if (arg1) (arg1)->fft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_fft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  kiss_fftr_cfg result;
  
  SWIG_check_num_args("sp_paulstretch::fft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::fft",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_fft_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (kiss_fftr_cfg) ((arg1)->fft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kiss_fftr_state,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_ifft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  kiss_fftr_cfg arg2 = (kiss_fftr_cfg) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::ifft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::ifft",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::ifft",2,"kiss_fftr_cfg");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_ifft_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kiss_fftr_state,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_paulstretch_ifft_set",2,SWIGTYPE_p_kiss_fftr_state);
  }
  
  if (arg1) (arg1)->ifft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_ifft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  kiss_fftr_cfg result;
  
  SWIG_check_num_args("sp_paulstretch::ifft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::ifft",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_ifft_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (kiss_fftr_cfg) ((arg1)->ifft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kiss_fftr_state,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_tmp1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  kiss_fft_cpx *arg2 = (kiss_fft_cpx *) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::tmp1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::tmp1",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::tmp1",2,"kiss_fft_cpx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_tmp1_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kiss_fft_cpx,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_paulstretch_tmp1_set",2,SWIGTYPE_p_kiss_fft_cpx);
  }
  
  if (arg1) (arg1)->tmp1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_tmp1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  kiss_fft_cpx *result = 0 ;
  
  SWIG_check_num_args("sp_paulstretch::tmp1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::tmp1",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_tmp1_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (kiss_fft_cpx *) ((arg1)->tmp1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kiss_fft_cpx,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_tmp2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  kiss_fft_cpx *arg2 = (kiss_fft_cpx *) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::tmp2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::tmp2",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::tmp2",2,"kiss_fft_cpx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_tmp2_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kiss_fft_cpx,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_paulstretch_tmp2_set",2,SWIGTYPE_p_kiss_fft_cpx);
  }
  
  if (arg1) (arg1)->tmp2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_tmp2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  kiss_fft_cpx *result = 0 ;
  
  SWIG_check_num_args("sp_paulstretch::tmp2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::tmp2",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_tmp2_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (kiss_fft_cpx *) ((arg1)->tmp2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kiss_fft_cpx,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_counter_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_paulstretch::counter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::counter",1,"sp_paulstretch *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_paulstretch::counter",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_counter_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_paulstretch_counter_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->counter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_counter_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_paulstretch::counter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::counter",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_counter_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result =  ((arg1)->counter);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_m_window_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::m_window",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::m_window",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::m_window",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_m_window_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_paulstretch_m_window_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->m_window = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_m_window_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_paulstretch::m_window",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::m_window",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_m_window_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (sp_auxdata *)& ((arg1)->m_window);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_m_old_windowed_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::m_old_windowed_buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::m_old_windowed_buf",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::m_old_windowed_buf",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_m_old_windowed_buf_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_paulstretch_m_old_windowed_buf_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->m_old_windowed_buf = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_m_old_windowed_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_paulstretch::m_old_windowed_buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::m_old_windowed_buf",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_m_old_windowed_buf_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (sp_auxdata *)& ((arg1)->m_old_windowed_buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_m_hinv_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::m_hinv_buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::m_hinv_buf",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::m_hinv_buf",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_m_hinv_buf_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_paulstretch_m_hinv_buf_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->m_hinv_buf = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_m_hinv_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_paulstretch::m_hinv_buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::m_hinv_buf",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_m_hinv_buf_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (sp_auxdata *)& ((arg1)->m_hinv_buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_m_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::m_buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::m_buf",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::m_buf",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_m_buf_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_paulstretch_m_buf_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->m_buf = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_m_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_paulstretch::m_buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::m_buf",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_m_buf_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (sp_auxdata *)& ((arg1)->m_buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_m_output_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_paulstretch::m_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::m_output",1,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch::m_output",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_m_output_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_paulstretch_m_output_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->m_output = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_m_output_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_paulstretch::m_output",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::m_output",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_m_output_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (sp_auxdata *)& ((arg1)->m_output);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_wrap_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("sp_paulstretch::wrap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::wrap",1,"sp_paulstretch *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_paulstretch::wrap",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_wrap_set",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->wrap = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_wrap_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *arg1 = (sp_paulstretch *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("sp_paulstretch::wrap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch::wrap",1,"sp_paulstretch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_wrap_get",1,SWIGTYPE_p_sp_paulstretch);
  }
  
  result = (unsigned char) ((arg1)->wrap);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_paulstretch(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch *result = 0 ;
  
  SWIG_check_num_args("sp_paulstretch::sp_paulstretch",0,0)
  result = (sp_paulstretch *)new sp_paulstretch();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_paulstretch,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_paulstretch(void *obj) {
sp_paulstretch *arg1 = (sp_paulstretch *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_paulstretch(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_paulstretch);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_paulstretch_attributes[] = {
    { "windowsize", _wrap_sp_paulstretch_windowsize_get, _wrap_sp_paulstretch_windowsize_set },
    { "half_windowsize", _wrap_sp_paulstretch_half_windowsize_get, _wrap_sp_paulstretch_half_windowsize_set },
    { "stretch", _wrap_sp_paulstretch_stretch_get, _wrap_sp_paulstretch_stretch_set },
    { "start_pos", _wrap_sp_paulstretch_start_pos_get, _wrap_sp_paulstretch_start_pos_set },
    { "displace_pos", _wrap_sp_paulstretch_displace_pos_get, _wrap_sp_paulstretch_displace_pos_set },
    { "window", _wrap_sp_paulstretch_window_get, _wrap_sp_paulstretch_window_set },
    { "old_windowed_buf", _wrap_sp_paulstretch_old_windowed_buf_get, _wrap_sp_paulstretch_old_windowed_buf_set },
    { "hinv_buf", _wrap_sp_paulstretch_hinv_buf_get, _wrap_sp_paulstretch_hinv_buf_set },
    { "buf", _wrap_sp_paulstretch_buf_get, _wrap_sp_paulstretch_buf_set },
    { "output", _wrap_sp_paulstretch_output_get, _wrap_sp_paulstretch_output_set },
    { "ft", _wrap_sp_paulstretch_ft_get, _wrap_sp_paulstretch_ft_set },
    { "fft", _wrap_sp_paulstretch_fft_get, _wrap_sp_paulstretch_fft_set },
    { "ifft", _wrap_sp_paulstretch_ifft_get, _wrap_sp_paulstretch_ifft_set },
    { "tmp1", _wrap_sp_paulstretch_tmp1_get, _wrap_sp_paulstretch_tmp1_set },
    { "tmp2", _wrap_sp_paulstretch_tmp2_get, _wrap_sp_paulstretch_tmp2_set },
    { "counter", _wrap_sp_paulstretch_counter_get, _wrap_sp_paulstretch_counter_set },
    { "m_window", _wrap_sp_paulstretch_m_window_get, _wrap_sp_paulstretch_m_window_set },
    { "m_old_windowed_buf", _wrap_sp_paulstretch_m_old_windowed_buf_get, _wrap_sp_paulstretch_m_old_windowed_buf_set },
    { "m_hinv_buf", _wrap_sp_paulstretch_m_hinv_buf_get, _wrap_sp_paulstretch_m_hinv_buf_set },
    { "m_buf", _wrap_sp_paulstretch_m_buf_get, _wrap_sp_paulstretch_m_buf_set },
    { "m_output", _wrap_sp_paulstretch_m_output_get, _wrap_sp_paulstretch_m_output_set },
    { "wrap", _wrap_sp_paulstretch_wrap_get, _wrap_sp_paulstretch_wrap_set },
    {0,0,0}
};
static swig_lua_method swig_sp_paulstretch_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_paulstretch_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_paulstretch_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_paulstretch_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_paulstretch_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_paulstretch_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_paulstretch_Sf_SwigStatic = {
    "sp_paulstretch",
    swig_sp_paulstretch_Sf_SwigStatic_methods,
    swig_sp_paulstretch_Sf_SwigStatic_attributes,
    swig_sp_paulstretch_Sf_SwigStatic_constants,
    swig_sp_paulstretch_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_paulstretch_bases[] = {0};
static const char *swig_sp_paulstretch_base_names[] = {0};
static swig_lua_class _wrap_class_sp_paulstretch = { "sp_paulstretch", "sp_paulstretch", &SWIGTYPE_p_sp_paulstretch,_proxy__wrap_new_sp_paulstretch, swig_delete_sp_paulstretch, swig_sp_paulstretch_methods, swig_sp_paulstretch_attributes, &swig_sp_paulstretch_Sf_SwigStatic, swig_sp_paulstretch_meta, swig_sp_paulstretch_bases, swig_sp_paulstretch_base_names };

static int _wrap_sp_paulstretch_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch **arg1 = (sp_paulstretch **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_paulstretch_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch_create",1,"sp_paulstretch **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_create",1,SWIGTYPE_p_p_sp_paulstretch);
  }
  
  result = (int)sp_paulstretch_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_paulstretch **arg1 = (sp_paulstretch **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_paulstretch_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch_destroy",1,"sp_paulstretch **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_destroy",1,SWIGTYPE_p_p_sp_paulstretch);
  }
  
  result = (int)sp_paulstretch_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_paulstretch *arg2 = (sp_paulstretch *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  float arg4 ;
  float arg5 ;
  int result;
  
  SWIG_check_num_args("sp_paulstretch_init",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch_init",2,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_paulstretch_init",3,"sp_ftbl *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("sp_paulstretch_init",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("sp_paulstretch_init",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_paulstretch_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_init",2,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_paulstretch_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (int)sp_paulstretch_init(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_paulstretch_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_paulstretch *arg2 = (sp_paulstretch *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_paulstretch_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_paulstretch_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_paulstretch_compute",2,"sp_paulstretch *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_paulstretch_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_paulstretch_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_paulstretch_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_paulstretch,0))){
    SWIG_fail_ptr("sp_paulstretch_compute",2,SWIGTYPE_p_sp_paulstretch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_paulstretch_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_paulstretch_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_paulstretch_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pdhalf_amount_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pdhalf *arg1 = (sp_pdhalf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pdhalf::amount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pdhalf::amount",1,"sp_pdhalf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pdhalf::amount",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pdhalf,0))){
    SWIG_fail_ptr("sp_pdhalf_amount_set",1,SWIGTYPE_p_sp_pdhalf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pdhalf_amount_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pdhalf *arg1 = (sp_pdhalf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pdhalf::amount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pdhalf::amount",1,"sp_pdhalf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pdhalf,0))){
    SWIG_fail_ptr("sp_pdhalf_amount_get",1,SWIGTYPE_p_sp_pdhalf);
  }
  
  result = (float) ((arg1)->amount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pdhalf_ibipolar_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pdhalf *arg1 = (sp_pdhalf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pdhalf::ibipolar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pdhalf::ibipolar",1,"sp_pdhalf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pdhalf::ibipolar",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pdhalf,0))){
    SWIG_fail_ptr("sp_pdhalf_ibipolar_set",1,SWIGTYPE_p_sp_pdhalf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ibipolar = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pdhalf_ibipolar_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pdhalf *arg1 = (sp_pdhalf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pdhalf::ibipolar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pdhalf::ibipolar",1,"sp_pdhalf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pdhalf,0))){
    SWIG_fail_ptr("sp_pdhalf_ibipolar_get",1,SWIGTYPE_p_sp_pdhalf);
  }
  
  result = (float) ((arg1)->ibipolar);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pdhalf_ifullscale_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pdhalf *arg1 = (sp_pdhalf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pdhalf::ifullscale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pdhalf::ifullscale",1,"sp_pdhalf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pdhalf::ifullscale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pdhalf,0))){
    SWIG_fail_ptr("sp_pdhalf_ifullscale_set",1,SWIGTYPE_p_sp_pdhalf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ifullscale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pdhalf_ifullscale_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pdhalf *arg1 = (sp_pdhalf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pdhalf::ifullscale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pdhalf::ifullscale",1,"sp_pdhalf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pdhalf,0))){
    SWIG_fail_ptr("sp_pdhalf_ifullscale_get",1,SWIGTYPE_p_sp_pdhalf);
  }
  
  result = (float) ((arg1)->ifullscale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_pdhalf(lua_State* L) {
  int SWIG_arg = 0;
  sp_pdhalf *result = 0 ;
  
  SWIG_check_num_args("sp_pdhalf::sp_pdhalf",0,0)
  result = (sp_pdhalf *)new sp_pdhalf();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_pdhalf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_pdhalf(void *obj) {
sp_pdhalf *arg1 = (sp_pdhalf *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_pdhalf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_pdhalf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_pdhalf_attributes[] = {
    { "amount", _wrap_sp_pdhalf_amount_get, _wrap_sp_pdhalf_amount_set },
    { "ibipolar", _wrap_sp_pdhalf_ibipolar_get, _wrap_sp_pdhalf_ibipolar_set },
    { "ifullscale", _wrap_sp_pdhalf_ifullscale_get, _wrap_sp_pdhalf_ifullscale_set },
    {0,0,0}
};
static swig_lua_method swig_sp_pdhalf_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_pdhalf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_pdhalf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_pdhalf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_pdhalf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_pdhalf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_pdhalf_Sf_SwigStatic = {
    "sp_pdhalf",
    swig_sp_pdhalf_Sf_SwigStatic_methods,
    swig_sp_pdhalf_Sf_SwigStatic_attributes,
    swig_sp_pdhalf_Sf_SwigStatic_constants,
    swig_sp_pdhalf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_pdhalf_bases[] = {0};
static const char *swig_sp_pdhalf_base_names[] = {0};
static swig_lua_class _wrap_class_sp_pdhalf = { "sp_pdhalf", "sp_pdhalf", &SWIGTYPE_p_sp_pdhalf,_proxy__wrap_new_sp_pdhalf, swig_delete_sp_pdhalf, swig_sp_pdhalf_methods, swig_sp_pdhalf_attributes, &swig_sp_pdhalf_Sf_SwigStatic, swig_sp_pdhalf_meta, swig_sp_pdhalf_bases, swig_sp_pdhalf_base_names };

static int _wrap_sp_pdhalf_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_pdhalf **arg1 = (sp_pdhalf **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pdhalf_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pdhalf_create",1,"sp_pdhalf **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_pdhalf,0))){
    SWIG_fail_ptr("sp_pdhalf_create",1,SWIGTYPE_p_p_sp_pdhalf);
  }
  
  result = (int)sp_pdhalf_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pdhalf_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_pdhalf **arg1 = (sp_pdhalf **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pdhalf_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pdhalf_destroy",1,"sp_pdhalf **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_pdhalf,0))){
    SWIG_fail_ptr("sp_pdhalf_destroy",1,SWIGTYPE_p_p_sp_pdhalf);
  }
  
  result = (int)sp_pdhalf_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pdhalf_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_pdhalf *arg2 = (sp_pdhalf *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pdhalf_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pdhalf_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pdhalf_init",2,"sp_pdhalf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_pdhalf_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_pdhalf,0))){
    SWIG_fail_ptr("sp_pdhalf_init",2,SWIGTYPE_p_sp_pdhalf);
  }
  
  result = (int)sp_pdhalf_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pdhalf_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_pdhalf *arg2 = (sp_pdhalf *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pdhalf_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pdhalf_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pdhalf_compute",2,"sp_pdhalf *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_pdhalf_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_pdhalf_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_pdhalf_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_pdhalf,0))){
    SWIG_fail_ptr("sp_pdhalf_compute",2,SWIGTYPE_p_sp_pdhalf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pdhalf_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pdhalf_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_pdhalf_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_atk_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_peaklim::atk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::atk",1,"sp_peaklim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_peaklim::atk",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_atk_set",1,SWIGTYPE_p_sp_peaklim);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->atk = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_atk_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_peaklim::atk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::atk",1,"sp_peaklim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_atk_get",1,SWIGTYPE_p_sp_peaklim);
  }
  
  result = (float) ((arg1)->atk);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_rel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_peaklim::rel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::rel",1,"sp_peaklim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_peaklim::rel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_rel_set",1,SWIGTYPE_p_sp_peaklim);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_rel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_peaklim::rel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::rel",1,"sp_peaklim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_rel_get",1,SWIGTYPE_p_sp_peaklim);
  }
  
  result = (float) ((arg1)->rel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_thresh_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_peaklim::thresh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::thresh",1,"sp_peaklim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_peaklim::thresh",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_thresh_set",1,SWIGTYPE_p_sp_peaklim);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->thresh = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_thresh_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_peaklim::thresh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::thresh",1,"sp_peaklim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_thresh_get",1,SWIGTYPE_p_sp_peaklim);
  }
  
  result = (float) ((arg1)->thresh);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_patk_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_peaklim::patk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::patk",1,"sp_peaklim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_peaklim::patk",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_patk_set",1,SWIGTYPE_p_sp_peaklim);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->patk = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_patk_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_peaklim::patk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::patk",1,"sp_peaklim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_patk_get",1,SWIGTYPE_p_sp_peaklim);
  }
  
  result = (float) ((arg1)->patk);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_prel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_peaklim::prel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::prel",1,"sp_peaklim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_peaklim::prel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_prel_set",1,SWIGTYPE_p_sp_peaklim);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_prel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_peaklim::prel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::prel",1,"sp_peaklim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_prel_get",1,SWIGTYPE_p_sp_peaklim);
  }
  
  result = (float) ((arg1)->prel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_b0_r_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_peaklim::b0_r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::b0_r",1,"sp_peaklim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_peaklim::b0_r",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_b0_r_set",1,SWIGTYPE_p_sp_peaklim);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b0_r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_b0_r_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_peaklim::b0_r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::b0_r",1,"sp_peaklim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_b0_r_get",1,SWIGTYPE_p_sp_peaklim);
  }
  
  result = (float) ((arg1)->b0_r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_a1_r_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_peaklim::a1_r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::a1_r",1,"sp_peaklim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_peaklim::a1_r",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_a1_r_set",1,SWIGTYPE_p_sp_peaklim);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a1_r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_a1_r_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_peaklim::a1_r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::a1_r",1,"sp_peaklim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_a1_r_get",1,SWIGTYPE_p_sp_peaklim);
  }
  
  result = (float) ((arg1)->a1_r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_b0_a_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_peaklim::b0_a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::b0_a",1,"sp_peaklim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_peaklim::b0_a",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_b0_a_set",1,SWIGTYPE_p_sp_peaklim);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b0_a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_b0_a_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_peaklim::b0_a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::b0_a",1,"sp_peaklim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_b0_a_get",1,SWIGTYPE_p_sp_peaklim);
  }
  
  result = (float) ((arg1)->b0_a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_a1_a_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_peaklim::a1_a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::a1_a",1,"sp_peaklim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_peaklim::a1_a",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_a1_a_set",1,SWIGTYPE_p_sp_peaklim);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a1_a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_a1_a_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_peaklim::a1_a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::a1_a",1,"sp_peaklim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_a1_a_get",1,SWIGTYPE_p_sp_peaklim);
  }
  
  result = (float) ((arg1)->a1_a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_level_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_peaklim::level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::level",1,"sp_peaklim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_peaklim::level",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_level_set",1,SWIGTYPE_p_sp_peaklim);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->level = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_level_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *arg1 = (sp_peaklim *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_peaklim::level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim::level",1,"sp_peaklim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_level_get",1,SWIGTYPE_p_sp_peaklim);
  }
  
  result = (float) ((arg1)->level);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_peaklim(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim *result = 0 ;
  
  SWIG_check_num_args("sp_peaklim::sp_peaklim",0,0)
  result = (sp_peaklim *)new sp_peaklim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_peaklim,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_peaklim(void *obj) {
sp_peaklim *arg1 = (sp_peaklim *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_peaklim(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_peaklim);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_peaklim_attributes[] = {
    { "atk", _wrap_sp_peaklim_atk_get, _wrap_sp_peaklim_atk_set },
    { "rel", _wrap_sp_peaklim_rel_get, _wrap_sp_peaklim_rel_set },
    { "thresh", _wrap_sp_peaklim_thresh_get, _wrap_sp_peaklim_thresh_set },
    { "patk", _wrap_sp_peaklim_patk_get, _wrap_sp_peaklim_patk_set },
    { "prel", _wrap_sp_peaklim_prel_get, _wrap_sp_peaklim_prel_set },
    { "b0_r", _wrap_sp_peaklim_b0_r_get, _wrap_sp_peaklim_b0_r_set },
    { "a1_r", _wrap_sp_peaklim_a1_r_get, _wrap_sp_peaklim_a1_r_set },
    { "b0_a", _wrap_sp_peaklim_b0_a_get, _wrap_sp_peaklim_b0_a_set },
    { "a1_a", _wrap_sp_peaklim_a1_a_get, _wrap_sp_peaklim_a1_a_set },
    { "level", _wrap_sp_peaklim_level_get, _wrap_sp_peaklim_level_set },
    {0,0,0}
};
static swig_lua_method swig_sp_peaklim_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_peaklim_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_peaklim_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_peaklim_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_peaklim_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_peaklim_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_peaklim_Sf_SwigStatic = {
    "sp_peaklim",
    swig_sp_peaklim_Sf_SwigStatic_methods,
    swig_sp_peaklim_Sf_SwigStatic_attributes,
    swig_sp_peaklim_Sf_SwigStatic_constants,
    swig_sp_peaklim_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_peaklim_bases[] = {0};
static const char *swig_sp_peaklim_base_names[] = {0};
static swig_lua_class _wrap_class_sp_peaklim = { "sp_peaklim", "sp_peaklim", &SWIGTYPE_p_sp_peaklim,_proxy__wrap_new_sp_peaklim, swig_delete_sp_peaklim, swig_sp_peaklim_methods, swig_sp_peaklim_attributes, &swig_sp_peaklim_Sf_SwigStatic, swig_sp_peaklim_meta, swig_sp_peaklim_bases, swig_sp_peaklim_base_names };

static int _wrap_sp_peaklim_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim **arg1 = (sp_peaklim **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_peaklim_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim_create",1,"sp_peaklim **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_create",1,SWIGTYPE_p_p_sp_peaklim);
  }
  
  result = (int)sp_peaklim_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_peaklim **arg1 = (sp_peaklim **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_peaklim_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim_destroy",1,"sp_peaklim **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_destroy",1,SWIGTYPE_p_p_sp_peaklim);
  }
  
  result = (int)sp_peaklim_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_peaklim *arg2 = (sp_peaklim *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_peaklim_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_peaklim_init",2,"sp_peaklim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_peaklim_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_init",2,SWIGTYPE_p_sp_peaklim);
  }
  
  result = (int)sp_peaklim_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_peaklim_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_peaklim *arg2 = (sp_peaklim *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_peaklim_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_peaklim_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_peaklim_compute",2,"sp_peaklim *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_peaklim_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_peaklim_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_peaklim_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_peaklim,0))){
    SWIG_fail_ptr("sp_peaklim_compute",2,SWIGTYPE_p_sp_peaklim);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_peaklim_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_peaklim_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_peaklim_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_faust_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("sp_phaser::faust",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::faust",1,"sp_phaser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phaser::faust",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_faust_set",1,SWIGTYPE_p_sp_phaser);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_phaser_faust_set");
  if (arg1) (arg1)->faust = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_faust_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("sp_phaser::faust",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::faust",1,"sp_phaser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_faust_get",1,SWIGTYPE_p_sp_phaser);
  }
  
  result = (void *) ((arg1)->faust);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_argpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_phaser::argpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::argpos",1,"sp_phaser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_phaser::argpos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_argpos_set",1,SWIGTYPE_p_sp_phaser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->argpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_argpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_phaser::argpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::argpos",1,"sp_phaser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_argpos_get",1,SWIGTYPE_p_sp_phaser);
  }
  
  result = (int) ((arg1)->argpos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_args_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float **arg2 ;
  
  SWIG_check_num_args("sp_phaser::args",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::args",1,"sp_phaser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phaser::args",2,"float *[10]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_args_set",1,SWIGTYPE_p_sp_phaser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("sp_phaser_args_set",2,SWIGTYPE_p_p_float);
  }
  
  {
    size_t ii;
    float * *b = (float * *) arg1->args;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((float * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_args_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("sp_phaser::args",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::args",1,"sp_phaser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_args_get",1,SWIGTYPE_p_sp_phaser);
  }
  
  result = (float **)(float **) ((arg1)->args);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_MaxNotch1Freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_phaser::MaxNotch1Freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::MaxNotch1Freq",1,"sp_phaser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phaser::MaxNotch1Freq",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_MaxNotch1Freq_set",1,SWIGTYPE_p_sp_phaser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_phaser_MaxNotch1Freq_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->MaxNotch1Freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_MaxNotch1Freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_phaser::MaxNotch1Freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::MaxNotch1Freq",1,"sp_phaser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_MaxNotch1Freq_get",1,SWIGTYPE_p_sp_phaser);
  }
  
  result = (float *) ((arg1)->MaxNotch1Freq);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_MinNotch1Freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_phaser::MinNotch1Freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::MinNotch1Freq",1,"sp_phaser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phaser::MinNotch1Freq",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_MinNotch1Freq_set",1,SWIGTYPE_p_sp_phaser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_phaser_MinNotch1Freq_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->MinNotch1Freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_MinNotch1Freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_phaser::MinNotch1Freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::MinNotch1Freq",1,"sp_phaser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_MinNotch1Freq_get",1,SWIGTYPE_p_sp_phaser);
  }
  
  result = (float *) ((arg1)->MinNotch1Freq);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_Notch_width_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_phaser::Notch_width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::Notch_width",1,"sp_phaser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phaser::Notch_width",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_Notch_width_set",1,SWIGTYPE_p_sp_phaser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_phaser_Notch_width_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->Notch_width = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_Notch_width_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_phaser::Notch_width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::Notch_width",1,"sp_phaser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_Notch_width_get",1,SWIGTYPE_p_sp_phaser);
  }
  
  result = (float *) ((arg1)->Notch_width);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_NotchFreq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_phaser::NotchFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::NotchFreq",1,"sp_phaser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phaser::NotchFreq",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_NotchFreq_set",1,SWIGTYPE_p_sp_phaser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_phaser_NotchFreq_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->NotchFreq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_NotchFreq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_phaser::NotchFreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::NotchFreq",1,"sp_phaser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_NotchFreq_get",1,SWIGTYPE_p_sp_phaser);
  }
  
  result = (float *) ((arg1)->NotchFreq);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_VibratoMode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_phaser::VibratoMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::VibratoMode",1,"sp_phaser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phaser::VibratoMode",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_VibratoMode_set",1,SWIGTYPE_p_sp_phaser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_phaser_VibratoMode_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->VibratoMode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_VibratoMode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_phaser::VibratoMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::VibratoMode",1,"sp_phaser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_VibratoMode_get",1,SWIGTYPE_p_sp_phaser);
  }
  
  result = (float *) ((arg1)->VibratoMode);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_depth_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_phaser::depth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::depth",1,"sp_phaser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phaser::depth",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_depth_set",1,SWIGTYPE_p_sp_phaser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_phaser_depth_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->depth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_depth_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_phaser::depth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::depth",1,"sp_phaser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_depth_get",1,SWIGTYPE_p_sp_phaser);
  }
  
  result = (float *) ((arg1)->depth);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_feedback_gain_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_phaser::feedback_gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::feedback_gain",1,"sp_phaser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phaser::feedback_gain",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_feedback_gain_set",1,SWIGTYPE_p_sp_phaser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_phaser_feedback_gain_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->feedback_gain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_feedback_gain_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_phaser::feedback_gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::feedback_gain",1,"sp_phaser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_feedback_gain_get",1,SWIGTYPE_p_sp_phaser);
  }
  
  result = (float *) ((arg1)->feedback_gain);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_invert_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_phaser::invert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::invert",1,"sp_phaser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phaser::invert",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_invert_set",1,SWIGTYPE_p_sp_phaser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_phaser_invert_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->invert = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_invert_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_phaser::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::invert",1,"sp_phaser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_invert_get",1,SWIGTYPE_p_sp_phaser);
  }
  
  result = (float *) ((arg1)->invert);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_level_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_phaser::level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::level",1,"sp_phaser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phaser::level",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_level_set",1,SWIGTYPE_p_sp_phaser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_phaser_level_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->level = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_level_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_phaser::level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::level",1,"sp_phaser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_level_get",1,SWIGTYPE_p_sp_phaser);
  }
  
  result = (float *) ((arg1)->level);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_lfobpm_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_phaser::lfobpm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::lfobpm",1,"sp_phaser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phaser::lfobpm",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_lfobpm_set",1,SWIGTYPE_p_sp_phaser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_phaser_lfobpm_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->lfobpm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_lfobpm_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *arg1 = (sp_phaser *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_phaser::lfobpm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser::lfobpm",1,"sp_phaser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_lfobpm_get",1,SWIGTYPE_p_sp_phaser);
  }
  
  result = (float *) ((arg1)->lfobpm);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_phaser(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser *result = 0 ;
  
  SWIG_check_num_args("sp_phaser::sp_phaser",0,0)
  result = (sp_phaser *)new sp_phaser();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_phaser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_phaser(void *obj) {
sp_phaser *arg1 = (sp_phaser *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_phaser(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_phaser);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_phaser_attributes[] = {
    { "faust", _wrap_sp_phaser_faust_get, _wrap_sp_phaser_faust_set },
    { "argpos", _wrap_sp_phaser_argpos_get, _wrap_sp_phaser_argpos_set },
    { "args", _wrap_sp_phaser_args_get, _wrap_sp_phaser_args_set },
    { "MaxNotch1Freq", _wrap_sp_phaser_MaxNotch1Freq_get, _wrap_sp_phaser_MaxNotch1Freq_set },
    { "MinNotch1Freq", _wrap_sp_phaser_MinNotch1Freq_get, _wrap_sp_phaser_MinNotch1Freq_set },
    { "Notch_width", _wrap_sp_phaser_Notch_width_get, _wrap_sp_phaser_Notch_width_set },
    { "NotchFreq", _wrap_sp_phaser_NotchFreq_get, _wrap_sp_phaser_NotchFreq_set },
    { "VibratoMode", _wrap_sp_phaser_VibratoMode_get, _wrap_sp_phaser_VibratoMode_set },
    { "depth", _wrap_sp_phaser_depth_get, _wrap_sp_phaser_depth_set },
    { "feedback_gain", _wrap_sp_phaser_feedback_gain_get, _wrap_sp_phaser_feedback_gain_set },
    { "invert", _wrap_sp_phaser_invert_get, _wrap_sp_phaser_invert_set },
    { "level", _wrap_sp_phaser_level_get, _wrap_sp_phaser_level_set },
    { "lfobpm", _wrap_sp_phaser_lfobpm_get, _wrap_sp_phaser_lfobpm_set },
    {0,0,0}
};
static swig_lua_method swig_sp_phaser_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_phaser_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_phaser_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_phaser_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_phaser_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_phaser_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_phaser_Sf_SwigStatic = {
    "sp_phaser",
    swig_sp_phaser_Sf_SwigStatic_methods,
    swig_sp_phaser_Sf_SwigStatic_attributes,
    swig_sp_phaser_Sf_SwigStatic_constants,
    swig_sp_phaser_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_phaser_bases[] = {0};
static const char *swig_sp_phaser_base_names[] = {0};
static swig_lua_class _wrap_class_sp_phaser = { "sp_phaser", "sp_phaser", &SWIGTYPE_p_sp_phaser,_proxy__wrap_new_sp_phaser, swig_delete_sp_phaser, swig_sp_phaser_methods, swig_sp_phaser_attributes, &swig_sp_phaser_Sf_SwigStatic, swig_sp_phaser_meta, swig_sp_phaser_bases, swig_sp_phaser_base_names };

static int _wrap_sp_phaser_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser **arg1 = (sp_phaser **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_phaser_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser_create",1,"sp_phaser **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_create",1,SWIGTYPE_p_p_sp_phaser);
  }
  
  result = (int)sp_phaser_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_phaser **arg1 = (sp_phaser **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_phaser_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser_destroy",1,"sp_phaser **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_destroy",1,SWIGTYPE_p_p_sp_phaser);
  }
  
  result = (int)sp_phaser_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_phaser *arg2 = (sp_phaser *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_phaser_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phaser_init",2,"sp_phaser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_phaser_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_init",2,SWIGTYPE_p_sp_phaser);
  }
  
  result = (int)sp_phaser_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phaser_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_phaser *arg2 = (sp_phaser *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_phaser_compute",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phaser_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phaser_compute",2,"sp_phaser *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_phaser_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_phaser_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_phaser_compute",5,"float *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("sp_phaser_compute",6,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_phaser_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_phaser,0))){
    SWIG_fail_ptr("sp_phaser_compute",2,SWIGTYPE_p_sp_phaser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_phaser_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_phaser_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_phaser_compute",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_phaser_compute",6,SWIGTYPE_p_float);
  }
  
  result = (int)sp_phaser_compute(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phasor_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phasor *arg1 = (sp_phasor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_phasor::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phasor::freq",1,"sp_phasor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_phasor::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phasor,0))){
    SWIG_fail_ptr("sp_phasor_freq_set",1,SWIGTYPE_p_sp_phasor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phasor_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phasor *arg1 = (sp_phasor *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_phasor::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phasor::freq",1,"sp_phasor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phasor,0))){
    SWIG_fail_ptr("sp_phasor_freq_get",1,SWIGTYPE_p_sp_phasor);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phasor_phs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phasor *arg1 = (sp_phasor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_phasor::phs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phasor::phs",1,"sp_phasor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_phasor::phs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phasor,0))){
    SWIG_fail_ptr("sp_phasor_phs_set",1,SWIGTYPE_p_sp_phasor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->phs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phasor_phs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phasor *arg1 = (sp_phasor *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_phasor::phs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phasor::phs",1,"sp_phasor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phasor,0))){
    SWIG_fail_ptr("sp_phasor_phs_get",1,SWIGTYPE_p_sp_phasor);
  }
  
  result = (float) ((arg1)->phs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phasor_curphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phasor *arg1 = (sp_phasor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_phasor::curphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phasor::curphs",1,"sp_phasor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_phasor::curphs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phasor,0))){
    SWIG_fail_ptr("sp_phasor_curphs_set",1,SWIGTYPE_p_sp_phasor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->curphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phasor_curphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phasor *arg1 = (sp_phasor *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_phasor::curphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phasor::curphs",1,"sp_phasor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phasor,0))){
    SWIG_fail_ptr("sp_phasor_curphs_get",1,SWIGTYPE_p_sp_phasor);
  }
  
  result = (float) ((arg1)->curphs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phasor_onedsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_phasor *arg1 = (sp_phasor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_phasor::onedsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phasor::onedsr",1,"sp_phasor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_phasor::onedsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phasor,0))){
    SWIG_fail_ptr("sp_phasor_onedsr_set",1,SWIGTYPE_p_sp_phasor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->onedsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phasor_onedsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_phasor *arg1 = (sp_phasor *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_phasor::onedsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phasor::onedsr",1,"sp_phasor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_phasor,0))){
    SWIG_fail_ptr("sp_phasor_onedsr_get",1,SWIGTYPE_p_sp_phasor);
  }
  
  result = (float) ((arg1)->onedsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_phasor(lua_State* L) {
  int SWIG_arg = 0;
  sp_phasor *result = 0 ;
  
  SWIG_check_num_args("sp_phasor::sp_phasor",0,0)
  result = (sp_phasor *)new sp_phasor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_phasor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_phasor(void *obj) {
sp_phasor *arg1 = (sp_phasor *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_phasor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_phasor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_phasor_attributes[] = {
    { "freq", _wrap_sp_phasor_freq_get, _wrap_sp_phasor_freq_set },
    { "phs", _wrap_sp_phasor_phs_get, _wrap_sp_phasor_phs_set },
    { "curphs", _wrap_sp_phasor_curphs_get, _wrap_sp_phasor_curphs_set },
    { "onedsr", _wrap_sp_phasor_onedsr_get, _wrap_sp_phasor_onedsr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_phasor_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_phasor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_phasor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_phasor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_phasor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_phasor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_phasor_Sf_SwigStatic = {
    "sp_phasor",
    swig_sp_phasor_Sf_SwigStatic_methods,
    swig_sp_phasor_Sf_SwigStatic_attributes,
    swig_sp_phasor_Sf_SwigStatic_constants,
    swig_sp_phasor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_phasor_bases[] = {0};
static const char *swig_sp_phasor_base_names[] = {0};
static swig_lua_class _wrap_class_sp_phasor = { "sp_phasor", "sp_phasor", &SWIGTYPE_p_sp_phasor,_proxy__wrap_new_sp_phasor, swig_delete_sp_phasor, swig_sp_phasor_methods, swig_sp_phasor_attributes, &swig_sp_phasor_Sf_SwigStatic, swig_sp_phasor_meta, swig_sp_phasor_bases, swig_sp_phasor_base_names };

static int _wrap_sp_phasor_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_phasor **arg1 = (sp_phasor **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_phasor_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phasor_create",1,"sp_phasor **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_phasor,0))){
    SWIG_fail_ptr("sp_phasor_create",1,SWIGTYPE_p_p_sp_phasor);
  }
  
  result = (int)sp_phasor_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phasor_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_phasor **arg1 = (sp_phasor **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_phasor_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phasor_destroy",1,"sp_phasor **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_phasor,0))){
    SWIG_fail_ptr("sp_phasor_destroy",1,SWIGTYPE_p_p_sp_phasor);
  }
  
  result = (int)sp_phasor_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phasor_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_phasor *arg2 = (sp_phasor *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("sp_phasor_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phasor_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phasor_init",2,"sp_phasor *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_phasor_init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_phasor_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_phasor,0))){
    SWIG_fail_ptr("sp_phasor_init",2,SWIGTYPE_p_sp_phasor);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)sp_phasor_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_phasor_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_phasor *arg2 = (sp_phasor *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_phasor_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_phasor_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_phasor_compute",2,"sp_phasor *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_phasor_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_phasor_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_phasor_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_phasor,0))){
    SWIG_fail_ptr("sp_phasor_compute",2,SWIGTYPE_p_sp_phasor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_phasor_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_phasor_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_phasor_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pinknoise::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::amp",1,"sp_pinknoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pinknoise::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_amp_set",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pinknoise::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::amp",1,"sp_pinknoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_amp_get",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_newrand_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("sp_pinknoise::newrand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::newrand",1,"sp_pinknoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pinknoise::newrand",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_newrand_set",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->newrand = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_newrand_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("sp_pinknoise::newrand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::newrand",1,"sp_pinknoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_newrand_get",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  result = (unsigned int) ((arg1)->newrand);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_prevrand_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("sp_pinknoise::prevrand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::prevrand",1,"sp_pinknoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pinknoise::prevrand",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_prevrand_set",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->prevrand = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_prevrand_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("sp_pinknoise::prevrand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::prevrand",1,"sp_pinknoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_prevrand_get",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  result = (unsigned int) ((arg1)->prevrand);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_k_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("sp_pinknoise::k",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::k",1,"sp_pinknoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pinknoise::k",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_k_set",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->k = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_k_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("sp_pinknoise::k",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::k",1,"sp_pinknoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_k_get",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  result = (unsigned int) ((arg1)->k);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_seed_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("sp_pinknoise::seed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::seed",1,"sp_pinknoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pinknoise::seed",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_seed_set",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->seed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_seed_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("sp_pinknoise::seed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::seed",1,"sp_pinknoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_seed_get",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  result = (unsigned int) ((arg1)->seed);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_total_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("sp_pinknoise::total",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::total",1,"sp_pinknoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pinknoise::total",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_total_set",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->total = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_total_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("sp_pinknoise::total",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::total",1,"sp_pinknoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_total_get",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  result = (unsigned int) ((arg1)->total);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_counter_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_pinknoise::counter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::counter",1,"sp_pinknoise *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pinknoise::counter",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_counter_set",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_pinknoise_counter_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->counter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_counter_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_pinknoise::counter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::counter",1,"sp_pinknoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_counter_get",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  result =  ((arg1)->counter);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_dice_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  unsigned int *arg2 ;
  
  SWIG_check_num_args("sp_pinknoise::dice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::dice",1,"sp_pinknoise *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pinknoise::dice",2,"unsigned int [7]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_dice_set",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("sp_pinknoise_dice_set",2,SWIGTYPE_p_unsigned_int);
  }
  
  {
    size_t ii;
    unsigned int *b = (unsigned int *) arg1->dice;
    for (ii = 0; ii < (size_t)7; ii++) b[ii] = *((unsigned int *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_dice_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *arg1 = (sp_pinknoise *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("sp_pinknoise::dice",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise::dice",1,"sp_pinknoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_dice_get",1,SWIGTYPE_p_sp_pinknoise);
  }
  
  result = (unsigned int *)(unsigned int *) ((arg1)->dice);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_pinknoise(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise *result = 0 ;
  
  SWIG_check_num_args("sp_pinknoise::sp_pinknoise",0,0)
  result = (sp_pinknoise *)new sp_pinknoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_pinknoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_pinknoise(void *obj) {
sp_pinknoise *arg1 = (sp_pinknoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_pinknoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_pinknoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_pinknoise_attributes[] = {
    { "amp", _wrap_sp_pinknoise_amp_get, _wrap_sp_pinknoise_amp_set },
    { "newrand", _wrap_sp_pinknoise_newrand_get, _wrap_sp_pinknoise_newrand_set },
    { "prevrand", _wrap_sp_pinknoise_prevrand_get, _wrap_sp_pinknoise_prevrand_set },
    { "k", _wrap_sp_pinknoise_k_get, _wrap_sp_pinknoise_k_set },
    { "seed", _wrap_sp_pinknoise_seed_get, _wrap_sp_pinknoise_seed_set },
    { "total", _wrap_sp_pinknoise_total_get, _wrap_sp_pinknoise_total_set },
    { "counter", _wrap_sp_pinknoise_counter_get, _wrap_sp_pinknoise_counter_set },
    { "dice", _wrap_sp_pinknoise_dice_get, _wrap_sp_pinknoise_dice_set },
    {0,0,0}
};
static swig_lua_method swig_sp_pinknoise_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_pinknoise_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_pinknoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_pinknoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_pinknoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_pinknoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_pinknoise_Sf_SwigStatic = {
    "sp_pinknoise",
    swig_sp_pinknoise_Sf_SwigStatic_methods,
    swig_sp_pinknoise_Sf_SwigStatic_attributes,
    swig_sp_pinknoise_Sf_SwigStatic_constants,
    swig_sp_pinknoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_pinknoise_bases[] = {0};
static const char *swig_sp_pinknoise_base_names[] = {0};
static swig_lua_class _wrap_class_sp_pinknoise = { "sp_pinknoise", "sp_pinknoise", &SWIGTYPE_p_sp_pinknoise,_proxy__wrap_new_sp_pinknoise, swig_delete_sp_pinknoise, swig_sp_pinknoise_methods, swig_sp_pinknoise_attributes, &swig_sp_pinknoise_Sf_SwigStatic, swig_sp_pinknoise_meta, swig_sp_pinknoise_bases, swig_sp_pinknoise_base_names };

static int _wrap_sp_pinknoise_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise **arg1 = (sp_pinknoise **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pinknoise_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise_create",1,"sp_pinknoise **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_create",1,SWIGTYPE_p_p_sp_pinknoise);
  }
  
  result = (int)sp_pinknoise_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_pinknoise **arg1 = (sp_pinknoise **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pinknoise_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise_destroy",1,"sp_pinknoise **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_destroy",1,SWIGTYPE_p_p_sp_pinknoise);
  }
  
  result = (int)sp_pinknoise_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_pinknoise *arg2 = (sp_pinknoise *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pinknoise_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pinknoise_init",2,"sp_pinknoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_pinknoise_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_init",2,SWIGTYPE_p_sp_pinknoise);
  }
  
  result = (int)sp_pinknoise_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pinknoise_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_pinknoise *arg2 = (sp_pinknoise *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pinknoise_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pinknoise_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pinknoise_compute",2,"sp_pinknoise *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_pinknoise_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_pinknoise_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_pinknoise_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_pinknoise,0))){
    SWIG_fail_ptr("sp_pinknoise_compute",2,SWIGTYPE_p_sp_pinknoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pinknoise_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pinknoise_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_pinknoise_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_imincps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pitchamdf::imincps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::imincps",1,"sp_pitchamdf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pitchamdf::imincps",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_imincps_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->imincps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_imincps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pitchamdf::imincps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::imincps",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_imincps_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result = (float) ((arg1)->imincps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_imaxcps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pitchamdf::imaxcps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::imaxcps",1,"sp_pitchamdf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pitchamdf::imaxcps",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_imaxcps_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->imaxcps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_imaxcps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pitchamdf::imaxcps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::imaxcps",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_imaxcps_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result = (float) ((arg1)->imaxcps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_icps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pitchamdf::icps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::icps",1,"sp_pitchamdf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pitchamdf::icps",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_icps_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->icps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_icps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pitchamdf::icps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::icps",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_icps_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result = (float) ((arg1)->icps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_imedi_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pitchamdf::imedi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::imedi",1,"sp_pitchamdf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pitchamdf::imedi",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_imedi_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->imedi = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_imedi_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pitchamdf::imedi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::imedi",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_imedi_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result = (float) ((arg1)->imedi);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_idowns_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pitchamdf::idowns",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::idowns",1,"sp_pitchamdf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pitchamdf::idowns",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_idowns_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->idowns = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_idowns_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pitchamdf::idowns",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::idowns",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_idowns_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result = (float) ((arg1)->idowns);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_iexcps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pitchamdf::iexcps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::iexcps",1,"sp_pitchamdf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pitchamdf::iexcps",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_iexcps_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iexcps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_iexcps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pitchamdf::iexcps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::iexcps",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_iexcps_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result = (float) ((arg1)->iexcps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_irmsmedi_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pitchamdf::irmsmedi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::irmsmedi",1,"sp_pitchamdf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pitchamdf::irmsmedi",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_irmsmedi_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->irmsmedi = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_irmsmedi_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pitchamdf::irmsmedi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::irmsmedi",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_irmsmedi_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result = (float) ((arg1)->irmsmedi);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_srate_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pitchamdf::srate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::srate",1,"sp_pitchamdf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pitchamdf::srate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_srate_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->srate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_srate_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pitchamdf::srate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::srate",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_srate_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result = (float) ((arg1)->srate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_lastval_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pitchamdf::lastval",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::lastval",1,"sp_pitchamdf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pitchamdf::lastval",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_lastval_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lastval = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_lastval_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pitchamdf::lastval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::lastval",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_lastval_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result = (float) ((arg1)->lastval);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_downsamp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pitchamdf::downsamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::downsamp",1,"sp_pitchamdf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pitchamdf::downsamp",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_downsamp_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pitchamdf_downsamp_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->downsamp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_downsamp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pitchamdf::downsamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::downsamp",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_downsamp_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result =  ((arg1)->downsamp);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_upsamp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pitchamdf::upsamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::upsamp",1,"sp_pitchamdf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pitchamdf::upsamp",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_upsamp_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pitchamdf_upsamp_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->upsamp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_upsamp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pitchamdf::upsamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::upsamp",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_upsamp_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result =  ((arg1)->upsamp);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_minperi_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pitchamdf::minperi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::minperi",1,"sp_pitchamdf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pitchamdf::minperi",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_minperi_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pitchamdf_minperi_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->minperi = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_minperi_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pitchamdf::minperi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::minperi",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_minperi_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result =  ((arg1)->minperi);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_maxperi_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pitchamdf::maxperi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::maxperi",1,"sp_pitchamdf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pitchamdf::maxperi",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_maxperi_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pitchamdf_maxperi_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->maxperi = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_maxperi_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pitchamdf::maxperi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::maxperi",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_maxperi_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result =  ((arg1)->maxperi);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_index_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pitchamdf::index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::index",1,"sp_pitchamdf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pitchamdf::index",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_index_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pitchamdf_index_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->index = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_index_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pitchamdf::index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::index",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_index_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result =  ((arg1)->index);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_readp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pitchamdf::readp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::readp",1,"sp_pitchamdf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pitchamdf::readp",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_readp_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pitchamdf_readp_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->readp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_readp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pitchamdf::readp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::readp",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_readp_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result =  ((arg1)->readp);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_size_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pitchamdf::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::size",1,"sp_pitchamdf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pitchamdf::size",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_size_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pitchamdf_size_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_size_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pitchamdf::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::size",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_size_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result =  ((arg1)->size);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_peri_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pitchamdf::peri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::peri",1,"sp_pitchamdf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pitchamdf::peri",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_peri_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pitchamdf_peri_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->peri = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_peri_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pitchamdf::peri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::peri",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_peri_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result =  ((arg1)->peri);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_medisize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pitchamdf::medisize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::medisize",1,"sp_pitchamdf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pitchamdf::medisize",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_medisize_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pitchamdf_medisize_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->medisize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_medisize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pitchamdf::medisize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::medisize",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_medisize_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result =  ((arg1)->medisize);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_mediptr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pitchamdf::mediptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::mediptr",1,"sp_pitchamdf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pitchamdf::mediptr",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_mediptr_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pitchamdf_mediptr_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mediptr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_mediptr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pitchamdf::mediptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::mediptr",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_mediptr_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result =  ((arg1)->mediptr);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_rmsmedisize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pitchamdf::rmsmedisize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::rmsmedisize",1,"sp_pitchamdf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pitchamdf::rmsmedisize",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_rmsmedisize_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pitchamdf_rmsmedisize_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->rmsmedisize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_rmsmedisize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pitchamdf::rmsmedisize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::rmsmedisize",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_rmsmedisize_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result =  ((arg1)->rmsmedisize);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_rmsmediptr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pitchamdf::rmsmediptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::rmsmediptr",1,"sp_pitchamdf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pitchamdf::rmsmediptr",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_rmsmediptr_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pitchamdf_rmsmediptr_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->rmsmediptr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_rmsmediptr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pitchamdf::rmsmediptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::rmsmediptr",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_rmsmediptr_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result =  ((arg1)->rmsmediptr);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_inerr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_pitchamdf::inerr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::inerr",1,"sp_pitchamdf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pitchamdf::inerr",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_inerr_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->inerr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_inerr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pitchamdf::inerr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::inerr",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_inerr_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result = (int) ((arg1)->inerr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_median_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_pitchamdf::median",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::median",1,"sp_pitchamdf *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pitchamdf::median",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_median_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_pitchamdf_median_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->median = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_median_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_pitchamdf::median",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::median",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_median_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result = (sp_auxdata *)& ((arg1)->median);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_rmsmedian_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_pitchamdf::rmsmedian",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::rmsmedian",1,"sp_pitchamdf *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pitchamdf::rmsmedian",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_rmsmedian_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_pitchamdf_rmsmedian_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->rmsmedian = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_rmsmedian_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_pitchamdf::rmsmedian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::rmsmedian",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_rmsmedian_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result = (sp_auxdata *)& ((arg1)->rmsmedian);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_pitchamdf::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::buffer",1,"sp_pitchamdf *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pitchamdf::buffer",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_buffer_set",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_pitchamdf_buffer_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->buffer = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *arg1 = (sp_pitchamdf *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_pitchamdf::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf::buffer",1,"sp_pitchamdf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_buffer_get",1,SWIGTYPE_p_sp_pitchamdf);
  }
  
  result = (sp_auxdata *)& ((arg1)->buffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_pitchamdf(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf *result = 0 ;
  
  SWIG_check_num_args("sp_pitchamdf::sp_pitchamdf",0,0)
  result = (sp_pitchamdf *)new sp_pitchamdf();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_pitchamdf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_pitchamdf(void *obj) {
sp_pitchamdf *arg1 = (sp_pitchamdf *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_pitchamdf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_pitchamdf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_pitchamdf_attributes[] = {
    { "imincps", _wrap_sp_pitchamdf_imincps_get, _wrap_sp_pitchamdf_imincps_set },
    { "imaxcps", _wrap_sp_pitchamdf_imaxcps_get, _wrap_sp_pitchamdf_imaxcps_set },
    { "icps", _wrap_sp_pitchamdf_icps_get, _wrap_sp_pitchamdf_icps_set },
    { "imedi", _wrap_sp_pitchamdf_imedi_get, _wrap_sp_pitchamdf_imedi_set },
    { "idowns", _wrap_sp_pitchamdf_idowns_get, _wrap_sp_pitchamdf_idowns_set },
    { "iexcps", _wrap_sp_pitchamdf_iexcps_get, _wrap_sp_pitchamdf_iexcps_set },
    { "irmsmedi", _wrap_sp_pitchamdf_irmsmedi_get, _wrap_sp_pitchamdf_irmsmedi_set },
    { "srate", _wrap_sp_pitchamdf_srate_get, _wrap_sp_pitchamdf_srate_set },
    { "lastval", _wrap_sp_pitchamdf_lastval_get, _wrap_sp_pitchamdf_lastval_set },
    { "downsamp", _wrap_sp_pitchamdf_downsamp_get, _wrap_sp_pitchamdf_downsamp_set },
    { "upsamp", _wrap_sp_pitchamdf_upsamp_get, _wrap_sp_pitchamdf_upsamp_set },
    { "minperi", _wrap_sp_pitchamdf_minperi_get, _wrap_sp_pitchamdf_minperi_set },
    { "maxperi", _wrap_sp_pitchamdf_maxperi_get, _wrap_sp_pitchamdf_maxperi_set },
    { "index", _wrap_sp_pitchamdf_index_get, _wrap_sp_pitchamdf_index_set },
    { "readp", _wrap_sp_pitchamdf_readp_get, _wrap_sp_pitchamdf_readp_set },
    { "size", _wrap_sp_pitchamdf_size_get, _wrap_sp_pitchamdf_size_set },
    { "peri", _wrap_sp_pitchamdf_peri_get, _wrap_sp_pitchamdf_peri_set },
    { "medisize", _wrap_sp_pitchamdf_medisize_get, _wrap_sp_pitchamdf_medisize_set },
    { "mediptr", _wrap_sp_pitchamdf_mediptr_get, _wrap_sp_pitchamdf_mediptr_set },
    { "rmsmedisize", _wrap_sp_pitchamdf_rmsmedisize_get, _wrap_sp_pitchamdf_rmsmedisize_set },
    { "rmsmediptr", _wrap_sp_pitchamdf_rmsmediptr_get, _wrap_sp_pitchamdf_rmsmediptr_set },
    { "inerr", _wrap_sp_pitchamdf_inerr_get, _wrap_sp_pitchamdf_inerr_set },
    { "median", _wrap_sp_pitchamdf_median_get, _wrap_sp_pitchamdf_median_set },
    { "rmsmedian", _wrap_sp_pitchamdf_rmsmedian_get, _wrap_sp_pitchamdf_rmsmedian_set },
    { "buffer", _wrap_sp_pitchamdf_buffer_get, _wrap_sp_pitchamdf_buffer_set },
    {0,0,0}
};
static swig_lua_method swig_sp_pitchamdf_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_pitchamdf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_pitchamdf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_pitchamdf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_pitchamdf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_pitchamdf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_pitchamdf_Sf_SwigStatic = {
    "sp_pitchamdf",
    swig_sp_pitchamdf_Sf_SwigStatic_methods,
    swig_sp_pitchamdf_Sf_SwigStatic_attributes,
    swig_sp_pitchamdf_Sf_SwigStatic_constants,
    swig_sp_pitchamdf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_pitchamdf_bases[] = {0};
static const char *swig_sp_pitchamdf_base_names[] = {0};
static swig_lua_class _wrap_class_sp_pitchamdf = { "sp_pitchamdf", "sp_pitchamdf", &SWIGTYPE_p_sp_pitchamdf,_proxy__wrap_new_sp_pitchamdf, swig_delete_sp_pitchamdf, swig_sp_pitchamdf_methods, swig_sp_pitchamdf_attributes, &swig_sp_pitchamdf_Sf_SwigStatic, swig_sp_pitchamdf_meta, swig_sp_pitchamdf_bases, swig_sp_pitchamdf_base_names };

static int _wrap_sp_pitchamdf_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf **arg1 = (sp_pitchamdf **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pitchamdf_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf_create",1,"sp_pitchamdf **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_create",1,SWIGTYPE_p_p_sp_pitchamdf);
  }
  
  result = (int)sp_pitchamdf_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_pitchamdf **arg1 = (sp_pitchamdf **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pitchamdf_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf_destroy",1,"sp_pitchamdf **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_destroy",1,SWIGTYPE_p_p_sp_pitchamdf);
  }
  
  result = (int)sp_pitchamdf_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_pitchamdf *arg2 = (sp_pitchamdf *) 0 ;
  float arg3 ;
  float arg4 ;
  int result;
  
  SWIG_check_num_args("sp_pitchamdf_init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pitchamdf_init",2,"sp_pitchamdf *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_pitchamdf_init",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("sp_pitchamdf_init",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_pitchamdf_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_init",2,SWIGTYPE_p_sp_pitchamdf);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (int)sp_pitchamdf_init(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pitchamdf_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_pitchamdf *arg2 = (sp_pitchamdf *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pitchamdf_compute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pitchamdf_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pitchamdf_compute",2,"sp_pitchamdf *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_pitchamdf_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_pitchamdf_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_pitchamdf_compute",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_pitchamdf_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_pitchamdf,0))){
    SWIG_fail_ptr("sp_pitchamdf_compute",2,SWIGTYPE_p_sp_pitchamdf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pitchamdf_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pitchamdf_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pitchamdf_compute",5,SWIGTYPE_p_float);
  }
  
  result = (int)sp_pitchamdf_compute(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pluck::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::amp",1,"sp_pluck *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pluck::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_amp_set",1,SWIGTYPE_p_sp_pluck);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pluck::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::amp",1,"sp_pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_amp_get",1,SWIGTYPE_p_sp_pluck);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pluck::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::freq",1,"sp_pluck *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pluck::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_freq_set",1,SWIGTYPE_p_sp_pluck);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pluck::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::freq",1,"sp_pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_freq_get",1,SWIGTYPE_p_sp_pluck);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_ifreq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pluck::ifreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::ifreq",1,"sp_pluck *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pluck::ifreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_ifreq_set",1,SWIGTYPE_p_sp_pluck);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ifreq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_ifreq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pluck::ifreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::ifreq",1,"sp_pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_ifreq_get",1,SWIGTYPE_p_sp_pluck);
  }
  
  result = (float) ((arg1)->ifreq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_sicps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_pluck::sicps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::sicps",1,"sp_pluck *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pluck::sicps",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_sicps_set",1,SWIGTYPE_p_sp_pluck);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sicps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_sicps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_pluck::sicps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::sicps",1,"sp_pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_sicps_get",1,SWIGTYPE_p_sp_pluck);
  }
  
  result = (float) ((arg1)->sicps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_phs256_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pluck::phs256",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::phs256",1,"sp_pluck *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pluck::phs256",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_phs256_set",1,SWIGTYPE_p_sp_pluck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pluck_phs256_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->phs256 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_phs256_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pluck::phs256",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::phs256",1,"sp_pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_phs256_get",1,SWIGTYPE_p_sp_pluck);
  }
  
  result =  ((arg1)->phs256);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_npts_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pluck::npts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::npts",1,"sp_pluck *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pluck::npts",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_npts_set",1,SWIGTYPE_p_sp_pluck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pluck_npts_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->npts = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_npts_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pluck::npts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::npts",1,"sp_pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_npts_get",1,SWIGTYPE_p_sp_pluck);
  }
  
  result =  ((arg1)->npts);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_maxpts_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_pluck::maxpts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::maxpts",1,"sp_pluck *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_pluck::maxpts",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_maxpts_set",1,SWIGTYPE_p_sp_pluck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_pluck_maxpts_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->maxpts = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_maxpts_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_pluck::maxpts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::maxpts",1,"sp_pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_maxpts_get",1,SWIGTYPE_p_sp_pluck);
  }
  
  result =  ((arg1)->maxpts);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_auxch_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_pluck::auxch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::auxch",1,"sp_pluck *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pluck::auxch",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_auxch_set",1,SWIGTYPE_p_sp_pluck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_pluck_auxch_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->auxch = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_auxch_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_pluck::auxch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::auxch",1,"sp_pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_auxch_get",1,SWIGTYPE_p_sp_pluck);
  }
  
  result = (sp_auxdata *)& ((arg1)->auxch);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_init_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("sp_pluck::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::init",1,"sp_pluck *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("sp_pluck::init",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_init_set",1,SWIGTYPE_p_sp_pluck);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->init = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_init_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *arg1 = (sp_pluck *) 0 ;
  char result;
  
  SWIG_check_num_args("sp_pluck::init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck::init",1,"sp_pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_init_get",1,SWIGTYPE_p_sp_pluck);
  }
  
  result = (char) ((arg1)->init);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_pluck(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck *result = 0 ;
  
  SWIG_check_num_args("sp_pluck::sp_pluck",0,0)
  result = (sp_pluck *)new sp_pluck();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_pluck,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_pluck(void *obj) {
sp_pluck *arg1 = (sp_pluck *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_pluck(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_pluck);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_pluck_attributes[] = {
    { "amp", _wrap_sp_pluck_amp_get, _wrap_sp_pluck_amp_set },
    { "freq", _wrap_sp_pluck_freq_get, _wrap_sp_pluck_freq_set },
    { "ifreq", _wrap_sp_pluck_ifreq_get, _wrap_sp_pluck_ifreq_set },
    { "sicps", _wrap_sp_pluck_sicps_get, _wrap_sp_pluck_sicps_set },
    { "phs256", _wrap_sp_pluck_phs256_get, _wrap_sp_pluck_phs256_set },
    { "npts", _wrap_sp_pluck_npts_get, _wrap_sp_pluck_npts_set },
    { "maxpts", _wrap_sp_pluck_maxpts_get, _wrap_sp_pluck_maxpts_set },
    { "auxch", _wrap_sp_pluck_auxch_get, _wrap_sp_pluck_auxch_set },
    { "init", _wrap_sp_pluck_init_get, _wrap_sp_pluck_init_set },
    {0,0,0}
};
static swig_lua_method swig_sp_pluck_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_pluck_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_pluck_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_pluck_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_pluck_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_pluck_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_pluck_Sf_SwigStatic = {
    "sp_pluck",
    swig_sp_pluck_Sf_SwigStatic_methods,
    swig_sp_pluck_Sf_SwigStatic_attributes,
    swig_sp_pluck_Sf_SwigStatic_constants,
    swig_sp_pluck_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_pluck_bases[] = {0};
static const char *swig_sp_pluck_base_names[] = {0};
static swig_lua_class _wrap_class_sp_pluck = { "sp_pluck", "sp_pluck", &SWIGTYPE_p_sp_pluck,_proxy__wrap_new_sp_pluck, swig_delete_sp_pluck, swig_sp_pluck_methods, swig_sp_pluck_attributes, &swig_sp_pluck_Sf_SwigStatic, swig_sp_pluck_meta, swig_sp_pluck_bases, swig_sp_pluck_base_names };

static int _wrap_sp_pluck_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck **arg1 = (sp_pluck **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pluck_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck_create",1,"sp_pluck **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_create",1,SWIGTYPE_p_p_sp_pluck);
  }
  
  result = (int)sp_pluck_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_pluck **arg1 = (sp_pluck **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pluck_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck_destroy",1,"sp_pluck **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_destroy",1,SWIGTYPE_p_p_sp_pluck);
  }
  
  result = (int)sp_pluck_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_pluck *arg2 = (sp_pluck *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("sp_pluck_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pluck_init",2,"sp_pluck *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_pluck_init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_pluck_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_init",2,SWIGTYPE_p_sp_pluck);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)sp_pluck_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pluck_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_pluck *arg2 = (sp_pluck *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pluck_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pluck_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pluck_compute",2,"sp_pluck *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_pluck_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_pluck_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_pluck_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_pluck,0))){
    SWIG_fail_ptr("sp_pluck_compute",2,SWIGTYPE_p_sp_pluck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pluck_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pluck_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_pluck_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_htime_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *arg1 = (sp_port *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_port::htime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port::htime",1,"sp_port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_port::htime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_htime_set",1,SWIGTYPE_p_sp_port);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->htime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_htime_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *arg1 = (sp_port *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_port::htime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port::htime",1,"sp_port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_htime_get",1,SWIGTYPE_p_sp_port);
  }
  
  result = (float) ((arg1)->htime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_c1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *arg1 = (sp_port *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_port::c1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port::c1",1,"sp_port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_port::c1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_c1_set",1,SWIGTYPE_p_sp_port);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_c1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *arg1 = (sp_port *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_port::c1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port::c1",1,"sp_port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_c1_get",1,SWIGTYPE_p_sp_port);
  }
  
  result = (float) ((arg1)->c1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_c2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *arg1 = (sp_port *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_port::c2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port::c2",1,"sp_port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_port::c2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_c2_set",1,SWIGTYPE_p_sp_port);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_c2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *arg1 = (sp_port *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_port::c2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port::c2",1,"sp_port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_c2_get",1,SWIGTYPE_p_sp_port);
  }
  
  result = (float) ((arg1)->c2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_yt1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *arg1 = (sp_port *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_port::yt1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port::yt1",1,"sp_port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_port::yt1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_yt1_set",1,SWIGTYPE_p_sp_port);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->yt1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_yt1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *arg1 = (sp_port *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_port::yt1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port::yt1",1,"sp_port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_yt1_get",1,SWIGTYPE_p_sp_port);
  }
  
  result = (float) ((arg1)->yt1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_prvhtim_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *arg1 = (sp_port *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_port::prvhtim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port::prvhtim",1,"sp_port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_port::prvhtim",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_prvhtim_set",1,SWIGTYPE_p_sp_port);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prvhtim = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_prvhtim_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *arg1 = (sp_port *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_port::prvhtim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port::prvhtim",1,"sp_port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_prvhtim_get",1,SWIGTYPE_p_sp_port);
  }
  
  result = (float) ((arg1)->prvhtim);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *arg1 = (sp_port *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_port::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port::sr",1,"sp_port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_port::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_sr_set",1,SWIGTYPE_p_sp_port);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *arg1 = (sp_port *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_port::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port::sr",1,"sp_port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_sr_get",1,SWIGTYPE_p_sp_port);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_onedsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *arg1 = (sp_port *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_port::onedsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port::onedsr",1,"sp_port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_port::onedsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_onedsr_set",1,SWIGTYPE_p_sp_port);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->onedsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_onedsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *arg1 = (sp_port *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_port::onedsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port::onedsr",1,"sp_port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_onedsr_get",1,SWIGTYPE_p_sp_port);
  }
  
  result = (float) ((arg1)->onedsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_port(lua_State* L) {
  int SWIG_arg = 0;
  sp_port *result = 0 ;
  
  SWIG_check_num_args("sp_port::sp_port",0,0)
  result = (sp_port *)new sp_port();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_port,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_port(void *obj) {
sp_port *arg1 = (sp_port *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_port(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_port);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_port_attributes[] = {
    { "htime", _wrap_sp_port_htime_get, _wrap_sp_port_htime_set },
    { "c1", _wrap_sp_port_c1_get, _wrap_sp_port_c1_set },
    { "c2", _wrap_sp_port_c2_get, _wrap_sp_port_c2_set },
    { "yt1", _wrap_sp_port_yt1_get, _wrap_sp_port_yt1_set },
    { "prvhtim", _wrap_sp_port_prvhtim_get, _wrap_sp_port_prvhtim_set },
    { "sr", _wrap_sp_port_sr_get, _wrap_sp_port_sr_set },
    { "onedsr", _wrap_sp_port_onedsr_get, _wrap_sp_port_onedsr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_port_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_port_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_port_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_port_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_port_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_port_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_port_Sf_SwigStatic = {
    "sp_port",
    swig_sp_port_Sf_SwigStatic_methods,
    swig_sp_port_Sf_SwigStatic_attributes,
    swig_sp_port_Sf_SwigStatic_constants,
    swig_sp_port_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_port_bases[] = {0};
static const char *swig_sp_port_base_names[] = {0};
static swig_lua_class _wrap_class_sp_port = { "sp_port", "sp_port", &SWIGTYPE_p_sp_port,_proxy__wrap_new_sp_port, swig_delete_sp_port, swig_sp_port_methods, swig_sp_port_attributes, &swig_sp_port_Sf_SwigStatic, swig_sp_port_meta, swig_sp_port_bases, swig_sp_port_base_names };

static int _wrap_sp_port_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_port **arg1 = (sp_port **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_port_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port_create",1,"sp_port **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_create",1,SWIGTYPE_p_p_sp_port);
  }
  
  result = (int)sp_port_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_port **arg1 = (sp_port **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_port_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port_destroy",1,"sp_port **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_destroy",1,SWIGTYPE_p_p_sp_port);
  }
  
  result = (int)sp_port_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_port *arg2 = (sp_port *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("sp_port_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_port_init",2,"sp_port *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_port_init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_port_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_init",2,SWIGTYPE_p_sp_port);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)sp_port_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_port *arg2 = (sp_port *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_port_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_port_compute",2,"sp_port *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_port_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_port_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_port_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_compute",2,SWIGTYPE_p_sp_port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_port_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_port_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_port_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_port_reset(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_port *arg2 = (sp_port *) 0 ;
  float *arg3 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_port_reset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_port_reset",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_port_reset",2,"sp_port *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_port_reset",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_port_reset",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_port,0))){
    SWIG_fail_ptr("sp_port_reset",2,SWIGTYPE_p_sp_port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_port_reset",3,SWIGTYPE_p_float);
  }
  
  result = (int)sp_port_reset(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_posc3::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::freq",1,"sp_posc3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_posc3::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_freq_set",1,SWIGTYPE_p_sp_posc3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_posc3::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::freq",1,"sp_posc3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_freq_get",1,SWIGTYPE_p_sp_posc3);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_posc3::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::amp",1,"sp_posc3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_posc3::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_amp_set",1,SWIGTYPE_p_sp_posc3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_posc3::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::amp",1,"sp_posc3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_amp_get",1,SWIGTYPE_p_sp_posc3);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_iphs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_posc3::iphs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::iphs",1,"sp_posc3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_posc3::iphs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_iphs_set",1,SWIGTYPE_p_sp_posc3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iphs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_iphs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_posc3::iphs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::iphs",1,"sp_posc3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_iphs_get",1,SWIGTYPE_p_sp_posc3);
  }
  
  result = (float) ((arg1)->iphs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_tbl_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_posc3::tbl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::tbl",1,"sp_posc3 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_posc3::tbl",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_tbl_set",1,SWIGTYPE_p_sp_posc3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_posc3_tbl_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->tbl = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_tbl_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_posc3::tbl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::tbl",1,"sp_posc3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_tbl_get",1,SWIGTYPE_p_sp_posc3);
  }
  
  result = (sp_ftbl *) ((arg1)->tbl);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_tablen_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_posc3::tablen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::tablen",1,"sp_posc3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_posc3::tablen",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_tablen_set",1,SWIGTYPE_p_sp_posc3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_posc3_tablen_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->tablen = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_tablen_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_posc3::tablen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::tablen",1,"sp_posc3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_tablen_get",1,SWIGTYPE_p_sp_posc3);
  }
  
  result =  ((arg1)->tablen);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_tablenUPsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_posc3::tablenUPsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::tablenUPsr",1,"sp_posc3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_posc3::tablenUPsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_tablenUPsr_set",1,SWIGTYPE_p_sp_posc3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tablenUPsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_tablenUPsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_posc3::tablenUPsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::tablenUPsr",1,"sp_posc3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_tablenUPsr_get",1,SWIGTYPE_p_sp_posc3);
  }
  
  result = (float) ((arg1)->tablenUPsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_phs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_posc3::phs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::phs",1,"sp_posc3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_posc3::phs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_phs_set",1,SWIGTYPE_p_sp_posc3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->phs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_phs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_posc3::phs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::phs",1,"sp_posc3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_phs_get",1,SWIGTYPE_p_sp_posc3);
  }
  
  result = (float) ((arg1)->phs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_onedsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_posc3::onedsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::onedsr",1,"sp_posc3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_posc3::onedsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_onedsr_set",1,SWIGTYPE_p_sp_posc3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->onedsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_onedsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *arg1 = (sp_posc3 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_posc3::onedsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3::onedsr",1,"sp_posc3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_onedsr_get",1,SWIGTYPE_p_sp_posc3);
  }
  
  result = (float) ((arg1)->onedsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_posc3(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 *result = 0 ;
  
  SWIG_check_num_args("sp_posc3::sp_posc3",0,0)
  result = (sp_posc3 *)new sp_posc3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_posc3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_posc3(void *obj) {
sp_posc3 *arg1 = (sp_posc3 *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_posc3(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_posc3);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_posc3_attributes[] = {
    { "freq", _wrap_sp_posc3_freq_get, _wrap_sp_posc3_freq_set },
    { "amp", _wrap_sp_posc3_amp_get, _wrap_sp_posc3_amp_set },
    { "iphs", _wrap_sp_posc3_iphs_get, _wrap_sp_posc3_iphs_set },
    { "tbl", _wrap_sp_posc3_tbl_get, _wrap_sp_posc3_tbl_set },
    { "tablen", _wrap_sp_posc3_tablen_get, _wrap_sp_posc3_tablen_set },
    { "tablenUPsr", _wrap_sp_posc3_tablenUPsr_get, _wrap_sp_posc3_tablenUPsr_set },
    { "phs", _wrap_sp_posc3_phs_get, _wrap_sp_posc3_phs_set },
    { "onedsr", _wrap_sp_posc3_onedsr_get, _wrap_sp_posc3_onedsr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_posc3_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_posc3_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_posc3_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_posc3_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_posc3_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_posc3_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_posc3_Sf_SwigStatic = {
    "sp_posc3",
    swig_sp_posc3_Sf_SwigStatic_methods,
    swig_sp_posc3_Sf_SwigStatic_attributes,
    swig_sp_posc3_Sf_SwigStatic_constants,
    swig_sp_posc3_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_posc3_bases[] = {0};
static const char *swig_sp_posc3_base_names[] = {0};
static swig_lua_class _wrap_class_sp_posc3 = { "sp_posc3", "sp_posc3", &SWIGTYPE_p_sp_posc3,_proxy__wrap_new_sp_posc3, swig_delete_sp_posc3, swig_sp_posc3_methods, swig_sp_posc3_attributes, &swig_sp_posc3_Sf_SwigStatic, swig_sp_posc3_meta, swig_sp_posc3_bases, swig_sp_posc3_base_names };

static int _wrap_sp_posc3_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 **arg1 = (sp_posc3 **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_posc3_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3_create",1,"sp_posc3 **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_create",1,SWIGTYPE_p_p_sp_posc3);
  }
  
  result = (int)sp_posc3_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_posc3 **arg1 = (sp_posc3 **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_posc3_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3_destroy",1,"sp_posc3 **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_destroy",1,SWIGTYPE_p_p_sp_posc3);
  }
  
  result = (int)sp_posc3_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_posc3 *arg2 = (sp_posc3 *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_posc3_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_posc3_init",2,"sp_posc3 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_posc3_init",3,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_posc3_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_init",2,SWIGTYPE_p_sp_posc3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_posc3_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  result = (int)sp_posc3_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_posc3_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_posc3 *arg2 = (sp_posc3 *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_posc3_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_posc3_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_posc3_compute",2,"sp_posc3 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_posc3_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_posc3_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_posc3_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_posc3,0))){
    SWIG_fail_ptr("sp_posc3_compute",2,SWIGTYPE_p_sp_posc3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_posc3_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_posc3_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_posc3_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_progress_nbars_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_progress *arg1 = (sp_progress *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_progress::nbars",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_progress::nbars",1,"sp_progress *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_progress::nbars",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_progress,0))){
    SWIG_fail_ptr("sp_progress_nbars_set",1,SWIGTYPE_p_sp_progress);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nbars = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_progress_nbars_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_progress *arg1 = (sp_progress *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_progress::nbars",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_progress::nbars",1,"sp_progress *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_progress,0))){
    SWIG_fail_ptr("sp_progress_nbars_get",1,SWIGTYPE_p_sp_progress);
  }
  
  result = (int) ((arg1)->nbars);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_progress_skip_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_progress *arg1 = (sp_progress *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_progress::skip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_progress::skip",1,"sp_progress *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_progress::skip",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_progress,0))){
    SWIG_fail_ptr("sp_progress_skip_set",1,SWIGTYPE_p_sp_progress);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->skip = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_progress_skip_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_progress *arg1 = (sp_progress *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_progress::skip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_progress::skip",1,"sp_progress *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_progress,0))){
    SWIG_fail_ptr("sp_progress_skip_get",1,SWIGTYPE_p_sp_progress);
  }
  
  result = (int) ((arg1)->skip);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_progress_counter_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_progress *arg1 = (sp_progress *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_progress::counter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_progress::counter",1,"sp_progress *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_progress::counter",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_progress,0))){
    SWIG_fail_ptr("sp_progress_counter_set",1,SWIGTYPE_p_sp_progress);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->counter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_progress_counter_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_progress *arg1 = (sp_progress *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_progress::counter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_progress::counter",1,"sp_progress *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_progress,0))){
    SWIG_fail_ptr("sp_progress_counter_get",1,SWIGTYPE_p_sp_progress);
  }
  
  result = (int) ((arg1)->counter);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_progress_len_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_progress *arg1 = (sp_progress *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_progress::len",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_progress::len",1,"sp_progress *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_progress::len",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_progress,0))){
    SWIG_fail_ptr("sp_progress_len_set",1,SWIGTYPE_p_sp_progress);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_progress_len_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->len = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_progress_len_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_progress *arg1 = (sp_progress *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_progress::len",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_progress::len",1,"sp_progress *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_progress,0))){
    SWIG_fail_ptr("sp_progress_len_get",1,SWIGTYPE_p_sp_progress);
  }
  
  result =  ((arg1)->len);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_progress(lua_State* L) {
  int SWIG_arg = 0;
  sp_progress *result = 0 ;
  
  SWIG_check_num_args("sp_progress::sp_progress",0,0)
  result = (sp_progress *)new sp_progress();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_progress,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_progress(void *obj) {
sp_progress *arg1 = (sp_progress *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_progress(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_progress);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_progress_attributes[] = {
    { "nbars", _wrap_sp_progress_nbars_get, _wrap_sp_progress_nbars_set },
    { "skip", _wrap_sp_progress_skip_get, _wrap_sp_progress_skip_set },
    { "counter", _wrap_sp_progress_counter_get, _wrap_sp_progress_counter_set },
    { "len", _wrap_sp_progress_len_get, _wrap_sp_progress_len_set },
    {0,0,0}
};
static swig_lua_method swig_sp_progress_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_progress_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_progress_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_progress_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_progress_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_progress_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_progress_Sf_SwigStatic = {
    "sp_progress",
    swig_sp_progress_Sf_SwigStatic_methods,
    swig_sp_progress_Sf_SwigStatic_attributes,
    swig_sp_progress_Sf_SwigStatic_constants,
    swig_sp_progress_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_progress_bases[] = {0};
static const char *swig_sp_progress_base_names[] = {0};
static swig_lua_class _wrap_class_sp_progress = { "sp_progress", "sp_progress", &SWIGTYPE_p_sp_progress,_proxy__wrap_new_sp_progress, swig_delete_sp_progress, swig_sp_progress_methods, swig_sp_progress_attributes, &swig_sp_progress_Sf_SwigStatic, swig_sp_progress_meta, swig_sp_progress_bases, swig_sp_progress_base_names };

static int _wrap_sp_progress_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_progress **arg1 = (sp_progress **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_progress_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_progress_create",1,"sp_progress **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_progress,0))){
    SWIG_fail_ptr("sp_progress_create",1,SWIGTYPE_p_p_sp_progress);
  }
  
  result = (int)sp_progress_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_progress_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_progress **arg1 = (sp_progress **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_progress_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_progress_destroy",1,"sp_progress **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_progress,0))){
    SWIG_fail_ptr("sp_progress_destroy",1,SWIGTYPE_p_p_sp_progress);
  }
  
  result = (int)sp_progress_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_progress_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_progress *arg2 = (sp_progress *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_progress_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_progress_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_progress_init",2,"sp_progress *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_progress_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_progress,0))){
    SWIG_fail_ptr("sp_progress_init",2,SWIGTYPE_p_sp_progress);
  }
  
  result = (int)sp_progress_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_progress_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_progress *arg2 = (sp_progress *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_progress_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_progress_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_progress_compute",2,"sp_progress *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_progress_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_progress_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_progress_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_progress,0))){
    SWIG_fail_ptr("sp_progress_compute",2,SWIGTYPE_p_sp_progress);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_progress_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_progress_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_progress_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_event_type_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_event *arg1 = (prop_event *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("prop_event::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_event::type",1,"prop_event *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("prop_event::type",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_event,0))){
    SWIG_fail_ptr("prop_event_type_set",1,SWIGTYPE_p_prop_event);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_event_type_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_event *arg1 = (prop_event *) 0 ;
  char result;
  
  SWIG_check_num_args("prop_event::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_event::type",1,"prop_event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_event,0))){
    SWIG_fail_ptr("prop_event_type_get",1,SWIGTYPE_p_prop_event);
  }
  
  result = (char) ((arg1)->type);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_event_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_event *arg1 = (prop_event *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("prop_event::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_event::pos",1,"prop_event *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("prop_event::pos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_event,0))){
    SWIG_fail_ptr("prop_event_pos_set",1,SWIGTYPE_p_prop_event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("prop_event_pos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_event_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_event *arg1 = (prop_event *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("prop_event::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_event::pos",1,"prop_event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_event,0))){
    SWIG_fail_ptr("prop_event_pos_get",1,SWIGTYPE_p_prop_event);
  }
  
  result =  ((arg1)->pos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_event_val_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_event *arg1 = (prop_event *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("prop_event::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_event::val",1,"prop_event *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("prop_event::val",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_event,0))){
    SWIG_fail_ptr("prop_event_val_set",1,SWIGTYPE_p_prop_event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("prop_event_val_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_event_val_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_event *arg1 = (prop_event *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("prop_event::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_event::val",1,"prop_event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_event,0))){
    SWIG_fail_ptr("prop_event_val_get",1,SWIGTYPE_p_prop_event);
  }
  
  result =  ((arg1)->val);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_event_cons_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_event *arg1 = (prop_event *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("prop_event::cons",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_event::cons",1,"prop_event *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("prop_event::cons",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_event,0))){
    SWIG_fail_ptr("prop_event_cons_set",1,SWIGTYPE_p_prop_event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("prop_event_cons_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->cons = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_event_cons_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_event *arg1 = (prop_event *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("prop_event::cons",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_event::cons",1,"prop_event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_event,0))){
    SWIG_fail_ptr("prop_event_cons_get",1,SWIGTYPE_p_prop_event);
  }
  
  result =  ((arg1)->cons);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_prop_event(lua_State* L) {
  int SWIG_arg = 0;
  prop_event *result = 0 ;
  
  SWIG_check_num_args("prop_event::prop_event",0,0)
  result = (prop_event *)new prop_event();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_event,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_prop_event(void *obj) {
prop_event *arg1 = (prop_event *) obj;
delete arg1;
}
static int _proxy__wrap_new_prop_event(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_prop_event);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_prop_event_attributes[] = {
    { "type", _wrap_prop_event_type_get, _wrap_prop_event_type_set },
    { "pos", _wrap_prop_event_pos_get, _wrap_prop_event_pos_set },
    { "val", _wrap_prop_event_val_get, _wrap_prop_event_val_set },
    { "cons", _wrap_prop_event_cons_get, _wrap_prop_event_cons_set },
    {0,0,0}
};
static swig_lua_method swig_prop_event_methods[]= {
    {0,0}
};
static swig_lua_method swig_prop_event_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_prop_event_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_prop_event_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_prop_event_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_prop_event_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_prop_event_Sf_SwigStatic = {
    "prop_event",
    swig_prop_event_Sf_SwigStatic_methods,
    swig_prop_event_Sf_SwigStatic_attributes,
    swig_prop_event_Sf_SwigStatic_constants,
    swig_prop_event_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_prop_event_bases[] = {0};
static const char *swig_prop_event_base_names[] = {0};
static swig_lua_class _wrap_class_prop_event = { "prop_event", "prop_event", &SWIGTYPE_p_prop_event,_proxy__wrap_new_prop_event, swig_delete_prop_event, swig_prop_event_methods, swig_prop_event_attributes, &swig_prop_event_Sf_SwigStatic, swig_prop_event_meta, swig_prop_event_bases, swig_prop_event_base_names };

static int _wrap_prop_val_type_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_val *arg1 = (prop_val *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("prop_val::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_val::type",1,"prop_val *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("prop_val::type",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_val,0))){
    SWIG_fail_ptr("prop_val_type_set",1,SWIGTYPE_p_prop_val);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_val_type_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_val *arg1 = (prop_val *) 0 ;
  char result;
  
  SWIG_check_num_args("prop_val::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_val::type",1,"prop_val *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_val,0))){
    SWIG_fail_ptr("prop_val_type_get",1,SWIGTYPE_p_prop_val);
  }
  
  result = (char) ((arg1)->type);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_val_ud_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_val *arg1 = (prop_val *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("prop_val::ud",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_val::ud",1,"prop_val *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("prop_val::ud",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_val,0))){
    SWIG_fail_ptr("prop_val_ud_set",1,SWIGTYPE_p_prop_val);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"prop_val_ud_set");
  if (arg1) (arg1)->ud = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_val_ud_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_val *arg1 = (prop_val *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("prop_val::ud",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_val::ud",1,"prop_val *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_val,0))){
    SWIG_fail_ptr("prop_val_ud_get",1,SWIGTYPE_p_prop_val);
  }
  
  result = (void *) ((arg1)->ud);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_prop_val(lua_State* L) {
  int SWIG_arg = 0;
  prop_val *result = 0 ;
  
  SWIG_check_num_args("prop_val::prop_val",0,0)
  result = (prop_val *)new prop_val();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_val,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_prop_val(void *obj) {
prop_val *arg1 = (prop_val *) obj;
delete arg1;
}
static int _proxy__wrap_new_prop_val(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_prop_val);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_prop_val_attributes[] = {
    { "type", _wrap_prop_val_type_get, _wrap_prop_val_type_set },
    { "ud", _wrap_prop_val_ud_get, _wrap_prop_val_ud_set },
    {0,0,0}
};
static swig_lua_method swig_prop_val_methods[]= {
    {0,0}
};
static swig_lua_method swig_prop_val_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_prop_val_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_prop_val_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_prop_val_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_prop_val_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_prop_val_Sf_SwigStatic = {
    "prop_val",
    swig_prop_val_Sf_SwigStatic_methods,
    swig_prop_val_Sf_SwigStatic_attributes,
    swig_prop_val_Sf_SwigStatic_constants,
    swig_prop_val_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_prop_val_bases[] = {0};
static const char *swig_prop_val_base_names[] = {0};
static swig_lua_class _wrap_class_prop_val = { "prop_val", "prop_val", &SWIGTYPE_p_prop_val,_proxy__wrap_new_prop_val, swig_delete_prop_val, swig_prop_val_methods, swig_prop_val_attributes, &swig_prop_val_Sf_SwigStatic, swig_prop_val_meta, swig_prop_val_bases, swig_prop_val_base_names };

static int _wrap_prop_entry_val_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_entry *arg1 = (prop_entry *) 0 ;
  prop_val *arg2 = (prop_val *) 0 ;
  
  SWIG_check_num_args("prop_entry::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_entry::val",1,"prop_entry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("prop_entry::val",2,"prop_val *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_entry,0))){
    SWIG_fail_ptr("prop_entry_val_set",1,SWIGTYPE_p_prop_entry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_prop_val,0))){
    SWIG_fail_ptr("prop_entry_val_set",2,SWIGTYPE_p_prop_val);
  }
  
  if (arg1) (arg1)->val = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_entry_val_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_entry *arg1 = (prop_entry *) 0 ;
  prop_val *result = 0 ;
  
  SWIG_check_num_args("prop_entry::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_entry::val",1,"prop_entry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_entry,0))){
    SWIG_fail_ptr("prop_entry_val_get",1,SWIGTYPE_p_prop_entry);
  }
  
  result = (prop_val *)& ((arg1)->val);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_val,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_entry_next_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_entry *arg1 = (prop_entry *) 0 ;
  prop_entry *arg2 = (prop_entry *) 0 ;
  
  SWIG_check_num_args("prop_entry::next",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_entry::next",1,"prop_entry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("prop_entry::next",2,"prop_entry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_entry,0))){
    SWIG_fail_ptr("prop_entry_next_set",1,SWIGTYPE_p_prop_entry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_prop_entry,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("prop_entry_next_set",2,SWIGTYPE_p_prop_entry);
  }
  
  if (arg1) (arg1)->next = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_entry_next_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_entry *arg1 = (prop_entry *) 0 ;
  prop_entry *result = 0 ;
  
  SWIG_check_num_args("prop_entry::next",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_entry::next",1,"prop_entry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_entry,0))){
    SWIG_fail_ptr("prop_entry_next_get",1,SWIGTYPE_p_prop_entry);
  }
  
  result = (prop_entry *) ((arg1)->next);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_entry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_prop_entry(lua_State* L) {
  int SWIG_arg = 0;
  prop_entry *result = 0 ;
  
  SWIG_check_num_args("prop_entry::prop_entry",0,0)
  result = (prop_entry *)new prop_entry();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_entry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_prop_entry(void *obj) {
prop_entry *arg1 = (prop_entry *) obj;
delete arg1;
}
static int _proxy__wrap_new_prop_entry(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_prop_entry);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_prop_entry_attributes[] = {
    { "val", _wrap_prop_entry_val_get, _wrap_prop_entry_val_set },
    { "next", _wrap_prop_entry_next_get, _wrap_prop_entry_next_set },
    {0,0,0}
};
static swig_lua_method swig_prop_entry_methods[]= {
    {0,0}
};
static swig_lua_method swig_prop_entry_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_prop_entry_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_prop_entry_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_prop_entry_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_prop_entry_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_prop_entry_Sf_SwigStatic = {
    "prop_entry",
    swig_prop_entry_Sf_SwigStatic_methods,
    swig_prop_entry_Sf_SwigStatic_attributes,
    swig_prop_entry_Sf_SwigStatic_constants,
    swig_prop_entry_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_prop_entry_bases[] = {0};
static const char *swig_prop_entry_base_names[] = {0};
static swig_lua_class _wrap_class_prop_entry = { "prop_entry", "prop_entry", &SWIGTYPE_p_prop_entry,_proxy__wrap_new_prop_entry, swig_delete_prop_entry, swig_prop_entry_methods, swig_prop_entry_attributes, &swig_prop_entry_Sf_SwigStatic, swig_prop_entry_meta, swig_prop_entry_bases, swig_prop_entry_base_names };

static int _wrap_prop_list_root_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_list *arg1 = (prop_list *) 0 ;
  prop_entry *arg2 = (prop_entry *) 0 ;
  
  SWIG_check_num_args("prop_list::root",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_list::root",1,"prop_list *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("prop_list::root",2,"prop_entry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_list,0))){
    SWIG_fail_ptr("prop_list_root_set",1,SWIGTYPE_p_prop_list);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_prop_entry,0))){
    SWIG_fail_ptr("prop_list_root_set",2,SWIGTYPE_p_prop_entry);
  }
  
  if (arg1) (arg1)->root = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_list_root_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_list *arg1 = (prop_list *) 0 ;
  prop_entry *result = 0 ;
  
  SWIG_check_num_args("prop_list::root",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_list::root",1,"prop_list *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_list,0))){
    SWIG_fail_ptr("prop_list_root_get",1,SWIGTYPE_p_prop_list);
  }
  
  result = (prop_entry *)& ((arg1)->root);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_entry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_list_last_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_list *arg1 = (prop_list *) 0 ;
  prop_entry *arg2 = (prop_entry *) 0 ;
  
  SWIG_check_num_args("prop_list::last",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_list::last",1,"prop_list *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("prop_list::last",2,"prop_entry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_list,0))){
    SWIG_fail_ptr("prop_list_last_set",1,SWIGTYPE_p_prop_list);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_prop_entry,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("prop_list_last_set",2,SWIGTYPE_p_prop_entry);
  }
  
  if (arg1) (arg1)->last = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_list_last_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_list *arg1 = (prop_list *) 0 ;
  prop_entry *result = 0 ;
  
  SWIG_check_num_args("prop_list::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_list::last",1,"prop_list *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_list,0))){
    SWIG_fail_ptr("prop_list_last_get",1,SWIGTYPE_p_prop_list);
  }
  
  result = (prop_entry *) ((arg1)->last);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_entry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_list_size_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_list *arg1 = (prop_list *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("prop_list::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_list::size",1,"prop_list *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("prop_list::size",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_list,0))){
    SWIG_fail_ptr("prop_list_size_set",1,SWIGTYPE_p_prop_list);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("prop_list_size_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_list_size_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_list *arg1 = (prop_list *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("prop_list::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_list::size",1,"prop_list *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_list,0))){
    SWIG_fail_ptr("prop_list_size_get",1,SWIGTYPE_p_prop_list);
  }
  
  result =  ((arg1)->size);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_list_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_list *arg1 = (prop_list *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("prop_list::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_list::pos",1,"prop_list *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("prop_list::pos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_list,0))){
    SWIG_fail_ptr("prop_list_pos_set",1,SWIGTYPE_p_prop_list);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("prop_list_pos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_list_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_list *arg1 = (prop_list *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("prop_list::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_list::pos",1,"prop_list *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_list,0))){
    SWIG_fail_ptr("prop_list_pos_get",1,SWIGTYPE_p_prop_list);
  }
  
  result =  ((arg1)->pos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_list_top_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_list *arg1 = (prop_list *) 0 ;
  prop_list *arg2 = (prop_list *) 0 ;
  
  SWIG_check_num_args("prop_list::top",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_list::top",1,"prop_list *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("prop_list::top",2,"prop_list *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_list,0))){
    SWIG_fail_ptr("prop_list_top_set",1,SWIGTYPE_p_prop_list);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_prop_list,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("prop_list_top_set",2,SWIGTYPE_p_prop_list);
  }
  
  if (arg1) (arg1)->top = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_list_top_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_list *arg1 = (prop_list *) 0 ;
  prop_list *result = 0 ;
  
  SWIG_check_num_args("prop_list::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_list::top",1,"prop_list *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_list,0))){
    SWIG_fail_ptr("prop_list_top_get",1,SWIGTYPE_p_prop_list);
  }
  
  result = (prop_list *) ((arg1)->top);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_list,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_list_lvl_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_list *arg1 = (prop_list *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("prop_list::lvl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_list::lvl",1,"prop_list *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("prop_list::lvl",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_list,0))){
    SWIG_fail_ptr("prop_list_lvl_set",1,SWIGTYPE_p_prop_list);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("prop_list_lvl_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->lvl = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_list_lvl_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_list *arg1 = (prop_list *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("prop_list::lvl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_list::lvl",1,"prop_list *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_list,0))){
    SWIG_fail_ptr("prop_list_lvl_get",1,SWIGTYPE_p_prop_list);
  }
  
  result =  ((arg1)->lvl);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_prop_list(lua_State* L) {
  int SWIG_arg = 0;
  prop_list *result = 0 ;
  
  SWIG_check_num_args("prop_list::prop_list",0,0)
  result = (prop_list *)new prop_list();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_list,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_prop_list(void *obj) {
prop_list *arg1 = (prop_list *) obj;
delete arg1;
}
static int _proxy__wrap_new_prop_list(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_prop_list);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_prop_list_attributes[] = {
    { "root", _wrap_prop_list_root_get, _wrap_prop_list_root_set },
    { "last", _wrap_prop_list_last_get, _wrap_prop_list_last_set },
    { "size", _wrap_prop_list_size_get, _wrap_prop_list_size_set },
    { "pos", _wrap_prop_list_pos_get, _wrap_prop_list_pos_set },
    { "top", _wrap_prop_list_top_get, _wrap_prop_list_top_set },
    { "lvl", _wrap_prop_list_lvl_get, _wrap_prop_list_lvl_set },
    {0,0,0}
};
static swig_lua_method swig_prop_list_methods[]= {
    {0,0}
};
static swig_lua_method swig_prop_list_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_prop_list_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_prop_list_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_prop_list_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_prop_list_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_prop_list_Sf_SwigStatic = {
    "prop_list",
    swig_prop_list_Sf_SwigStatic_methods,
    swig_prop_list_Sf_SwigStatic_attributes,
    swig_prop_list_Sf_SwigStatic_constants,
    swig_prop_list_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_prop_list_bases[] = {0};
static const char *swig_prop_list_base_names[] = {0};
static swig_lua_class _wrap_class_prop_list = { "prop_list", "prop_list", &SWIGTYPE_p_prop_list,_proxy__wrap_new_prop_list, swig_delete_prop_list, swig_prop_list_methods, swig_prop_list_attributes, &swig_prop_list_Sf_SwigStatic, swig_prop_list_meta, swig_prop_list_bases, swig_prop_list_base_names };

static int _wrap_prop_stack_stack_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_stack *arg1 = (prop_stack *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("prop_stack::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_stack::stack",1,"prop_stack *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("prop_stack::stack",2,"uint32_t [16]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_stack,0))){
    SWIG_fail_ptr("prop_stack_stack_set",1,SWIGTYPE_p_prop_stack);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("prop_stack_stack_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->stack;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_stack_stack_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_stack *arg1 = (prop_stack *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("prop_stack::stack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_stack::stack",1,"prop_stack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_stack,0))){
    SWIG_fail_ptr("prop_stack_stack_get",1,SWIGTYPE_p_prop_stack);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->stack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_stack_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_stack *arg1 = (prop_stack *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("prop_stack::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_stack::pos",1,"prop_stack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("prop_stack::pos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_stack,0))){
    SWIG_fail_ptr("prop_stack_pos_set",1,SWIGTYPE_p_prop_stack);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_stack_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_stack *arg1 = (prop_stack *) 0 ;
  int result;
  
  SWIG_check_num_args("prop_stack::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_stack::pos",1,"prop_stack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_stack,0))){
    SWIG_fail_ptr("prop_stack_pos_get",1,SWIGTYPE_p_prop_stack);
  }
  
  result = (int) ((arg1)->pos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_prop_stack(lua_State* L) {
  int SWIG_arg = 0;
  prop_stack *result = 0 ;
  
  SWIG_check_num_args("prop_stack::prop_stack",0,0)
  result = (prop_stack *)new prop_stack();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_stack,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_prop_stack(void *obj) {
prop_stack *arg1 = (prop_stack *) obj;
delete arg1;
}
static int _proxy__wrap_new_prop_stack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_prop_stack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_prop_stack_attributes[] = {
    { "stack", _wrap_prop_stack_stack_get, _wrap_prop_stack_stack_set },
    { "pos", _wrap_prop_stack_pos_get, _wrap_prop_stack_pos_set },
    {0,0,0}
};
static swig_lua_method swig_prop_stack_methods[]= {
    {0,0}
};
static swig_lua_method swig_prop_stack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_prop_stack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_prop_stack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_prop_stack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_prop_stack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_prop_stack_Sf_SwigStatic = {
    "prop_stack",
    swig_prop_stack_Sf_SwigStatic_methods,
    swig_prop_stack_Sf_SwigStatic_attributes,
    swig_prop_stack_Sf_SwigStatic_constants,
    swig_prop_stack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_prop_stack_bases[] = {0};
static const char *swig_prop_stack_base_names[] = {0};
static swig_lua_class _wrap_class_prop_stack = { "prop_stack", "prop_stack", &SWIGTYPE_p_prop_stack,_proxy__wrap_new_prop_stack, swig_delete_prop_stack, swig_prop_stack_methods, swig_prop_stack_attributes, &swig_prop_stack_Sf_SwigStatic, swig_prop_stack_meta, swig_prop_stack_bases, swig_prop_stack_base_names };

static int _wrap_prop_data_mul_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("prop_data::mul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::mul",1,"prop_data *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("prop_data::mul",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_mul_set",1,SWIGTYPE_p_prop_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("prop_data_mul_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mul = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_mul_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("prop_data::mul",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::mul",1,"prop_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_mul_get",1,SWIGTYPE_p_prop_data);
  }
  
  result =  ((arg1)->mul);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_div_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("prop_data::div",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::div",1,"prop_data *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("prop_data::div",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_div_set",1,SWIGTYPE_p_prop_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("prop_data_div_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->div = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_div_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("prop_data::div",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::div",1,"prop_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_div_get",1,SWIGTYPE_p_prop_data);
  }
  
  result =  ((arg1)->div);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_tmp_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("prop_data::tmp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::tmp",1,"prop_data *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("prop_data::tmp",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_tmp_set",1,SWIGTYPE_p_prop_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("prop_data_tmp_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->tmp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_tmp_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("prop_data::tmp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::tmp",1,"prop_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_tmp_get",1,SWIGTYPE_p_prop_data);
  }
  
  result =  ((arg1)->tmp);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_cons_mul_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("prop_data::cons_mul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::cons_mul",1,"prop_data *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("prop_data::cons_mul",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_cons_mul_set",1,SWIGTYPE_p_prop_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("prop_data_cons_mul_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->cons_mul = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_cons_mul_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("prop_data::cons_mul",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::cons_mul",1,"prop_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_cons_mul_get",1,SWIGTYPE_p_prop_data);
  }
  
  result =  ((arg1)->cons_mul);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_cons_div_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("prop_data::cons_div",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::cons_div",1,"prop_data *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("prop_data::cons_div",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_cons_div_set",1,SWIGTYPE_p_prop_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("prop_data_cons_div_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->cons_div = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_cons_div_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("prop_data::cons_div",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::cons_div",1,"prop_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_cons_div_get",1,SWIGTYPE_p_prop_data);
  }
  
  result =  ((arg1)->cons_div);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_scale_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("prop_data::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::scale",1,"prop_data *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("prop_data::scale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_scale_set",1,SWIGTYPE_p_prop_data);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->scale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_scale_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  float result;
  
  SWIG_check_num_args("prop_data::scale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::scale",1,"prop_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_scale_get",1,SWIGTYPE_p_prop_data);
  }
  
  result = (float) ((arg1)->scale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("prop_data::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::mode",1,"prop_data *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("prop_data::mode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_mode_set",1,SWIGTYPE_p_prop_data);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  int result;
  
  SWIG_check_num_args("prop_data::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::mode",1,"prop_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_mode_get",1,SWIGTYPE_p_prop_data);
  }
  
  result = (int) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("prop_data::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::pos",1,"prop_data *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("prop_data::pos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_pos_set",1,SWIGTYPE_p_prop_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("prop_data_pos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("prop_data::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::pos",1,"prop_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_pos_get",1,SWIGTYPE_p_prop_data);
  }
  
  result =  ((arg1)->pos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_top_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  prop_list *arg2 = (prop_list *) 0 ;
  
  SWIG_check_num_args("prop_data::top",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::top",1,"prop_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("prop_data::top",2,"prop_list *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_top_set",1,SWIGTYPE_p_prop_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_prop_list,0))){
    SWIG_fail_ptr("prop_data_top_set",2,SWIGTYPE_p_prop_list);
  }
  
  if (arg1) (arg1)->top = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_top_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  prop_list *result = 0 ;
  
  SWIG_check_num_args("prop_data::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::top",1,"prop_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_top_get",1,SWIGTYPE_p_prop_data);
  }
  
  result = (prop_list *)& ((arg1)->top);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_list,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_main_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  prop_list *arg2 = (prop_list *) 0 ;
  
  SWIG_check_num_args("prop_data::main",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::main",1,"prop_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("prop_data::main",2,"prop_list *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_main_set",1,SWIGTYPE_p_prop_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_prop_list,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("prop_data_main_set",2,SWIGTYPE_p_prop_list);
  }
  
  if (arg1) (arg1)->main = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_main_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  prop_list *result = 0 ;
  
  SWIG_check_num_args("prop_data::main",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::main",1,"prop_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_main_get",1,SWIGTYPE_p_prop_data);
  }
  
  result = (prop_list *) ((arg1)->main);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_list,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_mstack_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  prop_stack *arg2 = (prop_stack *) 0 ;
  
  SWIG_check_num_args("prop_data::mstack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::mstack",1,"prop_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("prop_data::mstack",2,"prop_stack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_mstack_set",1,SWIGTYPE_p_prop_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_prop_stack,0))){
    SWIG_fail_ptr("prop_data_mstack_set",2,SWIGTYPE_p_prop_stack);
  }
  
  if (arg1) (arg1)->mstack = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_mstack_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  prop_stack *result = 0 ;
  
  SWIG_check_num_args("prop_data::mstack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::mstack",1,"prop_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_mstack_get",1,SWIGTYPE_p_prop_data);
  }
  
  result = (prop_stack *)& ((arg1)->mstack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_stack,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_cstack_set(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  prop_stack *arg2 = (prop_stack *) 0 ;
  
  SWIG_check_num_args("prop_data::cstack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::cstack",1,"prop_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("prop_data::cstack",2,"prop_stack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_cstack_set",1,SWIGTYPE_p_prop_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_prop_stack,0))){
    SWIG_fail_ptr("prop_data_cstack_set",2,SWIGTYPE_p_prop_stack);
  }
  
  if (arg1) (arg1)->cstack = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prop_data_cstack_get(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *arg1 = (prop_data *) 0 ;
  prop_stack *result = 0 ;
  
  SWIG_check_num_args("prop_data::cstack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prop_data::cstack",1,"prop_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_prop_data,0))){
    SWIG_fail_ptr("prop_data_cstack_get",1,SWIGTYPE_p_prop_data);
  }
  
  result = (prop_stack *)& ((arg1)->cstack);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_stack,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_prop_data(lua_State* L) {
  int SWIG_arg = 0;
  prop_data *result = 0 ;
  
  SWIG_check_num_args("prop_data::prop_data",0,0)
  result = (prop_data *)new prop_data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_data,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_prop_data(void *obj) {
prop_data *arg1 = (prop_data *) obj;
delete arg1;
}
static int _proxy__wrap_new_prop_data(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_prop_data);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_prop_data_attributes[] = {
    { "mul", _wrap_prop_data_mul_get, _wrap_prop_data_mul_set },
    { "div", _wrap_prop_data_div_get, _wrap_prop_data_div_set },
    { "tmp", _wrap_prop_data_tmp_get, _wrap_prop_data_tmp_set },
    { "cons_mul", _wrap_prop_data_cons_mul_get, _wrap_prop_data_cons_mul_set },
    { "cons_div", _wrap_prop_data_cons_div_get, _wrap_prop_data_cons_div_set },
    { "scale", _wrap_prop_data_scale_get, _wrap_prop_data_scale_set },
    { "mode", _wrap_prop_data_mode_get, _wrap_prop_data_mode_set },
    { "pos", _wrap_prop_data_pos_get, _wrap_prop_data_pos_set },
    { "top", _wrap_prop_data_top_get, _wrap_prop_data_top_set },
    { "main", _wrap_prop_data_main_get, _wrap_prop_data_main_set },
    { "mstack", _wrap_prop_data_mstack_get, _wrap_prop_data_mstack_set },
    { "cstack", _wrap_prop_data_cstack_get, _wrap_prop_data_cstack_set },
    {0,0,0}
};
static swig_lua_method swig_prop_data_methods[]= {
    {0,0}
};
static swig_lua_method swig_prop_data_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_prop_data_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_prop_data_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_prop_data_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_prop_data_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_prop_data_Sf_SwigStatic = {
    "prop_data",
    swig_prop_data_Sf_SwigStatic_methods,
    swig_prop_data_Sf_SwigStatic_attributes,
    swig_prop_data_Sf_SwigStatic_constants,
    swig_prop_data_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_prop_data_bases[] = {0};
static const char *swig_prop_data_base_names[] = {0};
static swig_lua_class _wrap_class_prop_data = { "prop_data", "prop_data", &SWIGTYPE_p_prop_data,_proxy__wrap_new_prop_data, swig_delete_prop_data, swig_prop_data_methods, swig_prop_data_attributes, &swig_prop_data_Sf_SwigStatic, swig_prop_data_meta, swig_prop_data_bases, swig_prop_data_base_names };

static int _wrap_sp_prop_prp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_prop *arg1 = (sp_prop *) 0 ;
  prop_data *arg2 = (prop_data *) 0 ;
  
  SWIG_check_num_args("sp_prop::prp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop::prp",1,"sp_prop *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_prop::prp",2,"prop_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_prp_set",1,SWIGTYPE_p_sp_prop);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_prop_data,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_prop_prp_set",2,SWIGTYPE_p_prop_data);
  }
  
  if (arg1) (arg1)->prp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_prop_prp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_prop *arg1 = (sp_prop *) 0 ;
  prop_data *result = 0 ;
  
  SWIG_check_num_args("sp_prop::prp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop::prp",1,"sp_prop *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_prp_get",1,SWIGTYPE_p_sp_prop);
  }
  
  result = (prop_data *) ((arg1)->prp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_data,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_prop_evt_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_prop *arg1 = (sp_prop *) 0 ;
  prop_event *arg2 = (prop_event *) 0 ;
  
  SWIG_check_num_args("sp_prop::evt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop::evt",1,"sp_prop *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_prop::evt",2,"prop_event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_evt_set",1,SWIGTYPE_p_sp_prop);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_prop_event,0))){
    SWIG_fail_ptr("sp_prop_evt_set",2,SWIGTYPE_p_prop_event);
  }
  
  if (arg1) (arg1)->evt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_prop_evt_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_prop *arg1 = (sp_prop *) 0 ;
  prop_event *result = 0 ;
  
  SWIG_check_num_args("sp_prop::evt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop::evt",1,"sp_prop *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_evt_get",1,SWIGTYPE_p_sp_prop);
  }
  
  result = (prop_event *)& ((arg1)->evt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_prop_event,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_prop_count_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_prop *arg1 = (sp_prop *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_prop::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop::count",1,"sp_prop *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_prop::count",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_count_set",1,SWIGTYPE_p_sp_prop);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_prop_count_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->count = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_prop_count_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_prop *arg1 = (sp_prop *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_prop::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop::count",1,"sp_prop *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_count_get",1,SWIGTYPE_p_sp_prop);
  }
  
  result =  ((arg1)->count);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_prop_bpm_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_prop *arg1 = (sp_prop *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_prop::bpm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop::bpm",1,"sp_prop *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_prop::bpm",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_bpm_set",1,SWIGTYPE_p_sp_prop);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->bpm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_prop_bpm_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_prop *arg1 = (sp_prop *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_prop::bpm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop::bpm",1,"sp_prop *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_bpm_get",1,SWIGTYPE_p_sp_prop);
  }
  
  result = (float) ((arg1)->bpm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_prop_lbpm_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_prop *arg1 = (sp_prop *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_prop::lbpm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop::lbpm",1,"sp_prop *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_prop::lbpm",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_lbpm_set",1,SWIGTYPE_p_sp_prop);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lbpm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_prop_lbpm_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_prop *arg1 = (sp_prop *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_prop::lbpm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop::lbpm",1,"sp_prop *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_lbpm_get",1,SWIGTYPE_p_sp_prop);
  }
  
  result = (float) ((arg1)->lbpm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_prop(lua_State* L) {
  int SWIG_arg = 0;
  sp_prop *result = 0 ;
  
  SWIG_check_num_args("sp_prop::sp_prop",0,0)
  result = (sp_prop *)new sp_prop();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_prop,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_prop(void *obj) {
sp_prop *arg1 = (sp_prop *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_prop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_prop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_prop_attributes[] = {
    { "prp", _wrap_sp_prop_prp_get, _wrap_sp_prop_prp_set },
    { "evt", _wrap_sp_prop_evt_get, _wrap_sp_prop_evt_set },
    { "count", _wrap_sp_prop_count_get, _wrap_sp_prop_count_set },
    { "bpm", _wrap_sp_prop_bpm_get, _wrap_sp_prop_bpm_set },
    { "lbpm", _wrap_sp_prop_lbpm_get, _wrap_sp_prop_lbpm_set },
    {0,0,0}
};
static swig_lua_method swig_sp_prop_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_prop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_prop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_prop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_prop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_prop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_prop_SwigStatic = {
    "sp_prop",
    swig_sp_prop_SwigStatic_methods,
    swig_sp_prop_SwigStatic_attributes,
    swig_sp_prop_SwigStatic_constants,
    swig_sp_prop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_prop_bases[] = {0};
static const char *swig_sp_prop_base_names[] = {0};
static swig_lua_class _wrap_class_sp_prop = { "sp_prop", "sp_prop", &SWIGTYPE_p_sp_prop,_proxy__wrap_new_sp_prop, swig_delete_sp_prop, swig_sp_prop_methods, swig_sp_prop_attributes, &swig_sp_prop_SwigStatic, swig_sp_prop_meta, swig_sp_prop_bases, swig_sp_prop_base_names };

static int _wrap_sp_prop_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_prop **arg1 = (sp_prop **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_prop_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop_create",1,"sp_prop **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_create",1,SWIGTYPE_p_p_sp_prop);
  }
  
  result = (int)sp_prop_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_prop_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_prop **arg1 = (sp_prop **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_prop_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop_destroy",1,"sp_prop **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_destroy",1,SWIGTYPE_p_p_sp_prop);
  }
  
  result = (int)sp_prop_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_prop_reset(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_prop *arg2 = (sp_prop *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_prop_reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop_reset",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_prop_reset",2,"sp_prop *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_prop_reset",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_reset",2,SWIGTYPE_p_sp_prop);
  }
  
  result = (int)sp_prop_reset(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_prop_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_prop *arg2 = (sp_prop *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_prop_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_prop_init",2,"sp_prop *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_prop_init",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_prop_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_init",2,SWIGTYPE_p_sp_prop);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_prop_init(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_prop_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_prop *arg2 = (sp_prop *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_prop_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_prop_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_prop_compute",2,"sp_prop *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_prop_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_prop_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_prop_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_prop,0))){
    SWIG_fail_ptr("sp_prop_compute",2,SWIGTYPE_p_sp_prop);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_prop_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_prop_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_prop_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_faust_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift *arg1 = (sp_pshift *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("sp_pshift::faust",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift::faust",1,"sp_pshift *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pshift::faust",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_faust_set",1,SWIGTYPE_p_sp_pshift);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_pshift_faust_set");
  if (arg1) (arg1)->faust = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_faust_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift *arg1 = (sp_pshift *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("sp_pshift::faust",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift::faust",1,"sp_pshift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_faust_get",1,SWIGTYPE_p_sp_pshift);
  }
  
  result = (void *) ((arg1)->faust);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_argpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift *arg1 = (sp_pshift *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_pshift::argpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift::argpos",1,"sp_pshift *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_pshift::argpos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_argpos_set",1,SWIGTYPE_p_sp_pshift);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->argpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_argpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift *arg1 = (sp_pshift *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pshift::argpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift::argpos",1,"sp_pshift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_argpos_get",1,SWIGTYPE_p_sp_pshift);
  }
  
  result = (int) ((arg1)->argpos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_args_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift *arg1 = (sp_pshift *) 0 ;
  float **arg2 ;
  
  SWIG_check_num_args("sp_pshift::args",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift::args",1,"sp_pshift *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pshift::args",2,"float *[3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_args_set",1,SWIGTYPE_p_sp_pshift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("sp_pshift_args_set",2,SWIGTYPE_p_p_float);
  }
  
  {
    size_t ii;
    float * *b = (float * *) arg1->args;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_args_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift *arg1 = (sp_pshift *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("sp_pshift::args",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift::args",1,"sp_pshift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_args_get",1,SWIGTYPE_p_sp_pshift);
  }
  
  result = (float **)(float **) ((arg1)->args);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_shift_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift *arg1 = (sp_pshift *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_pshift::shift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift::shift",1,"sp_pshift *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pshift::shift",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_shift_set",1,SWIGTYPE_p_sp_pshift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_pshift_shift_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->shift = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_shift_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift *arg1 = (sp_pshift *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_pshift::shift",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift::shift",1,"sp_pshift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_shift_get",1,SWIGTYPE_p_sp_pshift);
  }
  
  result = (float *) ((arg1)->shift);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_window_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift *arg1 = (sp_pshift *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_pshift::window",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift::window",1,"sp_pshift *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pshift::window",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_window_set",1,SWIGTYPE_p_sp_pshift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_pshift_window_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->window = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_window_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift *arg1 = (sp_pshift *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_pshift::window",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift::window",1,"sp_pshift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_window_get",1,SWIGTYPE_p_sp_pshift);
  }
  
  result = (float *) ((arg1)->window);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_xfade_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift *arg1 = (sp_pshift *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_pshift::xfade",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift::xfade",1,"sp_pshift *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pshift::xfade",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_xfade_set",1,SWIGTYPE_p_sp_pshift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_pshift_xfade_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->xfade = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_xfade_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift *arg1 = (sp_pshift *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_pshift::xfade",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift::xfade",1,"sp_pshift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_xfade_get",1,SWIGTYPE_p_sp_pshift);
  }
  
  result = (float *) ((arg1)->xfade);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_pshift(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift *result = 0 ;
  
  SWIG_check_num_args("sp_pshift::sp_pshift",0,0)
  result = (sp_pshift *)new sp_pshift();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_pshift,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_pshift(void *obj) {
sp_pshift *arg1 = (sp_pshift *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_pshift(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_pshift);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_pshift_attributes[] = {
    { "faust", _wrap_sp_pshift_faust_get, _wrap_sp_pshift_faust_set },
    { "argpos", _wrap_sp_pshift_argpos_get, _wrap_sp_pshift_argpos_set },
    { "args", _wrap_sp_pshift_args_get, _wrap_sp_pshift_args_set },
    { "shift", _wrap_sp_pshift_shift_get, _wrap_sp_pshift_shift_set },
    { "window", _wrap_sp_pshift_window_get, _wrap_sp_pshift_window_set },
    { "xfade", _wrap_sp_pshift_xfade_get, _wrap_sp_pshift_xfade_set },
    {0,0,0}
};
static swig_lua_method swig_sp_pshift_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_pshift_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_pshift_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_pshift_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_pshift_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_pshift_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_pshift_Sf_SwigStatic = {
    "sp_pshift",
    swig_sp_pshift_Sf_SwigStatic_methods,
    swig_sp_pshift_Sf_SwigStatic_attributes,
    swig_sp_pshift_Sf_SwigStatic_constants,
    swig_sp_pshift_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_pshift_bases[] = {0};
static const char *swig_sp_pshift_base_names[] = {0};
static swig_lua_class _wrap_class_sp_pshift = { "sp_pshift", "sp_pshift", &SWIGTYPE_p_sp_pshift,_proxy__wrap_new_sp_pshift, swig_delete_sp_pshift, swig_sp_pshift_methods, swig_sp_pshift_attributes, &swig_sp_pshift_Sf_SwigStatic, swig_sp_pshift_meta, swig_sp_pshift_bases, swig_sp_pshift_base_names };

static int _wrap_sp_pshift_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift **arg1 = (sp_pshift **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pshift_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift_create",1,"sp_pshift **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_create",1,SWIGTYPE_p_p_sp_pshift);
  }
  
  result = (int)sp_pshift_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_pshift **arg1 = (sp_pshift **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pshift_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift_destroy",1,"sp_pshift **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_destroy",1,SWIGTYPE_p_p_sp_pshift);
  }
  
  result = (int)sp_pshift_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_pshift *arg2 = (sp_pshift *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pshift_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pshift_init",2,"sp_pshift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_pshift_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_init",2,SWIGTYPE_p_sp_pshift);
  }
  
  result = (int)sp_pshift_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_pshift_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_pshift *arg2 = (sp_pshift *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_pshift_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_pshift_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_pshift_compute",2,"sp_pshift *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_pshift_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_pshift_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_pshift_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_pshift,0))){
    SWIG_fail_ptr("sp_pshift_compute",2,SWIGTYPE_p_sp_pshift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pshift_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_pshift_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_pshift_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_ptrack::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::freq",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_freq_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_ptrack::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::freq",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_freq_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_ptrack::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::amp",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_amp_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_ptrack::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::amp",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_amp_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_asig_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_ptrack::asig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::asig",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::asig",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_asig_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->asig = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_asig_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_ptrack::asig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::asig",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_asig_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (float) ((arg1)->asig);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_size_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_ptrack::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::size",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::size",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_size_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_size_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_ptrack::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::size",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_size_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (float) ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_peak_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_ptrack::peak",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::peak",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::peak",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_peak_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->peak = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_peak_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_ptrack::peak",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::peak",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_peak_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (float) ((arg1)->peak);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_signal_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_ptrack::signal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::signal",1,"sp_ptrack *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ptrack::signal",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_signal_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_ptrack_signal_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->signal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_signal_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_ptrack::signal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::signal",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_signal_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (sp_auxdata *)& ((arg1)->signal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_prev_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_ptrack::prev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::prev",1,"sp_ptrack *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ptrack::prev",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_prev_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_ptrack_prev_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->prev = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_prev_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_ptrack::prev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::prev",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_prev_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (sp_auxdata *)& ((arg1)->prev);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_sin_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_ptrack::sin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::sin",1,"sp_ptrack *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ptrack::sin",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_sin_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_ptrack_sin_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->sin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_sin_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_ptrack::sin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::sin",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_sin_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (sp_auxdata *)& ((arg1)->sin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_spec1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_ptrack::spec1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::spec1",1,"sp_ptrack *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ptrack::spec1",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_spec1_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_ptrack_spec1_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->spec1 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_spec1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_ptrack::spec1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::spec1",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_spec1_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (sp_auxdata *)& ((arg1)->spec1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_spec2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_ptrack::spec2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::spec2",1,"sp_ptrack *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ptrack::spec2",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_spec2_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_ptrack_spec2_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->spec2 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_spec2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_ptrack::spec2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::spec2",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_spec2_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (sp_auxdata *)& ((arg1)->spec2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_peakarray_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_ptrack::peakarray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::peakarray",1,"sp_ptrack *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ptrack::peakarray",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_peakarray_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_ptrack_peakarray_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->peakarray = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_peakarray_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_ptrack::peakarray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::peakarray",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_peakarray_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (sp_auxdata *)& ((arg1)->peakarray);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_numpks_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_ptrack::numpks",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::numpks",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::numpks",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_numpks_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->numpks = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_numpks_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_ptrack::numpks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::numpks",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_numpks_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (int) ((arg1)->numpks);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_cnt_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_ptrack::cnt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::cnt",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::cnt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_cnt_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->cnt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_cnt_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_ptrack::cnt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::cnt",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_cnt_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (int) ((arg1)->cnt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_histcnt_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_ptrack::histcnt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::histcnt",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::histcnt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_histcnt_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->histcnt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_histcnt_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_ptrack::histcnt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::histcnt",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_histcnt_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (int) ((arg1)->histcnt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_hopsize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_ptrack::hopsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::hopsize",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::hopsize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_hopsize_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->hopsize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_hopsize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_ptrack::hopsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::hopsize",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_hopsize_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (int) ((arg1)->hopsize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_ptrack::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::sr",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_sr_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_ptrack::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::sr",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_sr_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_cps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_ptrack::cps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::cps",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::cps",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_cps_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->cps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_cps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_ptrack::cps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::cps",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_cps_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (float) ((arg1)->cps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_dbs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_ptrack::dbs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::dbs",1,"sp_ptrack *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ptrack::dbs",2,"float [20]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_dbs_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_ptrack_dbs_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->dbs;
    for (ii = 0; ii < (size_t)20; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_dbs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_ptrack::dbs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::dbs",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_dbs_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (float *)(float *) ((arg1)->dbs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_amplo_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_ptrack::amplo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::amplo",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::amplo",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_amplo_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amplo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_amplo_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_ptrack::amplo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::amplo",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_amplo_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (float) ((arg1)->amplo);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_amphi_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_ptrack::amphi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::amphi",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::amphi",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_amphi_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amphi = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_amphi_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_ptrack::amphi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::amphi",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_amphi_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (float) ((arg1)->amphi);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_npartial_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_ptrack::npartial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::npartial",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::npartial",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_npartial_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->npartial = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_npartial_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_ptrack::npartial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::npartial",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_npartial_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (float) ((arg1)->npartial);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_dbfs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_ptrack::dbfs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::dbfs",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::dbfs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_dbfs_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dbfs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_dbfs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_ptrack::dbfs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::dbfs",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_dbfs_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (float) ((arg1)->dbfs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_prevf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_ptrack::prevf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::prevf",1,"sp_ptrack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_ptrack::prevf",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_prevf_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prevf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_prevf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_ptrack::prevf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::prevf",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_prevf_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (float) ((arg1)->prevf);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_fft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  sp_fft *arg2 = (sp_fft *) 0 ;
  
  SWIG_check_num_args("sp_ptrack::fft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::fft",1,"sp_ptrack *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ptrack::fft",2,"sp_fft *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_fft_set",1,SWIGTYPE_p_sp_ptrack);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_fft,0))){
    SWIG_fail_ptr("sp_ptrack_fft_set",2,SWIGTYPE_p_sp_fft);
  }
  
  if (arg1) (arg1)->fft = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_fft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *arg1 = (sp_ptrack *) 0 ;
  sp_fft *result = 0 ;
  
  SWIG_check_num_args("sp_ptrack::fft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack::fft",1,"sp_ptrack *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_fft_get",1,SWIGTYPE_p_sp_ptrack);
  }
  
  result = (sp_fft *)& ((arg1)->fft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_fft,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_ptrack(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack *result = 0 ;
  
  SWIG_check_num_args("sp_ptrack::sp_ptrack",0,0)
  result = (sp_ptrack *)new sp_ptrack();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ptrack,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_ptrack(void *obj) {
sp_ptrack *arg1 = (sp_ptrack *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_ptrack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_ptrack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_ptrack_attributes[] = {
    { "freq", _wrap_sp_ptrack_freq_get, _wrap_sp_ptrack_freq_set },
    { "amp", _wrap_sp_ptrack_amp_get, _wrap_sp_ptrack_amp_set },
    { "asig", _wrap_sp_ptrack_asig_get, _wrap_sp_ptrack_asig_set },
    { "size", _wrap_sp_ptrack_size_get, _wrap_sp_ptrack_size_set },
    { "peak", _wrap_sp_ptrack_peak_get, _wrap_sp_ptrack_peak_set },
    { "signal", _wrap_sp_ptrack_signal_get, _wrap_sp_ptrack_signal_set },
    { "prev", _wrap_sp_ptrack_prev_get, _wrap_sp_ptrack_prev_set },
    { "sin", _wrap_sp_ptrack_sin_get, _wrap_sp_ptrack_sin_set },
    { "spec1", _wrap_sp_ptrack_spec1_get, _wrap_sp_ptrack_spec1_set },
    { "spec2", _wrap_sp_ptrack_spec2_get, _wrap_sp_ptrack_spec2_set },
    { "peakarray", _wrap_sp_ptrack_peakarray_get, _wrap_sp_ptrack_peakarray_set },
    { "numpks", _wrap_sp_ptrack_numpks_get, _wrap_sp_ptrack_numpks_set },
    { "cnt", _wrap_sp_ptrack_cnt_get, _wrap_sp_ptrack_cnt_set },
    { "histcnt", _wrap_sp_ptrack_histcnt_get, _wrap_sp_ptrack_histcnt_set },
    { "hopsize", _wrap_sp_ptrack_hopsize_get, _wrap_sp_ptrack_hopsize_set },
    { "sr", _wrap_sp_ptrack_sr_get, _wrap_sp_ptrack_sr_set },
    { "cps", _wrap_sp_ptrack_cps_get, _wrap_sp_ptrack_cps_set },
    { "dbs", _wrap_sp_ptrack_dbs_get, _wrap_sp_ptrack_dbs_set },
    { "amplo", _wrap_sp_ptrack_amplo_get, _wrap_sp_ptrack_amplo_set },
    { "amphi", _wrap_sp_ptrack_amphi_get, _wrap_sp_ptrack_amphi_set },
    { "npartial", _wrap_sp_ptrack_npartial_get, _wrap_sp_ptrack_npartial_set },
    { "dbfs", _wrap_sp_ptrack_dbfs_get, _wrap_sp_ptrack_dbfs_set },
    { "prevf", _wrap_sp_ptrack_prevf_get, _wrap_sp_ptrack_prevf_set },
    { "fft", _wrap_sp_ptrack_fft_get, _wrap_sp_ptrack_fft_set },
    {0,0,0}
};
static swig_lua_method swig_sp_ptrack_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_ptrack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_ptrack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_ptrack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_ptrack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_ptrack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_ptrack_Sf_SwigStatic = {
    "sp_ptrack",
    swig_sp_ptrack_Sf_SwigStatic_methods,
    swig_sp_ptrack_Sf_SwigStatic_attributes,
    swig_sp_ptrack_Sf_SwigStatic_constants,
    swig_sp_ptrack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_ptrack_bases[] = {0};
static const char *swig_sp_ptrack_base_names[] = {0};
static swig_lua_class _wrap_class_sp_ptrack = { "sp_ptrack", "sp_ptrack", &SWIGTYPE_p_sp_ptrack,_proxy__wrap_new_sp_ptrack, swig_delete_sp_ptrack, swig_sp_ptrack_methods, swig_sp_ptrack_attributes, &swig_sp_ptrack_Sf_SwigStatic, swig_sp_ptrack_meta, swig_sp_ptrack_bases, swig_sp_ptrack_base_names };

static int _wrap_sp_ptrack_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack **arg1 = (sp_ptrack **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_ptrack_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack_create",1,"sp_ptrack **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_create",1,SWIGTYPE_p_p_sp_ptrack);
  }
  
  result = (int)sp_ptrack_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_ptrack **arg1 = (sp_ptrack **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_ptrack_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack_destroy",1,"sp_ptrack **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_destroy",1,SWIGTYPE_p_p_sp_ptrack);
  }
  
  result = (int)sp_ptrack_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ptrack *arg2 = (sp_ptrack *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("sp_ptrack_init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ptrack_init",2,"sp_ptrack *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_ptrack_init",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("sp_ptrack_init",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_ptrack_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_init",2,SWIGTYPE_p_sp_ptrack);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)sp_ptrack_init(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_ptrack_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ptrack *arg2 = (sp_ptrack *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_ptrack_compute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_ptrack_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_ptrack_compute",2,"sp_ptrack *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_ptrack_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_ptrack_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_ptrack_compute",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_ptrack_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ptrack,0))){
    SWIG_fail_ptr("sp_ptrack_compute",2,SWIGTYPE_p_sp_ptrack);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_ptrack_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_ptrack_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_ptrack_compute",5,SWIGTYPE_p_float);
  }
  
  result = (int)sp_ptrack_compute(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh *arg1 = (sp_randh *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_randh::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh::freq",1,"sp_randh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randh::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_freq_set",1,SWIGTYPE_p_sp_randh);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh *arg1 = (sp_randh *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_randh::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh::freq",1,"sp_randh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_freq_get",1,SWIGTYPE_p_sp_randh);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_min_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh *arg1 = (sp_randh *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_randh::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh::min",1,"sp_randh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randh::min",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_min_set",1,SWIGTYPE_p_sp_randh);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->min = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_min_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh *arg1 = (sp_randh *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_randh::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh::min",1,"sp_randh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_min_get",1,SWIGTYPE_p_sp_randh);
  }
  
  result = (float) ((arg1)->min);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_max_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh *arg1 = (sp_randh *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_randh::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh::max",1,"sp_randh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randh::max",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_max_set",1,SWIGTYPE_p_sp_randh);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_max_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh *arg1 = (sp_randh *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_randh::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh::max",1,"sp_randh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_max_get",1,SWIGTYPE_p_sp_randh);
  }
  
  result = (float) ((arg1)->max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_val_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh *arg1 = (sp_randh *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_randh::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh::val",1,"sp_randh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randh::val",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_val_set",1,SWIGTYPE_p_sp_randh);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_val_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh *arg1 = (sp_randh *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_randh::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh::val",1,"sp_randh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_val_get",1,SWIGTYPE_p_sp_randh);
  }
  
  result = (float) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_counter_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh *arg1 = (sp_randh *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_randh::counter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh::counter",1,"sp_randh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_randh::counter",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_counter_set",1,SWIGTYPE_p_sp_randh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_randh_counter_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->counter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_counter_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh *arg1 = (sp_randh *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_randh::counter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh::counter",1,"sp_randh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_counter_get",1,SWIGTYPE_p_sp_randh);
  }
  
  result =  ((arg1)->counter);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_dur_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh *arg1 = (sp_randh *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_randh::dur",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh::dur",1,"sp_randh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_randh::dur",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_dur_set",1,SWIGTYPE_p_sp_randh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_randh_dur_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->dur = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_dur_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh *arg1 = (sp_randh *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_randh::dur",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh::dur",1,"sp_randh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_dur_get",1,SWIGTYPE_p_sp_randh);
  }
  
  result =  ((arg1)->dur);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_randh(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh *result = 0 ;
  
  SWIG_check_num_args("sp_randh::sp_randh",0,0)
  result = (sp_randh *)new sp_randh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_randh,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_randh(void *obj) {
sp_randh *arg1 = (sp_randh *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_randh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_randh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_randh_attributes[] = {
    { "freq", _wrap_sp_randh_freq_get, _wrap_sp_randh_freq_set },
    { "min", _wrap_sp_randh_min_get, _wrap_sp_randh_min_set },
    { "max", _wrap_sp_randh_max_get, _wrap_sp_randh_max_set },
    { "val", _wrap_sp_randh_val_get, _wrap_sp_randh_val_set },
    { "counter", _wrap_sp_randh_counter_get, _wrap_sp_randh_counter_set },
    { "dur", _wrap_sp_randh_dur_get, _wrap_sp_randh_dur_set },
    {0,0,0}
};
static swig_lua_method swig_sp_randh_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_randh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_randh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_randh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_randh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_randh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_randh_Sf_SwigStatic = {
    "sp_randh",
    swig_sp_randh_Sf_SwigStatic_methods,
    swig_sp_randh_Sf_SwigStatic_attributes,
    swig_sp_randh_Sf_SwigStatic_constants,
    swig_sp_randh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_randh_bases[] = {0};
static const char *swig_sp_randh_base_names[] = {0};
static swig_lua_class _wrap_class_sp_randh = { "sp_randh", "sp_randh", &SWIGTYPE_p_sp_randh,_proxy__wrap_new_sp_randh, swig_delete_sp_randh, swig_sp_randh_methods, swig_sp_randh_attributes, &swig_sp_randh_Sf_SwigStatic, swig_sp_randh_meta, swig_sp_randh_bases, swig_sp_randh_base_names };

static int _wrap_sp_randh_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh **arg1 = (sp_randh **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_randh_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh_create",1,"sp_randh **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_create",1,SWIGTYPE_p_p_sp_randh);
  }
  
  result = (int)sp_randh_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_randh **arg1 = (sp_randh **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_randh_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh_destroy",1,"sp_randh **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_destroy",1,SWIGTYPE_p_p_sp_randh);
  }
  
  result = (int)sp_randh_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_randh *arg2 = (sp_randh *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_randh_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_randh_init",2,"sp_randh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_randh_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_init",2,SWIGTYPE_p_sp_randh);
  }
  
  result = (int)sp_randh_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randh_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_randh *arg2 = (sp_randh *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_randh_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randh_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_randh_compute",2,"sp_randh *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_randh_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_randh_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_randh_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_randh,0))){
    SWIG_fail_ptr("sp_randh_compute",2,SWIGTYPE_p_sp_randh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_randh_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_randh_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_randh_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_min_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_randi::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::min",1,"sp_randi *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randi::min",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_min_set",1,SWIGTYPE_p_sp_randi);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->min = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_min_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_randi::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::min",1,"sp_randi *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_min_get",1,SWIGTYPE_p_sp_randi);
  }
  
  result = (float) ((arg1)->min);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_max_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_randi::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::max",1,"sp_randi *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randi::max",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_max_set",1,SWIGTYPE_p_sp_randi);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_max_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_randi::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::max",1,"sp_randi *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_max_get",1,SWIGTYPE_p_sp_randi);
  }
  
  result = (float) ((arg1)->max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_cps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_randi::cps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::cps",1,"sp_randi *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randi::cps",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_cps_set",1,SWIGTYPE_p_sp_randi);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->cps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_cps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_randi::cps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::cps",1,"sp_randi *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_cps_get",1,SWIGTYPE_p_sp_randi);
  }
  
  result = (float) ((arg1)->cps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_randi::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::mode",1,"sp_randi *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randi::mode",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_mode_set",1,SWIGTYPE_p_sp_randi);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_randi::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::mode",1,"sp_randi *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_mode_get",1,SWIGTYPE_p_sp_randi);
  }
  
  result = (float) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_fstval_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_randi::fstval",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::fstval",1,"sp_randi *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randi::fstval",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_fstval_set",1,SWIGTYPE_p_sp_randi);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->fstval = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_fstval_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_randi::fstval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::fstval",1,"sp_randi *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_fstval_get",1,SWIGTYPE_p_sp_randi);
  }
  
  result = (float) ((arg1)->fstval);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_cpscod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  int16_t arg2 ;
  int16_t *argp2 ;
  
  SWIG_check_num_args("sp_randi::cpscod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::cpscod",1,"sp_randi *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_randi::cpscod",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_cpscod_set",1,SWIGTYPE_p_sp_randi);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int16_t,0))){
    SWIG_fail_ptr("sp_randi_cpscod_set",2,SWIGTYPE_p_int16_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->cpscod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_cpscod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("sp_randi::cpscod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::cpscod",1,"sp_randi *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_cpscod_get",1,SWIGTYPE_p_sp_randi);
  }
  
  result =  ((arg1)->cpscod);
  {
    int16_t * resultptr = new int16_t((const int16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_phs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_randi::phs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::phs",1,"sp_randi *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_randi::phs",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_phs_set",1,SWIGTYPE_p_sp_randi);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_randi_phs_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->phs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_phs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_randi::phs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::phs",1,"sp_randi *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_phs_get",1,SWIGTYPE_p_sp_randi);
  }
  
  result =  ((arg1)->phs);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_num1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_randi::num1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::num1",1,"sp_randi *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randi::num1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_num1_set",1,SWIGTYPE_p_sp_randi);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->num1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_num1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_randi::num1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::num1",1,"sp_randi *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_num1_get",1,SWIGTYPE_p_sp_randi);
  }
  
  result = (float) ((arg1)->num1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_num2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_randi::num2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::num2",1,"sp_randi *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randi::num2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_num2_set",1,SWIGTYPE_p_sp_randi);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->num2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_num2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_randi::num2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::num2",1,"sp_randi *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_num2_get",1,SWIGTYPE_p_sp_randi);
  }
  
  result = (float) ((arg1)->num2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_dfdmax_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_randi::dfdmax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::dfdmax",1,"sp_randi *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randi::dfdmax",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_dfdmax_set",1,SWIGTYPE_p_sp_randi);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dfdmax = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_dfdmax_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_randi::dfdmax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::dfdmax",1,"sp_randi *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_dfdmax_get",1,SWIGTYPE_p_sp_randi);
  }
  
  result = (float) ((arg1)->dfdmax);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_holdrand_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_randi::holdrand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::holdrand",1,"sp_randi *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randi::holdrand",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_holdrand_set",1,SWIGTYPE_p_sp_randi);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->holdrand = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_holdrand_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_randi::holdrand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::holdrand",1,"sp_randi *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_holdrand_get",1,SWIGTYPE_p_sp_randi);
  }
  
  result = (int) ((arg1)->holdrand);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_sicvt_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_randi::sicvt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::sicvt",1,"sp_randi *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randi::sicvt",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_sicvt_set",1,SWIGTYPE_p_sp_randi);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sicvt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_sicvt_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *arg1 = (sp_randi *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_randi::sicvt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi::sicvt",1,"sp_randi *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_sicvt_get",1,SWIGTYPE_p_sp_randi);
  }
  
  result = (float) ((arg1)->sicvt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_randi(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi *result = 0 ;
  
  SWIG_check_num_args("sp_randi::sp_randi",0,0)
  result = (sp_randi *)new sp_randi();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_randi,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_randi(void *obj) {
sp_randi *arg1 = (sp_randi *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_randi(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_randi);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_randi_attributes[] = {
    { "min", _wrap_sp_randi_min_get, _wrap_sp_randi_min_set },
    { "max", _wrap_sp_randi_max_get, _wrap_sp_randi_max_set },
    { "cps", _wrap_sp_randi_cps_get, _wrap_sp_randi_cps_set },
    { "mode", _wrap_sp_randi_mode_get, _wrap_sp_randi_mode_set },
    { "fstval", _wrap_sp_randi_fstval_get, _wrap_sp_randi_fstval_set },
    { "cpscod", _wrap_sp_randi_cpscod_get, _wrap_sp_randi_cpscod_set },
    { "phs", _wrap_sp_randi_phs_get, _wrap_sp_randi_phs_set },
    { "num1", _wrap_sp_randi_num1_get, _wrap_sp_randi_num1_set },
    { "num2", _wrap_sp_randi_num2_get, _wrap_sp_randi_num2_set },
    { "dfdmax", _wrap_sp_randi_dfdmax_get, _wrap_sp_randi_dfdmax_set },
    { "holdrand", _wrap_sp_randi_holdrand_get, _wrap_sp_randi_holdrand_set },
    { "sicvt", _wrap_sp_randi_sicvt_get, _wrap_sp_randi_sicvt_set },
    {0,0,0}
};
static swig_lua_method swig_sp_randi_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_randi_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_randi_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_randi_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_randi_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_randi_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_randi_Sf_SwigStatic = {
    "sp_randi",
    swig_sp_randi_Sf_SwigStatic_methods,
    swig_sp_randi_Sf_SwigStatic_attributes,
    swig_sp_randi_Sf_SwigStatic_constants,
    swig_sp_randi_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_randi_bases[] = {0};
static const char *swig_sp_randi_base_names[] = {0};
static swig_lua_class _wrap_class_sp_randi = { "sp_randi", "sp_randi", &SWIGTYPE_p_sp_randi,_proxy__wrap_new_sp_randi, swig_delete_sp_randi, swig_sp_randi_methods, swig_sp_randi_attributes, &swig_sp_randi_Sf_SwigStatic, swig_sp_randi_meta, swig_sp_randi_bases, swig_sp_randi_base_names };

static int _wrap_sp_randi_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi **arg1 = (sp_randi **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_randi_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi_create",1,"sp_randi **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_create",1,SWIGTYPE_p_p_sp_randi);
  }
  
  result = (int)sp_randi_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_randi **arg1 = (sp_randi **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_randi_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi_destroy",1,"sp_randi **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_destroy",1,SWIGTYPE_p_p_sp_randi);
  }
  
  result = (int)sp_randi_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_randi *arg2 = (sp_randi *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_randi_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_randi_init",2,"sp_randi *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_randi_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_init",2,SWIGTYPE_p_sp_randi);
  }
  
  result = (int)sp_randi_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randi_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_randi *arg2 = (sp_randi *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_randi_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randi_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_randi_compute",2,"sp_randi *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_randi_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_randi_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_randi_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_randi,0))){
    SWIG_fail_ptr("sp_randi_compute",2,SWIGTYPE_p_sp_randi);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_randi_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_randi_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_randi_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randmt_mti_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randmt *arg1 = (sp_randmt *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_randmt::mti",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randmt::mti",1,"sp_randmt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_randmt::mti",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randmt,0))){
    SWIG_fail_ptr("sp_randmt_mti_set",1,SWIGTYPE_p_sp_randmt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mti = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randmt_mti_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randmt *arg1 = (sp_randmt *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_randmt::mti",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randmt::mti",1,"sp_randmt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randmt,0))){
    SWIG_fail_ptr("sp_randmt_mti_get",1,SWIGTYPE_p_sp_randmt);
  }
  
  result = (int) ((arg1)->mti);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randmt_mt_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_randmt *arg1 = (sp_randmt *) 0 ;
  uint32_t *arg2 ;
  
  SWIG_check_num_args("sp_randmt::mt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randmt::mt",1,"sp_randmt *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_randmt::mt",2,"uint32_t [624]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randmt,0))){
    SWIG_fail_ptr("sp_randmt_mt_set",1,SWIGTYPE_p_sp_randmt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_randmt_mt_set",2,SWIGTYPE_p_uint32_t);
  }
  
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->mt;
    for (ii = 0; ii < (size_t)624; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randmt_mt_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_randmt *arg1 = (sp_randmt *) 0 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("sp_randmt::mt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randmt::mt",1,"sp_randmt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randmt,0))){
    SWIG_fail_ptr("sp_randmt_mt_get",1,SWIGTYPE_p_sp_randmt);
  }
  
  result = (uint32_t *)(uint32_t *) ((arg1)->mt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint32_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_randmt(lua_State* L) {
  int SWIG_arg = 0;
  sp_randmt *result = 0 ;
  
  SWIG_check_num_args("sp_randmt::sp_randmt",0,0)
  result = (sp_randmt *)new sp_randmt();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_randmt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_randmt(void *obj) {
sp_randmt *arg1 = (sp_randmt *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_randmt(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_randmt);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_randmt_attributes[] = {
    { "mti", _wrap_sp_randmt_mti_get, _wrap_sp_randmt_mti_set },
    { "mt", _wrap_sp_randmt_mt_get, _wrap_sp_randmt_mt_set },
    {0,0,0}
};
static swig_lua_method swig_sp_randmt_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_randmt_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_randmt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_randmt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_randmt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_randmt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_randmt_Sf_SwigStatic = {
    "sp_randmt",
    swig_sp_randmt_Sf_SwigStatic_methods,
    swig_sp_randmt_Sf_SwigStatic_attributes,
    swig_sp_randmt_Sf_SwigStatic_constants,
    swig_sp_randmt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_randmt_bases[] = {0};
static const char *swig_sp_randmt_base_names[] = {0};
static swig_lua_class _wrap_class_sp_randmt = { "sp_randmt", "sp_randmt", &SWIGTYPE_p_sp_randmt,_proxy__wrap_new_sp_randmt, swig_delete_sp_randmt, swig_sp_randmt_methods, swig_sp_randmt_attributes, &swig_sp_randmt_Sf_SwigStatic, swig_sp_randmt_meta, swig_sp_randmt_bases, swig_sp_randmt_base_names };

static int _wrap_sp_randmt_seed(lua_State* L) {
  int SWIG_arg = 0;
  sp_randmt *arg1 = (sp_randmt *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  
  SWIG_check_num_args("sp_randmt_seed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randmt_seed",1,"sp_randmt *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_randmt_seed",2,"uint32_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("sp_randmt_seed",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randmt,0))){
    SWIG_fail_ptr("sp_randmt_seed",1,SWIGTYPE_p_sp_randmt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_randmt_seed",2,SWIGTYPE_p_uint32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_randmt_seed",3,SWIGTYPE_p_uint32_t);
  }
  arg3 = *argp3;
  
  sp_randmt_seed(arg1,(uint32_t const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_randmt_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_randmt *arg1 = (sp_randmt *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_randmt_compute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_randmt_compute",1,"sp_randmt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_randmt,0))){
    SWIG_fail_ptr("sp_randmt_compute",1,SWIGTYPE_p_sp_randmt);
  }
  
  result = sp_randmt_compute(arg1);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_random_min_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_random *arg1 = (sp_random *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_random::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_random::min",1,"sp_random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_random::min",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_random,0))){
    SWIG_fail_ptr("sp_random_min_set",1,SWIGTYPE_p_sp_random);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->min = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_random_min_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_random *arg1 = (sp_random *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_random::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_random::min",1,"sp_random *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_random,0))){
    SWIG_fail_ptr("sp_random_min_get",1,SWIGTYPE_p_sp_random);
  }
  
  result = (float) ((arg1)->min);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_random_max_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_random *arg1 = (sp_random *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_random::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_random::max",1,"sp_random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_random::max",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_random,0))){
    SWIG_fail_ptr("sp_random_max_set",1,SWIGTYPE_p_sp_random);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_random_max_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_random *arg1 = (sp_random *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_random::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_random::max",1,"sp_random *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_random,0))){
    SWIG_fail_ptr("sp_random_max_get",1,SWIGTYPE_p_sp_random);
  }
  
  result = (float) ((arg1)->max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_random(lua_State* L) {
  int SWIG_arg = 0;
  sp_random *result = 0 ;
  
  SWIG_check_num_args("sp_random::sp_random",0,0)
  result = (sp_random *)new sp_random();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_random,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_random(void *obj) {
sp_random *arg1 = (sp_random *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_random(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_random);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_random_attributes[] = {
    { "min", _wrap_sp_random_min_get, _wrap_sp_random_min_set },
    { "max", _wrap_sp_random_max_get, _wrap_sp_random_max_set },
    {0,0,0}
};
static swig_lua_method swig_sp_random_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_random_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_random_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_random_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_random_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_random_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_random_Sf_SwigStatic = {
    "sp_random",
    swig_sp_random_Sf_SwigStatic_methods,
    swig_sp_random_Sf_SwigStatic_attributes,
    swig_sp_random_Sf_SwigStatic_constants,
    swig_sp_random_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_random_bases[] = {0};
static const char *swig_sp_random_base_names[] = {0};
static swig_lua_class _wrap_class_sp_random = { "sp_random", "sp_random", &SWIGTYPE_p_sp_random,_proxy__wrap_new_sp_random, swig_delete_sp_random, swig_sp_random_methods, swig_sp_random_attributes, &swig_sp_random_Sf_SwigStatic, swig_sp_random_meta, swig_sp_random_bases, swig_sp_random_base_names };

static int _wrap_sp_random_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_random **arg1 = (sp_random **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_random_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_random_create",1,"sp_random **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_random,0))){
    SWIG_fail_ptr("sp_random_create",1,SWIGTYPE_p_p_sp_random);
  }
  
  result = (int)sp_random_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_random_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_random **arg1 = (sp_random **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_random_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_random_destroy",1,"sp_random **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_random,0))){
    SWIG_fail_ptr("sp_random_destroy",1,SWIGTYPE_p_p_sp_random);
  }
  
  result = (int)sp_random_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_random_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_random *arg2 = (sp_random *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_random_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_random_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_random_init",2,"sp_random *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_random_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_random,0))){
    SWIG_fail_ptr("sp_random_init",2,SWIGTYPE_p_sp_random);
  }
  
  result = (int)sp_random_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_random_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_random *arg2 = (sp_random *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_random_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_random_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_random_compute",2,"sp_random *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_random_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_random_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_random_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_random,0))){
    SWIG_fail_ptr("sp_random_compute",2,SWIGTYPE_p_sp_random);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_random_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_random_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_random_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reverse_delay_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reverse *arg1 = (sp_reverse *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_reverse::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reverse::delay",1,"sp_reverse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_reverse::delay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reverse,0))){
    SWIG_fail_ptr("sp_reverse_delay_set",1,SWIGTYPE_p_sp_reverse);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->delay = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reverse_delay_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reverse *arg1 = (sp_reverse *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_reverse::delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reverse::delay",1,"sp_reverse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reverse,0))){
    SWIG_fail_ptr("sp_reverse_delay_get",1,SWIGTYPE_p_sp_reverse);
  }
  
  result = (float) ((arg1)->delay);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reverse_bufpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reverse *arg1 = (sp_reverse *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_reverse::bufpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reverse::bufpos",1,"sp_reverse *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_reverse::bufpos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reverse,0))){
    SWIG_fail_ptr("sp_reverse_bufpos_set",1,SWIGTYPE_p_sp_reverse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_reverse_bufpos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bufpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reverse_bufpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reverse *arg1 = (sp_reverse *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_reverse::bufpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reverse::bufpos",1,"sp_reverse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reverse,0))){
    SWIG_fail_ptr("sp_reverse_bufpos_get",1,SWIGTYPE_p_sp_reverse);
  }
  
  result =  ((arg1)->bufpos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reverse_bufsize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reverse *arg1 = (sp_reverse *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_reverse::bufsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reverse::bufsize",1,"sp_reverse *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_reverse::bufsize",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reverse,0))){
    SWIG_fail_ptr("sp_reverse_bufsize_set",1,SWIGTYPE_p_sp_reverse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_reverse_bufsize_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bufsize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reverse_bufsize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reverse *arg1 = (sp_reverse *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_reverse::bufsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reverse::bufsize",1,"sp_reverse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reverse,0))){
    SWIG_fail_ptr("sp_reverse_bufsize_get",1,SWIGTYPE_p_sp_reverse);
  }
  
  result =  ((arg1)->bufsize);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reverse_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reverse *arg1 = (sp_reverse *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_reverse::buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reverse::buf",1,"sp_reverse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_reverse::buf",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reverse,0))){
    SWIG_fail_ptr("sp_reverse_buf_set",1,SWIGTYPE_p_sp_reverse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_reverse_buf_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->buf = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reverse_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reverse *arg1 = (sp_reverse *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_reverse::buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reverse::buf",1,"sp_reverse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reverse,0))){
    SWIG_fail_ptr("sp_reverse_buf_get",1,SWIGTYPE_p_sp_reverse);
  }
  
  result = (sp_auxdata *)& ((arg1)->buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_reverse(lua_State* L) {
  int SWIG_arg = 0;
  sp_reverse *result = 0 ;
  
  SWIG_check_num_args("sp_reverse::sp_reverse",0,0)
  result = (sp_reverse *)new sp_reverse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_reverse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_reverse(void *obj) {
sp_reverse *arg1 = (sp_reverse *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_reverse(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_reverse);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_reverse_attributes[] = {
    { "delay", _wrap_sp_reverse_delay_get, _wrap_sp_reverse_delay_set },
    { "bufpos", _wrap_sp_reverse_bufpos_get, _wrap_sp_reverse_bufpos_set },
    { "bufsize", _wrap_sp_reverse_bufsize_get, _wrap_sp_reverse_bufsize_set },
    { "buf", _wrap_sp_reverse_buf_get, _wrap_sp_reverse_buf_set },
    {0,0,0}
};
static swig_lua_method swig_sp_reverse_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_reverse_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_reverse_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_reverse_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_reverse_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_reverse_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_reverse_Sf_SwigStatic = {
    "sp_reverse",
    swig_sp_reverse_Sf_SwigStatic_methods,
    swig_sp_reverse_Sf_SwigStatic_attributes,
    swig_sp_reverse_Sf_SwigStatic_constants,
    swig_sp_reverse_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_reverse_bases[] = {0};
static const char *swig_sp_reverse_base_names[] = {0};
static swig_lua_class _wrap_class_sp_reverse = { "sp_reverse", "sp_reverse", &SWIGTYPE_p_sp_reverse,_proxy__wrap_new_sp_reverse, swig_delete_sp_reverse, swig_sp_reverse_methods, swig_sp_reverse_attributes, &swig_sp_reverse_Sf_SwigStatic, swig_sp_reverse_meta, swig_sp_reverse_bases, swig_sp_reverse_base_names };

static int _wrap_sp_reverse_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_reverse **arg1 = (sp_reverse **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_reverse_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reverse_create",1,"sp_reverse **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_reverse,0))){
    SWIG_fail_ptr("sp_reverse_create",1,SWIGTYPE_p_p_sp_reverse);
  }
  
  result = (int)sp_reverse_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reverse_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_reverse **arg1 = (sp_reverse **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_reverse_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reverse_destroy",1,"sp_reverse **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_reverse,0))){
    SWIG_fail_ptr("sp_reverse_destroy",1,SWIGTYPE_p_p_sp_reverse);
  }
  
  result = (int)sp_reverse_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reverse_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_reverse *arg2 = (sp_reverse *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("sp_reverse_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reverse_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_reverse_init",2,"sp_reverse *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_reverse_init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_reverse_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_reverse,0))){
    SWIG_fail_ptr("sp_reverse_init",2,SWIGTYPE_p_sp_reverse);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)sp_reverse_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reverse_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_reverse *arg2 = (sp_reverse *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_reverse_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reverse_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_reverse_compute",2,"sp_reverse *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_reverse_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_reverse_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_reverse_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_reverse,0))){
    SWIG_fail_ptr("sp_reverse_compute",2,SWIGTYPE_p_sp_reverse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_reverse_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_reverse_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_reverse_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_reson::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::freq",1,"sp_reson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_reson::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_freq_set",1,SWIGTYPE_p_sp_reson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_reson::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::freq",1,"sp_reson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_freq_get",1,SWIGTYPE_p_sp_reson);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_reson::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::bw",1,"sp_reson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_reson::bw",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_bw_set",1,SWIGTYPE_p_sp_reson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_reson::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::bw",1,"sp_reson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_bw_get",1,SWIGTYPE_p_sp_reson);
  }
  
  result = (float) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_scale_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_reson::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::scale",1,"sp_reson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_reson::scale",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_scale_set",1,SWIGTYPE_p_sp_reson);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->scale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_scale_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_reson::scale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::scale",1,"sp_reson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_scale_get",1,SWIGTYPE_p_sp_reson);
  }
  
  result = (int) ((arg1)->scale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_c1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_reson::c1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::c1",1,"sp_reson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_reson::c1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_c1_set",1,SWIGTYPE_p_sp_reson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_c1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_reson::c1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::c1",1,"sp_reson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_c1_get",1,SWIGTYPE_p_sp_reson);
  }
  
  result = (float) ((arg1)->c1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_c2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_reson::c2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::c2",1,"sp_reson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_reson::c2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_c2_set",1,SWIGTYPE_p_sp_reson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_c2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_reson::c2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::c2",1,"sp_reson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_c2_get",1,SWIGTYPE_p_sp_reson);
  }
  
  result = (float) ((arg1)->c2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_c3_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_reson::c3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::c3",1,"sp_reson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_reson::c3",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_c3_set",1,SWIGTYPE_p_sp_reson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_c3_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_reson::c3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::c3",1,"sp_reson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_c3_get",1,SWIGTYPE_p_sp_reson);
  }
  
  result = (float) ((arg1)->c3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_yt1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_reson::yt1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::yt1",1,"sp_reson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_reson::yt1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_yt1_set",1,SWIGTYPE_p_sp_reson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->yt1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_yt1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_reson::yt1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::yt1",1,"sp_reson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_yt1_get",1,SWIGTYPE_p_sp_reson);
  }
  
  result = (float) ((arg1)->yt1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_yt2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_reson::yt2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::yt2",1,"sp_reson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_reson::yt2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_yt2_set",1,SWIGTYPE_p_sp_reson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->yt2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_yt2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_reson::yt2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::yt2",1,"sp_reson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_yt2_get",1,SWIGTYPE_p_sp_reson);
  }
  
  result = (float) ((arg1)->yt2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_cosf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_reson::cosf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::cosf",1,"sp_reson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_reson::cosf",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_cosf_set",1,SWIGTYPE_p_sp_reson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->cosf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_cosf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_reson::cosf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::cosf",1,"sp_reson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_cosf_get",1,SWIGTYPE_p_sp_reson);
  }
  
  result = (float) ((arg1)->cosf);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_prvfreq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_reson::prvfreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::prvfreq",1,"sp_reson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_reson::prvfreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_prvfreq_set",1,SWIGTYPE_p_sp_reson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prvfreq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_prvfreq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_reson::prvfreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::prvfreq",1,"sp_reson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_prvfreq_get",1,SWIGTYPE_p_sp_reson);
  }
  
  result = (float) ((arg1)->prvfreq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_prvbw_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_reson::prvbw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::prvbw",1,"sp_reson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_reson::prvbw",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_prvbw_set",1,SWIGTYPE_p_sp_reson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prvbw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_prvbw_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_reson::prvbw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::prvbw",1,"sp_reson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_prvbw_get",1,SWIGTYPE_p_sp_reson);
  }
  
  result = (float) ((arg1)->prvbw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_tpidsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_reson::tpidsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::tpidsr",1,"sp_reson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_reson::tpidsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_tpidsr_set",1,SWIGTYPE_p_sp_reson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tpidsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_tpidsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *arg1 = (sp_reson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_reson::tpidsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson::tpidsr",1,"sp_reson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_tpidsr_get",1,SWIGTYPE_p_sp_reson);
  }
  
  result = (float) ((arg1)->tpidsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_reson(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson *result = 0 ;
  
  SWIG_check_num_args("sp_reson::sp_reson",0,0)
  result = (sp_reson *)new sp_reson();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_reson,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_reson(void *obj) {
sp_reson *arg1 = (sp_reson *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_reson(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_reson);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_reson_attributes[] = {
    { "freq", _wrap_sp_reson_freq_get, _wrap_sp_reson_freq_set },
    { "bw", _wrap_sp_reson_bw_get, _wrap_sp_reson_bw_set },
    { "scale", _wrap_sp_reson_scale_get, _wrap_sp_reson_scale_set },
    { "c1", _wrap_sp_reson_c1_get, _wrap_sp_reson_c1_set },
    { "c2", _wrap_sp_reson_c2_get, _wrap_sp_reson_c2_set },
    { "c3", _wrap_sp_reson_c3_get, _wrap_sp_reson_c3_set },
    { "yt1", _wrap_sp_reson_yt1_get, _wrap_sp_reson_yt1_set },
    { "yt2", _wrap_sp_reson_yt2_get, _wrap_sp_reson_yt2_set },
    { "cosf", _wrap_sp_reson_cosf_get, _wrap_sp_reson_cosf_set },
    { "prvfreq", _wrap_sp_reson_prvfreq_get, _wrap_sp_reson_prvfreq_set },
    { "prvbw", _wrap_sp_reson_prvbw_get, _wrap_sp_reson_prvbw_set },
    { "tpidsr", _wrap_sp_reson_tpidsr_get, _wrap_sp_reson_tpidsr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_reson_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_reson_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_reson_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_reson_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_reson_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_reson_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_reson_Sf_SwigStatic = {
    "sp_reson",
    swig_sp_reson_Sf_SwigStatic_methods,
    swig_sp_reson_Sf_SwigStatic_attributes,
    swig_sp_reson_Sf_SwigStatic_constants,
    swig_sp_reson_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_reson_bases[] = {0};
static const char *swig_sp_reson_base_names[] = {0};
static swig_lua_class _wrap_class_sp_reson = { "sp_reson", "sp_reson", &SWIGTYPE_p_sp_reson,_proxy__wrap_new_sp_reson, swig_delete_sp_reson, swig_sp_reson_methods, swig_sp_reson_attributes, &swig_sp_reson_Sf_SwigStatic, swig_sp_reson_meta, swig_sp_reson_bases, swig_sp_reson_base_names };

static int _wrap_sp_reson_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson **arg1 = (sp_reson **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_reson_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson_create",1,"sp_reson **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_create",1,SWIGTYPE_p_p_sp_reson);
  }
  
  result = (int)sp_reson_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_reson **arg1 = (sp_reson **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_reson_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson_destroy",1,"sp_reson **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_destroy",1,SWIGTYPE_p_p_sp_reson);
  }
  
  result = (int)sp_reson_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_reson *arg2 = (sp_reson *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_reson_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_reson_init",2,"sp_reson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_reson_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_init",2,SWIGTYPE_p_sp_reson);
  }
  
  result = (int)sp_reson_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_reson_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_reson *arg2 = (sp_reson *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_reson_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_reson_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_reson_compute",2,"sp_reson *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_reson_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_reson_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_reson_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_reson,0))){
    SWIG_fail_ptr("sp_reson_compute",2,SWIGTYPE_p_sp_reson);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_reson_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_reson_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_reson_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_writePos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_revsc_dl::writePos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::writePos",1,"sp_revsc_dl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc_dl::writePos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_writePos_set",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->writePos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_writePos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_revsc_dl::writePos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::writePos",1,"sp_revsc_dl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_writePos_get",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  result = (int) ((arg1)->writePos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_bufferSize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_revsc_dl::bufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::bufferSize",1,"sp_revsc_dl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc_dl::bufferSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_bufferSize_set",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->bufferSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_bufferSize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_revsc_dl::bufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::bufferSize",1,"sp_revsc_dl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_bufferSize_get",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  result = (int) ((arg1)->bufferSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_readPos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_revsc_dl::readPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::readPos",1,"sp_revsc_dl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc_dl::readPos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_readPos_set",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->readPos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_readPos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_revsc_dl::readPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::readPos",1,"sp_revsc_dl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_readPos_get",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  result = (int) ((arg1)->readPos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_readPosFrac_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_revsc_dl::readPosFrac",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::readPosFrac",1,"sp_revsc_dl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc_dl::readPosFrac",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_readPosFrac_set",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->readPosFrac = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_readPosFrac_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_revsc_dl::readPosFrac",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::readPosFrac",1,"sp_revsc_dl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_readPosFrac_get",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  result = (int) ((arg1)->readPosFrac);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_readPosFrac_inc_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_revsc_dl::readPosFrac_inc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::readPosFrac_inc",1,"sp_revsc_dl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc_dl::readPosFrac_inc",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_readPosFrac_inc_set",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->readPosFrac_inc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_readPosFrac_inc_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_revsc_dl::readPosFrac_inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::readPosFrac_inc",1,"sp_revsc_dl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_readPosFrac_inc_get",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  result = (int) ((arg1)->readPosFrac_inc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_dummy_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_revsc_dl::dummy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::dummy",1,"sp_revsc_dl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc_dl::dummy",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_dummy_set",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->dummy = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_dummy_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_revsc_dl::dummy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::dummy",1,"sp_revsc_dl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_dummy_get",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  result = (int) ((arg1)->dummy);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_seedVal_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_revsc_dl::seedVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::seedVal",1,"sp_revsc_dl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc_dl::seedVal",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_seedVal_set",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->seedVal = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_seedVal_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_revsc_dl::seedVal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::seedVal",1,"sp_revsc_dl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_seedVal_get",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  result = (int) ((arg1)->seedVal);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_randLine_cnt_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_revsc_dl::randLine_cnt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::randLine_cnt",1,"sp_revsc_dl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc_dl::randLine_cnt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_randLine_cnt_set",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->randLine_cnt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_randLine_cnt_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_revsc_dl::randLine_cnt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::randLine_cnt",1,"sp_revsc_dl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_randLine_cnt_get",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  result = (int) ((arg1)->randLine_cnt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_filterState_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_revsc_dl::filterState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::filterState",1,"sp_revsc_dl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc_dl::filterState",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_filterState_set",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterState = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_filterState_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_revsc_dl::filterState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::filterState",1,"sp_revsc_dl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_filterState_get",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  result = (float) ((arg1)->filterState);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_revsc_dl::buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::buf",1,"sp_revsc_dl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_revsc_dl::buf",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_buf_set",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_revsc_dl_buf_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->buf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dl_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *arg1 = (sp_revsc_dl *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_revsc_dl::buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_dl::buf",1,"sp_revsc_dl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_dl_buf_get",1,SWIGTYPE_p_sp_revsc_dl);
  }
  
  result = (float *) ((arg1)->buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_revsc_dl(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc_dl *result = 0 ;
  
  SWIG_check_num_args("sp_revsc_dl::sp_revsc_dl",0,0)
  result = (sp_revsc_dl *)new sp_revsc_dl();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_revsc_dl,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_revsc_dl(void *obj) {
sp_revsc_dl *arg1 = (sp_revsc_dl *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_revsc_dl(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_revsc_dl);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_revsc_dl_attributes[] = {
    { "writePos", _wrap_sp_revsc_dl_writePos_get, _wrap_sp_revsc_dl_writePos_set },
    { "bufferSize", _wrap_sp_revsc_dl_bufferSize_get, _wrap_sp_revsc_dl_bufferSize_set },
    { "readPos", _wrap_sp_revsc_dl_readPos_get, _wrap_sp_revsc_dl_readPos_set },
    { "readPosFrac", _wrap_sp_revsc_dl_readPosFrac_get, _wrap_sp_revsc_dl_readPosFrac_set },
    { "readPosFrac_inc", _wrap_sp_revsc_dl_readPosFrac_inc_get, _wrap_sp_revsc_dl_readPosFrac_inc_set },
    { "dummy", _wrap_sp_revsc_dl_dummy_get, _wrap_sp_revsc_dl_dummy_set },
    { "seedVal", _wrap_sp_revsc_dl_seedVal_get, _wrap_sp_revsc_dl_seedVal_set },
    { "randLine_cnt", _wrap_sp_revsc_dl_randLine_cnt_get, _wrap_sp_revsc_dl_randLine_cnt_set },
    { "filterState", _wrap_sp_revsc_dl_filterState_get, _wrap_sp_revsc_dl_filterState_set },
    { "buf", _wrap_sp_revsc_dl_buf_get, _wrap_sp_revsc_dl_buf_set },
    {0,0,0}
};
static swig_lua_method swig_sp_revsc_dl_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_revsc_dl_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_revsc_dl_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_revsc_dl_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_revsc_dl_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_revsc_dl_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_revsc_dl_Sf_SwigStatic = {
    "sp_revsc_dl",
    swig_sp_revsc_dl_Sf_SwigStatic_methods,
    swig_sp_revsc_dl_Sf_SwigStatic_attributes,
    swig_sp_revsc_dl_Sf_SwigStatic_constants,
    swig_sp_revsc_dl_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_revsc_dl_bases[] = {0};
static const char *swig_sp_revsc_dl_base_names[] = {0};
static swig_lua_class _wrap_class_sp_revsc_dl = { "sp_revsc_dl", "sp_revsc_dl", &SWIGTYPE_p_sp_revsc_dl,_proxy__wrap_new_sp_revsc_dl, swig_delete_sp_revsc_dl, swig_sp_revsc_dl_methods, swig_sp_revsc_dl_attributes, &swig_sp_revsc_dl_Sf_SwigStatic, swig_sp_revsc_dl_meta, swig_sp_revsc_dl_bases, swig_sp_revsc_dl_base_names };

static int _wrap_sp_revsc_feedback_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_revsc::feedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::feedback",1,"sp_revsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc::feedback",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_feedback_set",1,SWIGTYPE_p_sp_revsc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->feedback = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_feedback_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_revsc::feedback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::feedback",1,"sp_revsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_feedback_get",1,SWIGTYPE_p_sp_revsc);
  }
  
  result = (float) ((arg1)->feedback);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_lpfreq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_revsc::lpfreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::lpfreq",1,"sp_revsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc::lpfreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_lpfreq_set",1,SWIGTYPE_p_sp_revsc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lpfreq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_lpfreq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_revsc::lpfreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::lpfreq",1,"sp_revsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_lpfreq_get",1,SWIGTYPE_p_sp_revsc);
  }
  
  result = (float) ((arg1)->lpfreq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_iSampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_revsc::iSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::iSampleRate",1,"sp_revsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc::iSampleRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_iSampleRate_set",1,SWIGTYPE_p_sp_revsc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iSampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_iSampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_revsc::iSampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::iSampleRate",1,"sp_revsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_iSampleRate_get",1,SWIGTYPE_p_sp_revsc);
  }
  
  result = (float) ((arg1)->iSampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_iPitchMod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_revsc::iPitchMod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::iPitchMod",1,"sp_revsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc::iPitchMod",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_iPitchMod_set",1,SWIGTYPE_p_sp_revsc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iPitchMod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_iPitchMod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_revsc::iPitchMod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::iPitchMod",1,"sp_revsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_iPitchMod_get",1,SWIGTYPE_p_sp_revsc);
  }
  
  result = (float) ((arg1)->iPitchMod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_iSkipInit_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_revsc::iSkipInit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::iSkipInit",1,"sp_revsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc::iSkipInit",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_iSkipInit_set",1,SWIGTYPE_p_sp_revsc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iSkipInit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_iSkipInit_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_revsc::iSkipInit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::iSkipInit",1,"sp_revsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_iSkipInit_get",1,SWIGTYPE_p_sp_revsc);
  }
  
  result = (float) ((arg1)->iSkipInit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_revsc::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::sampleRate",1,"sp_revsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc::sampleRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_sampleRate_set",1,SWIGTYPE_p_sp_revsc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_revsc::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::sampleRate",1,"sp_revsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_sampleRate_get",1,SWIGTYPE_p_sp_revsc);
  }
  
  result = (float) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dampFact_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_revsc::dampFact",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::dampFact",1,"sp_revsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc::dampFact",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_dampFact_set",1,SWIGTYPE_p_sp_revsc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dampFact = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_dampFact_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_revsc::dampFact",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::dampFact",1,"sp_revsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_dampFact_get",1,SWIGTYPE_p_sp_revsc);
  }
  
  result = (float) ((arg1)->dampFact);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_prv_LPFreq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_revsc::prv_LPFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::prv_LPFreq",1,"sp_revsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc::prv_LPFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_prv_LPFreq_set",1,SWIGTYPE_p_sp_revsc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prv_LPFreq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_prv_LPFreq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_revsc::prv_LPFreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::prv_LPFreq",1,"sp_revsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_prv_LPFreq_get",1,SWIGTYPE_p_sp_revsc);
  }
  
  result = (float) ((arg1)->prv_LPFreq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_initDone_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_revsc::initDone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::initDone",1,"sp_revsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_revsc::initDone",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_initDone_set",1,SWIGTYPE_p_sp_revsc);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->initDone = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_initDone_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_revsc::initDone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::initDone",1,"sp_revsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_initDone_get",1,SWIGTYPE_p_sp_revsc);
  }
  
  result = (int) ((arg1)->initDone);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_delayLines_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  sp_revsc_dl *arg2 ;
  
  SWIG_check_num_args("sp_revsc::delayLines",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::delayLines",1,"sp_revsc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_revsc::delayLines",2,"sp_revsc_dl [8]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_delayLines_set",1,SWIGTYPE_p_sp_revsc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_revsc_dl,0))){
    SWIG_fail_ptr("sp_revsc_delayLines_set",2,SWIGTYPE_p_sp_revsc_dl);
  }
  
  {
    size_t ii;
    sp_revsc_dl *b = (sp_revsc_dl *) arg1->delayLines;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((sp_revsc_dl *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_delayLines_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  sp_revsc_dl *result = 0 ;
  
  SWIG_check_num_args("sp_revsc::delayLines",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::delayLines",1,"sp_revsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_delayLines_get",1,SWIGTYPE_p_sp_revsc);
  }
  
  result = (sp_revsc_dl *)(sp_revsc_dl *) ((arg1)->delayLines);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_revsc_dl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_aux_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_revsc::aux",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::aux",1,"sp_revsc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_revsc::aux",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_aux_set",1,SWIGTYPE_p_sp_revsc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_revsc_aux_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->aux = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_aux_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *arg1 = (sp_revsc *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_revsc::aux",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc::aux",1,"sp_revsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_aux_get",1,SWIGTYPE_p_sp_revsc);
  }
  
  result = (sp_auxdata *)& ((arg1)->aux);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_revsc(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc *result = 0 ;
  
  SWIG_check_num_args("sp_revsc::sp_revsc",0,0)
  result = (sp_revsc *)new sp_revsc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_revsc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_revsc(void *obj) {
sp_revsc *arg1 = (sp_revsc *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_revsc(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_revsc);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_revsc_attributes[] = {
    { "feedback", _wrap_sp_revsc_feedback_get, _wrap_sp_revsc_feedback_set },
    { "lpfreq", _wrap_sp_revsc_lpfreq_get, _wrap_sp_revsc_lpfreq_set },
    { "iSampleRate", _wrap_sp_revsc_iSampleRate_get, _wrap_sp_revsc_iSampleRate_set },
    { "iPitchMod", _wrap_sp_revsc_iPitchMod_get, _wrap_sp_revsc_iPitchMod_set },
    { "iSkipInit", _wrap_sp_revsc_iSkipInit_get, _wrap_sp_revsc_iSkipInit_set },
    { "sampleRate", _wrap_sp_revsc_sampleRate_get, _wrap_sp_revsc_sampleRate_set },
    { "dampFact", _wrap_sp_revsc_dampFact_get, _wrap_sp_revsc_dampFact_set },
    { "prv_LPFreq", _wrap_sp_revsc_prv_LPFreq_get, _wrap_sp_revsc_prv_LPFreq_set },
    { "initDone", _wrap_sp_revsc_initDone_get, _wrap_sp_revsc_initDone_set },
    { "delayLines", _wrap_sp_revsc_delayLines_get, _wrap_sp_revsc_delayLines_set },
    { "aux", _wrap_sp_revsc_aux_get, _wrap_sp_revsc_aux_set },
    {0,0,0}
};
static swig_lua_method swig_sp_revsc_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_revsc_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_revsc_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_revsc_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_revsc_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_revsc_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_revsc_Sf_SwigStatic = {
    "sp_revsc",
    swig_sp_revsc_Sf_SwigStatic_methods,
    swig_sp_revsc_Sf_SwigStatic_attributes,
    swig_sp_revsc_Sf_SwigStatic_constants,
    swig_sp_revsc_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_revsc_bases[] = {0};
static const char *swig_sp_revsc_base_names[] = {0};
static swig_lua_class _wrap_class_sp_revsc = { "sp_revsc", "sp_revsc", &SWIGTYPE_p_sp_revsc,_proxy__wrap_new_sp_revsc, swig_delete_sp_revsc, swig_sp_revsc_methods, swig_sp_revsc_attributes, &swig_sp_revsc_Sf_SwigStatic, swig_sp_revsc_meta, swig_sp_revsc_bases, swig_sp_revsc_base_names };

static int _wrap_sp_revsc_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc **arg1 = (sp_revsc **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_revsc_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_create",1,"sp_revsc **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_create",1,SWIGTYPE_p_p_sp_revsc);
  }
  
  result = (int)sp_revsc_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_revsc **arg1 = (sp_revsc **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_revsc_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_destroy",1,"sp_revsc **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_destroy",1,SWIGTYPE_p_p_sp_revsc);
  }
  
  result = (int)sp_revsc_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_revsc *arg2 = (sp_revsc *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_revsc_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_revsc_init",2,"sp_revsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_revsc_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_init",2,SWIGTYPE_p_sp_revsc);
  }
  
  result = (int)sp_revsc_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_revsc_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_revsc *arg2 = (sp_revsc *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_revsc_compute",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_revsc_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_revsc_compute",2,"sp_revsc *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_revsc_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_revsc_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_revsc_compute",5,"float *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("sp_revsc_compute",6,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_revsc_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_revsc,0))){
    SWIG_fail_ptr("sp_revsc_compute",2,SWIGTYPE_p_sp_revsc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_revsc_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_revsc_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_revsc_compute",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_revsc_compute",6,SWIGTYPE_p_float);
  }
  
  result = (int)sp_revsc_compute(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rms_ihp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rms *arg1 = (sp_rms *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rms::ihp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rms::ihp",1,"sp_rms *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rms::ihp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rms,0))){
    SWIG_fail_ptr("sp_rms_ihp_set",1,SWIGTYPE_p_sp_rms);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ihp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rms_ihp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rms *arg1 = (sp_rms *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rms::ihp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rms::ihp",1,"sp_rms *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rms,0))){
    SWIG_fail_ptr("sp_rms_ihp_get",1,SWIGTYPE_p_sp_rms);
  }
  
  result = (float) ((arg1)->ihp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rms_istor_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rms *arg1 = (sp_rms *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rms::istor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rms::istor",1,"sp_rms *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rms::istor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rms,0))){
    SWIG_fail_ptr("sp_rms_istor_set",1,SWIGTYPE_p_sp_rms);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->istor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rms_istor_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rms *arg1 = (sp_rms *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rms::istor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rms::istor",1,"sp_rms *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rms,0))){
    SWIG_fail_ptr("sp_rms_istor_get",1,SWIGTYPE_p_sp_rms);
  }
  
  result = (float) ((arg1)->istor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rms_c1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rms *arg1 = (sp_rms *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rms::c1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rms::c1",1,"sp_rms *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rms::c1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rms,0))){
    SWIG_fail_ptr("sp_rms_c1_set",1,SWIGTYPE_p_sp_rms);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rms_c1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rms *arg1 = (sp_rms *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rms::c1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rms::c1",1,"sp_rms *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rms,0))){
    SWIG_fail_ptr("sp_rms_c1_get",1,SWIGTYPE_p_sp_rms);
  }
  
  result = (float) ((arg1)->c1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rms_c2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rms *arg1 = (sp_rms *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rms::c2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rms::c2",1,"sp_rms *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rms::c2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rms,0))){
    SWIG_fail_ptr("sp_rms_c2_set",1,SWIGTYPE_p_sp_rms);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rms_c2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rms *arg1 = (sp_rms *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rms::c2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rms::c2",1,"sp_rms *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rms,0))){
    SWIG_fail_ptr("sp_rms_c2_get",1,SWIGTYPE_p_sp_rms);
  }
  
  result = (float) ((arg1)->c2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rms_prvq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rms *arg1 = (sp_rms *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rms::prvq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rms::prvq",1,"sp_rms *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rms::prvq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rms,0))){
    SWIG_fail_ptr("sp_rms_prvq_set",1,SWIGTYPE_p_sp_rms);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prvq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rms_prvq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rms *arg1 = (sp_rms *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rms::prvq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rms::prvq",1,"sp_rms *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rms,0))){
    SWIG_fail_ptr("sp_rms_prvq_get",1,SWIGTYPE_p_sp_rms);
  }
  
  result = (float) ((arg1)->prvq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_rms(lua_State* L) {
  int SWIG_arg = 0;
  sp_rms *result = 0 ;
  
  SWIG_check_num_args("sp_rms::sp_rms",0,0)
  result = (sp_rms *)new sp_rms();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_rms,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_rms(void *obj) {
sp_rms *arg1 = (sp_rms *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_rms(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_rms);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_rms_attributes[] = {
    { "ihp", _wrap_sp_rms_ihp_get, _wrap_sp_rms_ihp_set },
    { "istor", _wrap_sp_rms_istor_get, _wrap_sp_rms_istor_set },
    { "c1", _wrap_sp_rms_c1_get, _wrap_sp_rms_c1_set },
    { "c2", _wrap_sp_rms_c2_get, _wrap_sp_rms_c2_set },
    { "prvq", _wrap_sp_rms_prvq_get, _wrap_sp_rms_prvq_set },
    {0,0,0}
};
static swig_lua_method swig_sp_rms_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_rms_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_rms_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_rms_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_rms_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_rms_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_rms_Sf_SwigStatic = {
    "sp_rms",
    swig_sp_rms_Sf_SwigStatic_methods,
    swig_sp_rms_Sf_SwigStatic_attributes,
    swig_sp_rms_Sf_SwigStatic_constants,
    swig_sp_rms_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_rms_bases[] = {0};
static const char *swig_sp_rms_base_names[] = {0};
static swig_lua_class _wrap_class_sp_rms = { "sp_rms", "sp_rms", &SWIGTYPE_p_sp_rms,_proxy__wrap_new_sp_rms, swig_delete_sp_rms, swig_sp_rms_methods, swig_sp_rms_attributes, &swig_sp_rms_Sf_SwigStatic, swig_sp_rms_meta, swig_sp_rms_bases, swig_sp_rms_base_names };

static int _wrap_sp_rms_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_rms **arg1 = (sp_rms **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rms_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rms_create",1,"sp_rms **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_rms,0))){
    SWIG_fail_ptr("sp_rms_create",1,SWIGTYPE_p_p_sp_rms);
  }
  
  result = (int)sp_rms_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rms_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_rms **arg1 = (sp_rms **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rms_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rms_destroy",1,"sp_rms **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_rms,0))){
    SWIG_fail_ptr("sp_rms_destroy",1,SWIGTYPE_p_p_sp_rms);
  }
  
  result = (int)sp_rms_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rms_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_rms *arg2 = (sp_rms *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rms_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rms_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_rms_init",2,"sp_rms *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_rms_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_rms,0))){
    SWIG_fail_ptr("sp_rms_init",2,SWIGTYPE_p_sp_rms);
  }
  
  result = (int)sp_rms_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rms_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_rms *arg2 = (sp_rms *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rms_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rms_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_rms_compute",2,"sp_rms *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_rms_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_rms_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_rms_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_rms,0))){
    SWIG_fail_ptr("sp_rms_compute",2,SWIGTYPE_p_sp_rms);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_rms_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_rms_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_rms_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_playpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_rpt::playpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::playpos",1,"sp_rpt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_rpt::playpos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_playpos_set",1,SWIGTYPE_p_sp_rpt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_rpt_playpos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->playpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_playpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_rpt::playpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::playpos",1,"sp_rpt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_playpos_get",1,SWIGTYPE_p_sp_rpt);
  }
  
  result =  ((arg1)->playpos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_bufpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_rpt::bufpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::bufpos",1,"sp_rpt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_rpt::bufpos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_bufpos_set",1,SWIGTYPE_p_sp_rpt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_rpt_bufpos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bufpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_bufpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_rpt::bufpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::bufpos",1,"sp_rpt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_bufpos_get",1,SWIGTYPE_p_sp_rpt);
  }
  
  result =  ((arg1)->bufpos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_running_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_rpt::running",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::running",1,"sp_rpt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rpt::running",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_running_set",1,SWIGTYPE_p_sp_rpt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->running = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_running_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rpt::running",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::running",1,"sp_rpt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_running_get",1,SWIGTYPE_p_sp_rpt);
  }
  
  result = (int) ((arg1)->running);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_count_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_rpt::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::count",1,"sp_rpt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rpt::count",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_count_set",1,SWIGTYPE_p_sp_rpt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->count = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_count_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rpt::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::count",1,"sp_rpt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_count_get",1,SWIGTYPE_p_sp_rpt);
  }
  
  result = (int) ((arg1)->count);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_reps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_rpt::reps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::reps",1,"sp_rpt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rpt::reps",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_reps_set",1,SWIGTYPE_p_sp_rpt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->reps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_reps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rpt::reps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::reps",1,"sp_rpt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_reps_get",1,SWIGTYPE_p_sp_rpt);
  }
  
  result = (int) ((arg1)->reps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rpt::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::sr",1,"sp_rpt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rpt::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_sr_set",1,SWIGTYPE_p_sp_rpt);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rpt::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::sr",1,"sp_rpt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_sr_get",1,SWIGTYPE_p_sp_rpt);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_size_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_rpt::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::size",1,"sp_rpt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_rpt::size",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_size_set",1,SWIGTYPE_p_sp_rpt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_rpt_size_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_size_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_rpt::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::size",1,"sp_rpt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_size_get",1,SWIGTYPE_p_sp_rpt);
  }
  
  result =  ((arg1)->size);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_bpm_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rpt::bpm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::bpm",1,"sp_rpt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rpt::bpm",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_bpm_set",1,SWIGTYPE_p_sp_rpt);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->bpm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_bpm_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rpt::bpm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::bpm",1,"sp_rpt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_bpm_get",1,SWIGTYPE_p_sp_rpt);
  }
  
  result = (float) ((arg1)->bpm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_div_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_rpt::div",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::div",1,"sp_rpt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rpt::div",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_div_set",1,SWIGTYPE_p_sp_rpt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->div = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_div_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rpt::div",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::div",1,"sp_rpt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_div_get",1,SWIGTYPE_p_sp_rpt);
  }
  
  result = (int) ((arg1)->div);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_rep_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_rpt::rep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::rep",1,"sp_rpt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rpt::rep",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_rep_set",1,SWIGTYPE_p_sp_rpt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rep = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_rep_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rpt::rep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::rep",1,"sp_rpt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_rep_get",1,SWIGTYPE_p_sp_rpt);
  }
  
  result = (int) ((arg1)->rep);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_aux_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_rpt::aux",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::aux",1,"sp_rpt *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_rpt::aux",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_aux_set",1,SWIGTYPE_p_sp_rpt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_rpt_aux_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->aux = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_aux_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_rpt::aux",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::aux",1,"sp_rpt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_aux_get",1,SWIGTYPE_p_sp_rpt);
  }
  
  result = (sp_auxdata *)& ((arg1)->aux);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_rc_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_rpt::rc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::rc",1,"sp_rpt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rpt::rc",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_rc_set",1,SWIGTYPE_p_sp_rpt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_rc_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *arg1 = (sp_rpt *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rpt::rc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt::rc",1,"sp_rpt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_rc_get",1,SWIGTYPE_p_sp_rpt);
  }
  
  result = (int) ((arg1)->rc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_rpt(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt *result = 0 ;
  
  SWIG_check_num_args("sp_rpt::sp_rpt",0,0)
  result = (sp_rpt *)new sp_rpt();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_rpt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_rpt(void *obj) {
sp_rpt *arg1 = (sp_rpt *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_rpt(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_rpt);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_rpt_attributes[] = {
    { "playpos", _wrap_sp_rpt_playpos_get, _wrap_sp_rpt_playpos_set },
    { "bufpos", _wrap_sp_rpt_bufpos_get, _wrap_sp_rpt_bufpos_set },
    { "running", _wrap_sp_rpt_running_get, _wrap_sp_rpt_running_set },
    { "count", _wrap_sp_rpt_count_get, _wrap_sp_rpt_count_set },
    { "reps", _wrap_sp_rpt_reps_get, _wrap_sp_rpt_reps_set },
    { "sr", _wrap_sp_rpt_sr_get, _wrap_sp_rpt_sr_set },
    { "size", _wrap_sp_rpt_size_get, _wrap_sp_rpt_size_set },
    { "bpm", _wrap_sp_rpt_bpm_get, _wrap_sp_rpt_bpm_set },
    { "div", _wrap_sp_rpt_div_get, _wrap_sp_rpt_div_set },
    { "rep", _wrap_sp_rpt_rep_get, _wrap_sp_rpt_rep_set },
    { "aux", _wrap_sp_rpt_aux_get, _wrap_sp_rpt_aux_set },
    { "rc", _wrap_sp_rpt_rc_get, _wrap_sp_rpt_rc_set },
    {0,0,0}
};
static swig_lua_method swig_sp_rpt_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_rpt_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_rpt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_rpt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_rpt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_rpt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_rpt_Sf_SwigStatic = {
    "sp_rpt",
    swig_sp_rpt_Sf_SwigStatic_methods,
    swig_sp_rpt_Sf_SwigStatic_attributes,
    swig_sp_rpt_Sf_SwigStatic_constants,
    swig_sp_rpt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_rpt_bases[] = {0};
static const char *swig_sp_rpt_base_names[] = {0};
static swig_lua_class _wrap_class_sp_rpt = { "sp_rpt", "sp_rpt", &SWIGTYPE_p_sp_rpt,_proxy__wrap_new_sp_rpt, swig_delete_sp_rpt, swig_sp_rpt_methods, swig_sp_rpt_attributes, &swig_sp_rpt_Sf_SwigStatic, swig_sp_rpt_meta, swig_sp_rpt_bases, swig_sp_rpt_base_names };

static int _wrap_sp_rpt_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt **arg1 = (sp_rpt **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rpt_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt_create",1,"sp_rpt **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_create",1,SWIGTYPE_p_p_sp_rpt);
  }
  
  result = (int)sp_rpt_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_rpt **arg1 = (sp_rpt **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rpt_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt_destroy",1,"sp_rpt **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_destroy",1,SWIGTYPE_p_p_sp_rpt);
  }
  
  result = (int)sp_rpt_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_rpt *arg2 = (sp_rpt *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("sp_rpt_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_rpt_init",2,"sp_rpt *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_rpt_init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_rpt_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_init",2,SWIGTYPE_p_sp_rpt);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)sp_rpt_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rpt_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_rpt *arg2 = (sp_rpt *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rpt_compute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rpt_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_rpt_compute",2,"sp_rpt *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_rpt_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_rpt_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_rpt_compute",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_rpt_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_rpt,0))){
    SWIG_fail_ptr("sp_rpt_compute",2,SWIGTYPE_p_sp_rpt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_rpt_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_rpt_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_rpt_compute",5,SWIGTYPE_p_float);
  }
  
  result = (int)sp_rpt_compute(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_min_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rspline::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::min",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::min",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_min_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->min = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_min_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rspline::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::min",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_min_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (float) ((arg1)->min);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_max_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rspline::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::max",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::max",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_max_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_max_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rspline::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::max",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_max_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (float) ((arg1)->max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_cps_min_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rspline::cps_min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::cps_min",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::cps_min",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_cps_min_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->cps_min = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_cps_min_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rspline::cps_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::cps_min",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_cps_min_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (float) ((arg1)->cps_min);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_cps_max_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rspline::cps_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::cps_max",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::cps_max",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_cps_max_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->cps_max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_cps_max_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rspline::cps_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::cps_max",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_cps_max_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (float) ((arg1)->cps_max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_si_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rspline::si",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::si",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::si",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_si_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->si = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_si_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rspline::si",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::si",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_si_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (float) ((arg1)->si);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_phs_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rspline::phs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::phs",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::phs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_phs_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->phs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_phs_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rspline::phs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::phs",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_phs_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (float) ((arg1)->phs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_rmin_cod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_rspline::rmin_cod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::rmin_cod",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::rmin_cod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_rmin_cod_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rmin_cod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_rmin_cod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rspline::rmin_cod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::rmin_cod",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_rmin_cod_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (int) ((arg1)->rmin_cod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_rmax_cod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_rspline::rmax_cod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::rmax_cod",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::rmax_cod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_rmax_cod_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rmax_cod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_rmax_cod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rspline::rmax_cod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::rmax_cod",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_rmax_cod_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (int) ((arg1)->rmax_cod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_num0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rspline::num0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::num0",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::num0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_num0_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->num0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_num0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rspline::num0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::num0",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_num0_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (float) ((arg1)->num0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_num1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rspline::num1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::num1",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::num1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_num1_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->num1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_num1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rspline::num1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::num1",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_num1_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (float) ((arg1)->num1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_num2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rspline::num2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::num2",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::num2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_num2_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->num2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_num2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rspline::num2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::num2",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_num2_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (float) ((arg1)->num2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_df0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rspline::df0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::df0",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::df0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_df0_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->df0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_df0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rspline::df0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::df0",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_df0_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (float) ((arg1)->df0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_df1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rspline::df1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::df1",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::df1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_df1_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->df1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_df1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rspline::df1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::df1",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_df1_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (float) ((arg1)->df1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_c3_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rspline::c3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::c3",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::c3",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_c3_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_c3_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rspline::c3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::c3",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_c3_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (float) ((arg1)->c3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_c2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rspline::c2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::c2",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::c2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_c2_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_c2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rspline::c2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::c2",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_c2_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (float) ((arg1)->c2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_onedsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_rspline::onedsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::onedsr",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::onedsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_onedsr_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->onedsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_onedsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_rspline::onedsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::onedsr",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_onedsr_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (float) ((arg1)->onedsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_holdrand_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_rspline::holdrand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::holdrand",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::holdrand",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_holdrand_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->holdrand = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_holdrand_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rspline::holdrand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::holdrand",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_holdrand_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (int) ((arg1)->holdrand);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_init_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_rspline::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::init",1,"sp_rspline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_rspline::init",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_init_set",1,SWIGTYPE_p_sp_rspline);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->init = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_init_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *arg1 = (sp_rspline *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rspline::init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline::init",1,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_init_get",1,SWIGTYPE_p_sp_rspline);
  }
  
  result = (int) ((arg1)->init);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_rspline(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline *result = 0 ;
  
  SWIG_check_num_args("sp_rspline::sp_rspline",0,0)
  result = (sp_rspline *)new sp_rspline();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_rspline,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_rspline(void *obj) {
sp_rspline *arg1 = (sp_rspline *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_rspline(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_rspline);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_rspline_attributes[] = {
    { "min", _wrap_sp_rspline_min_get, _wrap_sp_rspline_min_set },
    { "max", _wrap_sp_rspline_max_get, _wrap_sp_rspline_max_set },
    { "cps_min", _wrap_sp_rspline_cps_min_get, _wrap_sp_rspline_cps_min_set },
    { "cps_max", _wrap_sp_rspline_cps_max_get, _wrap_sp_rspline_cps_max_set },
    { "si", _wrap_sp_rspline_si_get, _wrap_sp_rspline_si_set },
    { "phs", _wrap_sp_rspline_phs_get, _wrap_sp_rspline_phs_set },
    { "rmin_cod", _wrap_sp_rspline_rmin_cod_get, _wrap_sp_rspline_rmin_cod_set },
    { "rmax_cod", _wrap_sp_rspline_rmax_cod_get, _wrap_sp_rspline_rmax_cod_set },
    { "num0", _wrap_sp_rspline_num0_get, _wrap_sp_rspline_num0_set },
    { "num1", _wrap_sp_rspline_num1_get, _wrap_sp_rspline_num1_set },
    { "num2", _wrap_sp_rspline_num2_get, _wrap_sp_rspline_num2_set },
    { "df0", _wrap_sp_rspline_df0_get, _wrap_sp_rspline_df0_set },
    { "df1", _wrap_sp_rspline_df1_get, _wrap_sp_rspline_df1_set },
    { "c3", _wrap_sp_rspline_c3_get, _wrap_sp_rspline_c3_set },
    { "c2", _wrap_sp_rspline_c2_get, _wrap_sp_rspline_c2_set },
    { "onedsr", _wrap_sp_rspline_onedsr_get, _wrap_sp_rspline_onedsr_set },
    { "holdrand", _wrap_sp_rspline_holdrand_get, _wrap_sp_rspline_holdrand_set },
    { "init", _wrap_sp_rspline_init_get, _wrap_sp_rspline_init_set },
    {0,0,0}
};
static swig_lua_method swig_sp_rspline_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_rspline_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_rspline_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_rspline_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_rspline_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_rspline_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_rspline_Sf_SwigStatic = {
    "sp_rspline",
    swig_sp_rspline_Sf_SwigStatic_methods,
    swig_sp_rspline_Sf_SwigStatic_attributes,
    swig_sp_rspline_Sf_SwigStatic_constants,
    swig_sp_rspline_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_rspline_bases[] = {0};
static const char *swig_sp_rspline_base_names[] = {0};
static swig_lua_class _wrap_class_sp_rspline = { "sp_rspline", "sp_rspline", &SWIGTYPE_p_sp_rspline,_proxy__wrap_new_sp_rspline, swig_delete_sp_rspline, swig_sp_rspline_methods, swig_sp_rspline_attributes, &swig_sp_rspline_Sf_SwigStatic, swig_sp_rspline_meta, swig_sp_rspline_bases, swig_sp_rspline_base_names };

static int _wrap_sp_rspline_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline **arg1 = (sp_rspline **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rspline_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline_create",1,"sp_rspline **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_create",1,SWIGTYPE_p_p_sp_rspline);
  }
  
  result = (int)sp_rspline_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_rspline **arg1 = (sp_rspline **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rspline_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline_destroy",1,"sp_rspline **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_destroy",1,SWIGTYPE_p_p_sp_rspline);
  }
  
  result = (int)sp_rspline_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_rspline *arg2 = (sp_rspline *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rspline_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_rspline_init",2,"sp_rspline *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_rspline_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_init",2,SWIGTYPE_p_sp_rspline);
  }
  
  result = (int)sp_rspline_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_rspline_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_rspline *arg2 = (sp_rspline *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_rspline_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_rspline_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_rspline_compute",2,"sp_rspline *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_rspline_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_rspline_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_rspline_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_rspline,0))){
    SWIG_fail_ptr("sp_rspline_compute",2,SWIGTYPE_p_sp_rspline);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_rspline_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_rspline_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_rspline_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_saturator_drive_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_saturator *arg1 = (sp_saturator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_saturator::drive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_saturator::drive",1,"sp_saturator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_saturator::drive",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_saturator,0))){
    SWIG_fail_ptr("sp_saturator_drive_set",1,SWIGTYPE_p_sp_saturator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->drive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_saturator_drive_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_saturator *arg1 = (sp_saturator *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_saturator::drive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_saturator::drive",1,"sp_saturator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_saturator,0))){
    SWIG_fail_ptr("sp_saturator_drive_get",1,SWIGTYPE_p_sp_saturator);
  }
  
  result = (float) ((arg1)->drive);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_saturator_dcoffset_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_saturator *arg1 = (sp_saturator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_saturator::dcoffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_saturator::dcoffset",1,"sp_saturator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_saturator::dcoffset",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_saturator,0))){
    SWIG_fail_ptr("sp_saturator_dcoffset_set",1,SWIGTYPE_p_sp_saturator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dcoffset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_saturator_dcoffset_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_saturator *arg1 = (sp_saturator *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_saturator::dcoffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_saturator::dcoffset",1,"sp_saturator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_saturator,0))){
    SWIG_fail_ptr("sp_saturator_dcoffset_get",1,SWIGTYPE_p_sp_saturator);
  }
  
  result = (float) ((arg1)->dcoffset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_saturator_dcblocker_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_saturator *arg1 = (sp_saturator *) 0 ;
  float (*arg2)[7] ;
  
  SWIG_check_num_args("sp_saturator::dcblocker",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_saturator::dcblocker",1,"sp_saturator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_saturator::dcblocker",2,"float [2][7]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_saturator,0))){
    SWIG_fail_ptr("sp_saturator_dcblocker_set",1,SWIGTYPE_p_sp_saturator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_a_7__float,0))){
    SWIG_fail_ptr("sp_saturator_dcblocker_set",2,SWIGTYPE_p_a_7__float);
  }
  
  {
    float (*inp)[7] = (float (*)[7])(arg2);
    float (*dest)[7] = (float (*)[7])(arg1->dcblocker);
    size_t ii = 0;
    for (; ii < 2; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 7; ++jj) dp[jj] = ip[jj];
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_saturator_dcblocker_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_saturator *arg1 = (sp_saturator *) 0 ;
  float (*result)[7] = 0 ;
  
  SWIG_check_num_args("sp_saturator::dcblocker",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_saturator::dcblocker",1,"sp_saturator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_saturator,0))){
    SWIG_fail_ptr("sp_saturator_dcblocker_get",1,SWIGTYPE_p_sp_saturator);
  }
  
  result = (float (*)[7])(float (*)[7]) ((arg1)->dcblocker);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_a_7__float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_saturator_ai_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_saturator *arg1 = (sp_saturator *) 0 ;
  float (*arg2)[7] ;
  
  SWIG_check_num_args("sp_saturator::ai",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_saturator::ai",1,"sp_saturator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_saturator::ai",2,"float [6][7]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_saturator,0))){
    SWIG_fail_ptr("sp_saturator_ai_set",1,SWIGTYPE_p_sp_saturator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_a_7__float,0))){
    SWIG_fail_ptr("sp_saturator_ai_set",2,SWIGTYPE_p_a_7__float);
  }
  
  {
    float (*inp)[7] = (float (*)[7])(arg2);
    float (*dest)[7] = (float (*)[7])(arg1->ai);
    size_t ii = 0;
    for (; ii < 6; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 7; ++jj) dp[jj] = ip[jj];
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_saturator_ai_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_saturator *arg1 = (sp_saturator *) 0 ;
  float (*result)[7] = 0 ;
  
  SWIG_check_num_args("sp_saturator::ai",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_saturator::ai",1,"sp_saturator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_saturator,0))){
    SWIG_fail_ptr("sp_saturator_ai_get",1,SWIGTYPE_p_sp_saturator);
  }
  
  result = (float (*)[7])(float (*)[7]) ((arg1)->ai);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_a_7__float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_saturator_aa_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_saturator *arg1 = (sp_saturator *) 0 ;
  float (*arg2)[7] ;
  
  SWIG_check_num_args("sp_saturator::aa",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_saturator::aa",1,"sp_saturator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_saturator::aa",2,"float [6][7]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_saturator,0))){
    SWIG_fail_ptr("sp_saturator_aa_set",1,SWIGTYPE_p_sp_saturator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_a_7__float,0))){
    SWIG_fail_ptr("sp_saturator_aa_set",2,SWIGTYPE_p_a_7__float);
  }
  
  {
    float (*inp)[7] = (float (*)[7])(arg2);
    float (*dest)[7] = (float (*)[7])(arg1->aa);
    size_t ii = 0;
    for (; ii < 6; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 7; ++jj) dp[jj] = ip[jj];
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_saturator_aa_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_saturator *arg1 = (sp_saturator *) 0 ;
  float (*result)[7] = 0 ;
  
  SWIG_check_num_args("sp_saturator::aa",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_saturator::aa",1,"sp_saturator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_saturator,0))){
    SWIG_fail_ptr("sp_saturator_aa_get",1,SWIGTYPE_p_sp_saturator);
  }
  
  result = (float (*)[7])(float (*)[7]) ((arg1)->aa);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_a_7__float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_saturator(lua_State* L) {
  int SWIG_arg = 0;
  sp_saturator *result = 0 ;
  
  SWIG_check_num_args("sp_saturator::sp_saturator",0,0)
  result = (sp_saturator *)new sp_saturator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_saturator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_saturator(void *obj) {
sp_saturator *arg1 = (sp_saturator *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_saturator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_saturator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_saturator_attributes[] = {
    { "drive", _wrap_sp_saturator_drive_get, _wrap_sp_saturator_drive_set },
    { "dcoffset", _wrap_sp_saturator_dcoffset_get, _wrap_sp_saturator_dcoffset_set },
    { "dcblocker", _wrap_sp_saturator_dcblocker_get, _wrap_sp_saturator_dcblocker_set },
    { "ai", _wrap_sp_saturator_ai_get, _wrap_sp_saturator_ai_set },
    { "aa", _wrap_sp_saturator_aa_get, _wrap_sp_saturator_aa_set },
    {0,0,0}
};
static swig_lua_method swig_sp_saturator_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_saturator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_saturator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_saturator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_saturator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_saturator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_saturator_Sf_SwigStatic = {
    "sp_saturator",
    swig_sp_saturator_Sf_SwigStatic_methods,
    swig_sp_saturator_Sf_SwigStatic_attributes,
    swig_sp_saturator_Sf_SwigStatic_constants,
    swig_sp_saturator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_saturator_bases[] = {0};
static const char *swig_sp_saturator_base_names[] = {0};
static swig_lua_class _wrap_class_sp_saturator = { "sp_saturator", "sp_saturator", &SWIGTYPE_p_sp_saturator,_proxy__wrap_new_sp_saturator, swig_delete_sp_saturator, swig_sp_saturator_methods, swig_sp_saturator_attributes, &swig_sp_saturator_Sf_SwigStatic, swig_sp_saturator_meta, swig_sp_saturator_bases, swig_sp_saturator_base_names };

static int _wrap_sp_saturator_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_saturator **arg1 = (sp_saturator **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_saturator_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_saturator_create",1,"sp_saturator **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_saturator,0))){
    SWIG_fail_ptr("sp_saturator_create",1,SWIGTYPE_p_p_sp_saturator);
  }
  
  result = (int)sp_saturator_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_saturator_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_saturator **arg1 = (sp_saturator **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_saturator_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_saturator_destroy",1,"sp_saturator **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_saturator,0))){
    SWIG_fail_ptr("sp_saturator_destroy",1,SWIGTYPE_p_p_sp_saturator);
  }
  
  result = (int)sp_saturator_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_saturator_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_saturator *arg2 = (sp_saturator *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_saturator_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_saturator_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_saturator_init",2,"sp_saturator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_saturator_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_saturator,0))){
    SWIG_fail_ptr("sp_saturator_init",2,SWIGTYPE_p_sp_saturator);
  }
  
  result = (int)sp_saturator_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_saturator_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_saturator *arg2 = (sp_saturator *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_saturator_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_saturator_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_saturator_compute",2,"sp_saturator *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_saturator_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_saturator_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_saturator_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_saturator,0))){
    SWIG_fail_ptr("sp_saturator_compute",2,SWIGTYPE_p_sp_saturator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_saturator_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_saturator_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_saturator_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_samphold_val_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_samphold *arg1 = (sp_samphold *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_samphold::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_samphold::val",1,"sp_samphold *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_samphold::val",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_samphold,0))){
    SWIG_fail_ptr("sp_samphold_val_set",1,SWIGTYPE_p_sp_samphold);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_samphold_val_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_samphold *arg1 = (sp_samphold *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_samphold::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_samphold::val",1,"sp_samphold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_samphold,0))){
    SWIG_fail_ptr("sp_samphold_val_get",1,SWIGTYPE_p_sp_samphold);
  }
  
  result = (float) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_samphold(lua_State* L) {
  int SWIG_arg = 0;
  sp_samphold *result = 0 ;
  
  SWIG_check_num_args("sp_samphold::sp_samphold",0,0)
  result = (sp_samphold *)new sp_samphold();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_samphold,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_samphold(void *obj) {
sp_samphold *arg1 = (sp_samphold *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_samphold(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_samphold);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_samphold_attributes[] = {
    { "val", _wrap_sp_samphold_val_get, _wrap_sp_samphold_val_set },
    {0,0,0}
};
static swig_lua_method swig_sp_samphold_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_samphold_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_samphold_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_samphold_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_samphold_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_samphold_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_samphold_Sf_SwigStatic = {
    "sp_samphold",
    swig_sp_samphold_Sf_SwigStatic_methods,
    swig_sp_samphold_Sf_SwigStatic_attributes,
    swig_sp_samphold_Sf_SwigStatic_constants,
    swig_sp_samphold_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_samphold_bases[] = {0};
static const char *swig_sp_samphold_base_names[] = {0};
static swig_lua_class _wrap_class_sp_samphold = { "sp_samphold", "sp_samphold", &SWIGTYPE_p_sp_samphold,_proxy__wrap_new_sp_samphold, swig_delete_sp_samphold, swig_sp_samphold_methods, swig_sp_samphold_attributes, &swig_sp_samphold_Sf_SwigStatic, swig_sp_samphold_meta, swig_sp_samphold_bases, swig_sp_samphold_base_names };

static int _wrap_sp_samphold_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_samphold **arg1 = (sp_samphold **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_samphold_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_samphold_create",1,"sp_samphold **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_samphold,0))){
    SWIG_fail_ptr("sp_samphold_create",1,SWIGTYPE_p_p_sp_samphold);
  }
  
  result = (int)sp_samphold_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_samphold_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_samphold **arg1 = (sp_samphold **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_samphold_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_samphold_destroy",1,"sp_samphold **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_samphold,0))){
    SWIG_fail_ptr("sp_samphold_destroy",1,SWIGTYPE_p_p_sp_samphold);
  }
  
  result = (int)sp_samphold_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_samphold_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_samphold *arg2 = (sp_samphold *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_samphold_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_samphold_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_samphold_init",2,"sp_samphold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_samphold_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_samphold,0))){
    SWIG_fail_ptr("sp_samphold_init",2,SWIGTYPE_p_sp_samphold);
  }
  
  result = (int)sp_samphold_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_samphold_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_samphold *arg2 = (sp_samphold *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_samphold_compute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_samphold_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_samphold_compute",2,"sp_samphold *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_samphold_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_samphold_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_samphold_compute",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_samphold_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_samphold,0))){
    SWIG_fail_ptr("sp_samphold_compute",2,SWIGTYPE_p_sp_samphold);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_samphold_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_samphold_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_samphold_compute",5,SWIGTYPE_p_float);
  }
  
  result = (int)sp_samphold_compute(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_scale_min_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_scale *arg1 = (sp_scale *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_scale::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_scale::min",1,"sp_scale *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_scale::min",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_scale,0))){
    SWIG_fail_ptr("sp_scale_min_set",1,SWIGTYPE_p_sp_scale);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->min = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_scale_min_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_scale *arg1 = (sp_scale *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_scale::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_scale::min",1,"sp_scale *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_scale,0))){
    SWIG_fail_ptr("sp_scale_min_get",1,SWIGTYPE_p_sp_scale);
  }
  
  result = (float) ((arg1)->min);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_scale_max_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_scale *arg1 = (sp_scale *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_scale::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_scale::max",1,"sp_scale *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_scale::max",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_scale,0))){
    SWIG_fail_ptr("sp_scale_max_set",1,SWIGTYPE_p_sp_scale);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_scale_max_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_scale *arg1 = (sp_scale *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_scale::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_scale::max",1,"sp_scale *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_scale,0))){
    SWIG_fail_ptr("sp_scale_max_get",1,SWIGTYPE_p_sp_scale);
  }
  
  result = (float) ((arg1)->max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_scale(lua_State* L) {
  int SWIG_arg = 0;
  sp_scale *result = 0 ;
  
  SWIG_check_num_args("sp_scale::sp_scale",0,0)
  result = (sp_scale *)new sp_scale();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_scale,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_scale(void *obj) {
sp_scale *arg1 = (sp_scale *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_scale(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_scale);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_scale_attributes[] = {
    { "min", _wrap_sp_scale_min_get, _wrap_sp_scale_min_set },
    { "max", _wrap_sp_scale_max_get, _wrap_sp_scale_max_set },
    {0,0,0}
};
static swig_lua_method swig_sp_scale_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_scale_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_scale_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_scale_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_scale_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_scale_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_scale_Sf_SwigStatic = {
    "sp_scale",
    swig_sp_scale_Sf_SwigStatic_methods,
    swig_sp_scale_Sf_SwigStatic_attributes,
    swig_sp_scale_Sf_SwigStatic_constants,
    swig_sp_scale_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_scale_bases[] = {0};
static const char *swig_sp_scale_base_names[] = {0};
static swig_lua_class _wrap_class_sp_scale = { "sp_scale", "sp_scale", &SWIGTYPE_p_sp_scale,_proxy__wrap_new_sp_scale, swig_delete_sp_scale, swig_sp_scale_methods, swig_sp_scale_attributes, &swig_sp_scale_Sf_SwigStatic, swig_sp_scale_meta, swig_sp_scale_bases, swig_sp_scale_base_names };

static int _wrap_sp_scale_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_scale **arg1 = (sp_scale **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_scale_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_scale_create",1,"sp_scale **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_scale,0))){
    SWIG_fail_ptr("sp_scale_create",1,SWIGTYPE_p_p_sp_scale);
  }
  
  result = (int)sp_scale_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_scale_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_scale **arg1 = (sp_scale **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_scale_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_scale_destroy",1,"sp_scale **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_scale,0))){
    SWIG_fail_ptr("sp_scale_destroy",1,SWIGTYPE_p_p_sp_scale);
  }
  
  result = (int)sp_scale_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_scale_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_scale *arg2 = (sp_scale *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_scale_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_scale_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_scale_init",2,"sp_scale *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_scale_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_scale,0))){
    SWIG_fail_ptr("sp_scale_init",2,SWIGTYPE_p_sp_scale);
  }
  
  result = (int)sp_scale_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_scale_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_scale *arg2 = (sp_scale *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_scale_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_scale_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_scale_compute",2,"sp_scale *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_scale_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_scale_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_scale_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_scale,0))){
    SWIG_fail_ptr("sp_scale_compute",2,SWIGTYPE_p_sp_scale);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_scale_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_scale_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_scale_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_gen_scrambler(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  sp_ftbl **arg3 = (sp_ftbl **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_gen_scrambler",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gen_scrambler",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gen_scrambler",2,"sp_ftbl *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_gen_scrambler",3,"sp_ftbl **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_gen_scrambler",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gen_scrambler",2,SWIGTYPE_p_sp_ftbl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gen_scrambler",3,SWIGTYPE_p_p_sp_ftbl);
  }
  
  result = (int)sp_gen_scrambler(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sdelay_size_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_sdelay *arg1 = (sp_sdelay *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_sdelay::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sdelay::size",1,"sp_sdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_sdelay::size",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sdelay,0))){
    SWIG_fail_ptr("sp_sdelay_size_set",1,SWIGTYPE_p_sp_sdelay);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sdelay_size_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_sdelay *arg1 = (sp_sdelay *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_sdelay::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sdelay::size",1,"sp_sdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sdelay,0))){
    SWIG_fail_ptr("sp_sdelay_size_get",1,SWIGTYPE_p_sp_sdelay);
  }
  
  result = (int) ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sdelay_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_sdelay *arg1 = (sp_sdelay *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_sdelay::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sdelay::pos",1,"sp_sdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_sdelay::pos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sdelay,0))){
    SWIG_fail_ptr("sp_sdelay_pos_set",1,SWIGTYPE_p_sp_sdelay);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sdelay_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_sdelay *arg1 = (sp_sdelay *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_sdelay::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sdelay::pos",1,"sp_sdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sdelay,0))){
    SWIG_fail_ptr("sp_sdelay_pos_get",1,SWIGTYPE_p_sp_sdelay);
  }
  
  result = (int) ((arg1)->pos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sdelay_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_sdelay *arg1 = (sp_sdelay *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_sdelay::buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sdelay::buf",1,"sp_sdelay *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_sdelay::buf",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sdelay,0))){
    SWIG_fail_ptr("sp_sdelay_buf_set",1,SWIGTYPE_p_sp_sdelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_sdelay_buf_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->buf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sdelay_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_sdelay *arg1 = (sp_sdelay *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_sdelay::buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sdelay::buf",1,"sp_sdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sdelay,0))){
    SWIG_fail_ptr("sp_sdelay_buf_get",1,SWIGTYPE_p_sp_sdelay);
  }
  
  result = (float *) ((arg1)->buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_sdelay(lua_State* L) {
  int SWIG_arg = 0;
  sp_sdelay *result = 0 ;
  
  SWIG_check_num_args("sp_sdelay::sp_sdelay",0,0)
  result = (sp_sdelay *)new sp_sdelay();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_sdelay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_sdelay(void *obj) {
sp_sdelay *arg1 = (sp_sdelay *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_sdelay(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_sdelay);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_sdelay_attributes[] = {
    { "size", _wrap_sp_sdelay_size_get, _wrap_sp_sdelay_size_set },
    { "pos", _wrap_sp_sdelay_pos_get, _wrap_sp_sdelay_pos_set },
    { "buf", _wrap_sp_sdelay_buf_get, _wrap_sp_sdelay_buf_set },
    {0,0,0}
};
static swig_lua_method swig_sp_sdelay_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_sdelay_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_sdelay_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_sdelay_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_sdelay_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_sdelay_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_sdelay_Sf_SwigStatic = {
    "sp_sdelay",
    swig_sp_sdelay_Sf_SwigStatic_methods,
    swig_sp_sdelay_Sf_SwigStatic_attributes,
    swig_sp_sdelay_Sf_SwigStatic_constants,
    swig_sp_sdelay_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_sdelay_bases[] = {0};
static const char *swig_sp_sdelay_base_names[] = {0};
static swig_lua_class _wrap_class_sp_sdelay = { "sp_sdelay", "sp_sdelay", &SWIGTYPE_p_sp_sdelay,_proxy__wrap_new_sp_sdelay, swig_delete_sp_sdelay, swig_sp_sdelay_methods, swig_sp_sdelay_attributes, &swig_sp_sdelay_Sf_SwigStatic, swig_sp_sdelay_meta, swig_sp_sdelay_bases, swig_sp_sdelay_base_names };

static int _wrap_sp_sdelay_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_sdelay **arg1 = (sp_sdelay **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_sdelay_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sdelay_create",1,"sp_sdelay **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_sdelay,0))){
    SWIG_fail_ptr("sp_sdelay_create",1,SWIGTYPE_p_p_sp_sdelay);
  }
  
  result = (int)sp_sdelay_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sdelay_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_sdelay **arg1 = (sp_sdelay **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_sdelay_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sdelay_destroy",1,"sp_sdelay **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_sdelay,0))){
    SWIG_fail_ptr("sp_sdelay_destroy",1,SWIGTYPE_p_p_sp_sdelay);
  }
  
  result = (int)sp_sdelay_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sdelay_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_sdelay *arg2 = (sp_sdelay *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("sp_sdelay_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sdelay_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_sdelay_init",2,"sp_sdelay *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_sdelay_init",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_sdelay_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_sdelay,0))){
    SWIG_fail_ptr("sp_sdelay_init",2,SWIGTYPE_p_sp_sdelay);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)sp_sdelay_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sdelay_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_sdelay *arg2 = (sp_sdelay *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_sdelay_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sdelay_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_sdelay_compute",2,"sp_sdelay *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_sdelay_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_sdelay_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_sdelay_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_sdelay,0))){
    SWIG_fail_ptr("sp_sdelay_compute",2,SWIGTYPE_p_sp_sdelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_sdelay_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_sdelay_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_sdelay_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_slice_vals_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_slice *arg1 = (sp_slice *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_slice::vals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_slice::vals",1,"sp_slice *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_slice::vals",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_slice,0))){
    SWIG_fail_ptr("sp_slice_vals_set",1,SWIGTYPE_p_sp_slice);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_slice_vals_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->vals = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_slice_vals_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_slice *arg1 = (sp_slice *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_slice::vals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_slice::vals",1,"sp_slice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_slice,0))){
    SWIG_fail_ptr("sp_slice_vals_get",1,SWIGTYPE_p_sp_slice);
  }
  
  result = (sp_ftbl *) ((arg1)->vals);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_slice_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_slice *arg1 = (sp_slice *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_slice::buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_slice::buf",1,"sp_slice *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_slice::buf",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_slice,0))){
    SWIG_fail_ptr("sp_slice_buf_set",1,SWIGTYPE_p_sp_slice);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_slice_buf_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->buf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_slice_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_slice *arg1 = (sp_slice *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_slice::buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_slice::buf",1,"sp_slice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_slice,0))){
    SWIG_fail_ptr("sp_slice_buf_get",1,SWIGTYPE_p_sp_slice);
  }
  
  result = (sp_ftbl *) ((arg1)->buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_slice_id_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_slice *arg1 = (sp_slice *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_slice::id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_slice::id",1,"sp_slice *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_slice::id",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_slice,0))){
    SWIG_fail_ptr("sp_slice_id_set",1,SWIGTYPE_p_sp_slice);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_slice_id_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_slice_id_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_slice *arg1 = (sp_slice *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_slice::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_slice::id",1,"sp_slice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_slice,0))){
    SWIG_fail_ptr("sp_slice_id_get",1,SWIGTYPE_p_sp_slice);
  }
  
  result =  ((arg1)->id);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_slice_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_slice *arg1 = (sp_slice *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_slice::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_slice::pos",1,"sp_slice *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_slice::pos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_slice,0))){
    SWIG_fail_ptr("sp_slice_pos_set",1,SWIGTYPE_p_sp_slice);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_slice_pos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_slice_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_slice *arg1 = (sp_slice *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_slice::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_slice::pos",1,"sp_slice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_slice,0))){
    SWIG_fail_ptr("sp_slice_pos_get",1,SWIGTYPE_p_sp_slice);
  }
  
  result =  ((arg1)->pos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_slice_nextpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_slice *arg1 = (sp_slice *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_slice::nextpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_slice::nextpos",1,"sp_slice *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_slice::nextpos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_slice,0))){
    SWIG_fail_ptr("sp_slice_nextpos_set",1,SWIGTYPE_p_sp_slice);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_slice_nextpos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->nextpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_slice_nextpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_slice *arg1 = (sp_slice *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_slice::nextpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_slice::nextpos",1,"sp_slice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_slice,0))){
    SWIG_fail_ptr("sp_slice_nextpos_get",1,SWIGTYPE_p_sp_slice);
  }
  
  result =  ((arg1)->nextpos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_slice(lua_State* L) {
  int SWIG_arg = 0;
  sp_slice *result = 0 ;
  
  SWIG_check_num_args("sp_slice::sp_slice",0,0)
  result = (sp_slice *)new sp_slice();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_slice,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_slice(void *obj) {
sp_slice *arg1 = (sp_slice *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_slice(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_slice);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_slice_attributes[] = {
    { "vals", _wrap_sp_slice_vals_get, _wrap_sp_slice_vals_set },
    { "buf", _wrap_sp_slice_buf_get, _wrap_sp_slice_buf_set },
    { "id", _wrap_sp_slice_id_get, _wrap_sp_slice_id_set },
    { "pos", _wrap_sp_slice_pos_get, _wrap_sp_slice_pos_set },
    { "nextpos", _wrap_sp_slice_nextpos_get, _wrap_sp_slice_nextpos_set },
    {0,0,0}
};
static swig_lua_method swig_sp_slice_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_slice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_slice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_slice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_slice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_slice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_slice_Sf_SwigStatic = {
    "sp_slice",
    swig_sp_slice_Sf_SwigStatic_methods,
    swig_sp_slice_Sf_SwigStatic_attributes,
    swig_sp_slice_Sf_SwigStatic_constants,
    swig_sp_slice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_slice_bases[] = {0};
static const char *swig_sp_slice_base_names[] = {0};
static swig_lua_class _wrap_class_sp_slice = { "sp_slice", "sp_slice", &SWIGTYPE_p_sp_slice,_proxy__wrap_new_sp_slice, swig_delete_sp_slice, swig_sp_slice_methods, swig_sp_slice_attributes, &swig_sp_slice_Sf_SwigStatic, swig_sp_slice_meta, swig_sp_slice_bases, swig_sp_slice_base_names };

static int _wrap_sp_slice_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_slice **arg1 = (sp_slice **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_slice_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_slice_create",1,"sp_slice **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_slice,0))){
    SWIG_fail_ptr("sp_slice_create",1,SWIGTYPE_p_p_sp_slice);
  }
  
  result = (int)sp_slice_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_slice_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_slice **arg1 = (sp_slice **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_slice_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_slice_destroy",1,"sp_slice **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_slice,0))){
    SWIG_fail_ptr("sp_slice_destroy",1,SWIGTYPE_p_p_sp_slice);
  }
  
  result = (int)sp_slice_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_slice_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_slice *arg2 = (sp_slice *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  sp_ftbl *arg4 = (sp_ftbl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_slice_init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_slice_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_slice_init",2,"sp_slice *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_slice_init",3,"sp_ftbl *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_slice_init",4,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_slice_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_slice,0))){
    SWIG_fail_ptr("sp_slice_init",2,SWIGTYPE_p_sp_slice);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_slice_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_slice_init",4,SWIGTYPE_p_sp_ftbl);
  }
  
  result = (int)sp_slice_init(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_slice_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_slice *arg2 = (sp_slice *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_slice_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_slice_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_slice_compute",2,"sp_slice *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_slice_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_slice_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_slice_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_slice,0))){
    SWIG_fail_ptr("sp_slice_compute",2,SWIGTYPE_p_sp_slice);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_slice_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_slice_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_slice_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_del_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_smoothdelay::del",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::del",1,"sp_smoothdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_smoothdelay::del",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_del_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->del = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_del_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_smoothdelay::del",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::del",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_del_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result = (float) ((arg1)->del);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_maxdel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_smoothdelay::maxdel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::maxdel",1,"sp_smoothdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_smoothdelay::maxdel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_maxdel_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxdel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_maxdel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_smoothdelay::maxdel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::maxdel",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_maxdel_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result = (float) ((arg1)->maxdel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_pdel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_smoothdelay::pdel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::pdel",1,"sp_smoothdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_smoothdelay::pdel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_pdel_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pdel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_pdel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_smoothdelay::pdel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::pdel",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_pdel_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result = (float) ((arg1)->pdel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_smoothdelay::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::sr",1,"sp_smoothdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_smoothdelay::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_sr_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_smoothdelay::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::sr",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_sr_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_feedback_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_smoothdelay::feedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::feedback",1,"sp_smoothdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_smoothdelay::feedback",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_feedback_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->feedback = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_feedback_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_smoothdelay::feedback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::feedback",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_feedback_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result = (float) ((arg1)->feedback);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_counter_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_smoothdelay::counter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::counter",1,"sp_smoothdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_smoothdelay::counter",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_counter_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->counter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_counter_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_smoothdelay::counter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::counter",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_counter_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result = (int) ((arg1)->counter);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_maxcount_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_smoothdelay::maxcount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::maxcount",1,"sp_smoothdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_smoothdelay::maxcount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_maxcount_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxcount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_maxcount_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_smoothdelay::maxcount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::maxcount",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_maxcount_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result = (int) ((arg1)->maxcount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_maxbuf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_smoothdelay::maxbuf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::maxbuf",1,"sp_smoothdelay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_smoothdelay::maxbuf",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_maxbuf_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_smoothdelay_maxbuf_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->maxbuf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_maxbuf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_smoothdelay::maxbuf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::maxbuf",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_maxbuf_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result =  ((arg1)->maxbuf);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_buf1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_smoothdelay::buf1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::buf1",1,"sp_smoothdelay *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_smoothdelay::buf1",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_buf1_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_smoothdelay_buf1_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->buf1 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_buf1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_smoothdelay::buf1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::buf1",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_buf1_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result = (sp_auxdata *)& ((arg1)->buf1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_bufpos1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_smoothdelay::bufpos1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::bufpos1",1,"sp_smoothdelay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_smoothdelay::bufpos1",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_bufpos1_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_smoothdelay_bufpos1_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bufpos1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_bufpos1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_smoothdelay::bufpos1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::bufpos1",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_bufpos1_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result =  ((arg1)->bufpos1);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_deltime1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_smoothdelay::deltime1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::deltime1",1,"sp_smoothdelay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_smoothdelay::deltime1",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_deltime1_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_smoothdelay_deltime1_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->deltime1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_deltime1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_smoothdelay::deltime1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::deltime1",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_deltime1_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result =  ((arg1)->deltime1);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_buf2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_smoothdelay::buf2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::buf2",1,"sp_smoothdelay *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_smoothdelay::buf2",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_buf2_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_smoothdelay_buf2_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->buf2 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_buf2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_smoothdelay::buf2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::buf2",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_buf2_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result = (sp_auxdata *)& ((arg1)->buf2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_bufpos2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_smoothdelay::bufpos2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::bufpos2",1,"sp_smoothdelay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_smoothdelay::bufpos2",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_bufpos2_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_smoothdelay_bufpos2_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bufpos2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_bufpos2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_smoothdelay::bufpos2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::bufpos2",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_bufpos2_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result =  ((arg1)->bufpos2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_deltime2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_smoothdelay::deltime2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::deltime2",1,"sp_smoothdelay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_smoothdelay::deltime2",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_deltime2_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_smoothdelay_deltime2_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->deltime2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_deltime2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_smoothdelay::deltime2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::deltime2",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_deltime2_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result =  ((arg1)->deltime2);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_curbuf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_smoothdelay::curbuf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::curbuf",1,"sp_smoothdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_smoothdelay::curbuf",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_curbuf_set",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->curbuf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_curbuf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *arg1 = (sp_smoothdelay *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_smoothdelay::curbuf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay::curbuf",1,"sp_smoothdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_curbuf_get",1,SWIGTYPE_p_sp_smoothdelay);
  }
  
  result = (int) ((arg1)->curbuf);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_smoothdelay(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay *result = 0 ;
  
  SWIG_check_num_args("sp_smoothdelay::sp_smoothdelay",0,0)
  result = (sp_smoothdelay *)new sp_smoothdelay();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_smoothdelay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_smoothdelay(void *obj) {
sp_smoothdelay *arg1 = (sp_smoothdelay *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_smoothdelay(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_smoothdelay);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_smoothdelay_attributes[] = {
    { "del", _wrap_sp_smoothdelay_del_get, _wrap_sp_smoothdelay_del_set },
    { "maxdel", _wrap_sp_smoothdelay_maxdel_get, _wrap_sp_smoothdelay_maxdel_set },
    { "pdel", _wrap_sp_smoothdelay_pdel_get, _wrap_sp_smoothdelay_pdel_set },
    { "sr", _wrap_sp_smoothdelay_sr_get, _wrap_sp_smoothdelay_sr_set },
    { "feedback", _wrap_sp_smoothdelay_feedback_get, _wrap_sp_smoothdelay_feedback_set },
    { "counter", _wrap_sp_smoothdelay_counter_get, _wrap_sp_smoothdelay_counter_set },
    { "maxcount", _wrap_sp_smoothdelay_maxcount_get, _wrap_sp_smoothdelay_maxcount_set },
    { "maxbuf", _wrap_sp_smoothdelay_maxbuf_get, _wrap_sp_smoothdelay_maxbuf_set },
    { "buf1", _wrap_sp_smoothdelay_buf1_get, _wrap_sp_smoothdelay_buf1_set },
    { "bufpos1", _wrap_sp_smoothdelay_bufpos1_get, _wrap_sp_smoothdelay_bufpos1_set },
    { "deltime1", _wrap_sp_smoothdelay_deltime1_get, _wrap_sp_smoothdelay_deltime1_set },
    { "buf2", _wrap_sp_smoothdelay_buf2_get, _wrap_sp_smoothdelay_buf2_set },
    { "bufpos2", _wrap_sp_smoothdelay_bufpos2_get, _wrap_sp_smoothdelay_bufpos2_set },
    { "deltime2", _wrap_sp_smoothdelay_deltime2_get, _wrap_sp_smoothdelay_deltime2_set },
    { "curbuf", _wrap_sp_smoothdelay_curbuf_get, _wrap_sp_smoothdelay_curbuf_set },
    {0,0,0}
};
static swig_lua_method swig_sp_smoothdelay_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_smoothdelay_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_smoothdelay_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_smoothdelay_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_smoothdelay_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_smoothdelay_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_smoothdelay_Sf_SwigStatic = {
    "sp_smoothdelay",
    swig_sp_smoothdelay_Sf_SwigStatic_methods,
    swig_sp_smoothdelay_Sf_SwigStatic_attributes,
    swig_sp_smoothdelay_Sf_SwigStatic_constants,
    swig_sp_smoothdelay_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_smoothdelay_bases[] = {0};
static const char *swig_sp_smoothdelay_base_names[] = {0};
static swig_lua_class _wrap_class_sp_smoothdelay = { "sp_smoothdelay", "sp_smoothdelay", &SWIGTYPE_p_sp_smoothdelay,_proxy__wrap_new_sp_smoothdelay, swig_delete_sp_smoothdelay, swig_sp_smoothdelay_methods, swig_sp_smoothdelay_attributes, &swig_sp_smoothdelay_Sf_SwigStatic, swig_sp_smoothdelay_meta, swig_sp_smoothdelay_bases, swig_sp_smoothdelay_base_names };

static int _wrap_sp_smoothdelay_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay **arg1 = (sp_smoothdelay **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_smoothdelay_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay_create",1,"sp_smoothdelay **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_create",1,SWIGTYPE_p_p_sp_smoothdelay);
  }
  
  result = (int)sp_smoothdelay_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_smoothdelay **arg1 = (sp_smoothdelay **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_smoothdelay_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay_destroy",1,"sp_smoothdelay **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_destroy",1,SWIGTYPE_p_p_sp_smoothdelay);
  }
  
  result = (int)sp_smoothdelay_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_smoothdelay *arg2 = (sp_smoothdelay *) 0 ;
  float arg3 ;
  uint32_t arg4 ;
  uint32_t *argp4 ;
  int result;
  
  SWIG_check_num_args("sp_smoothdelay_init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_smoothdelay_init",2,"sp_smoothdelay *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_smoothdelay_init",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("sp_smoothdelay_init",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_smoothdelay_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_init",2,SWIGTYPE_p_sp_smoothdelay);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_smoothdelay_init",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  result = (int)sp_smoothdelay_init(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_smoothdelay_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_smoothdelay *arg2 = (sp_smoothdelay *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_smoothdelay_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_smoothdelay_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_smoothdelay_compute",2,"sp_smoothdelay *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_smoothdelay_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_smoothdelay_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_smoothdelay_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_smoothdelay,0))){
    SWIG_fail_ptr("sp_smoothdelay_compute",2,SWIGTYPE_p_sp_smoothdelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_smoothdelay_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_smoothdelay_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_smoothdelay_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_spa_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_spa *arg1 = (sp_spa *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_spa::buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_spa::buf",1,"sp_spa *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_spa::buf",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_spa,0))){
    SWIG_fail_ptr("sp_spa_buf_set",1,SWIGTYPE_p_sp_spa);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_spa_buf_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->buf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_spa_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_spa *arg1 = (sp_spa *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_spa::buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_spa::buf",1,"sp_spa *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_spa,0))){
    SWIG_fail_ptr("sp_spa_buf_get",1,SWIGTYPE_p_sp_spa);
  }
  
  result = (float *) ((arg1)->buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_spa_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_spa *arg1 = (sp_spa *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_spa::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_spa::pos",1,"sp_spa *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_spa::pos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_spa,0))){
    SWIG_fail_ptr("sp_spa_pos_set",1,SWIGTYPE_p_sp_spa);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_spa_pos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_spa_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_spa *arg1 = (sp_spa *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_spa::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_spa::pos",1,"sp_spa *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_spa,0))){
    SWIG_fail_ptr("sp_spa_pos_get",1,SWIGTYPE_p_sp_spa);
  }
  
  result =  ((arg1)->pos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_spa_bufsize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_spa *arg1 = (sp_spa *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_spa::bufsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_spa::bufsize",1,"sp_spa *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_spa::bufsize",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_spa,0))){
    SWIG_fail_ptr("sp_spa_bufsize_set",1,SWIGTYPE_p_sp_spa);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_spa_bufsize_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bufsize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_spa_bufsize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_spa *arg1 = (sp_spa *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_spa::bufsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_spa::bufsize",1,"sp_spa *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_spa,0))){
    SWIG_fail_ptr("sp_spa_bufsize_get",1,SWIGTYPE_p_sp_spa);
  }
  
  result =  ((arg1)->bufsize);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_spa_spa_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_spa *arg1 = (sp_spa *) 0 ;
  sp_audio *arg2 = (sp_audio *) 0 ;
  
  SWIG_check_num_args("sp_spa::spa",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_spa::spa",1,"sp_spa *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_spa::spa",2,"sp_audio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_spa,0))){
    SWIG_fail_ptr("sp_spa_spa_set",1,SWIGTYPE_p_sp_spa);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("sp_spa_spa_set",2,SWIGTYPE_p_sp_audio);
  }
  
  if (arg1) (arg1)->spa = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_spa_spa_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_spa *arg1 = (sp_spa *) 0 ;
  sp_audio *result = 0 ;
  
  SWIG_check_num_args("sp_spa::spa",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_spa::spa",1,"sp_spa *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_spa,0))){
    SWIG_fail_ptr("sp_spa_spa_get",1,SWIGTYPE_p_sp_spa);
  }
  
  result = (sp_audio *)& ((arg1)->spa);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_audio,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_spa_aux_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_spa *arg1 = (sp_spa *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_spa::aux",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_spa::aux",1,"sp_spa *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_spa::aux",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_spa,0))){
    SWIG_fail_ptr("sp_spa_aux_set",1,SWIGTYPE_p_sp_spa);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_spa_aux_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->aux = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_spa_aux_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_spa *arg1 = (sp_spa *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_spa::aux",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_spa::aux",1,"sp_spa *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_spa,0))){
    SWIG_fail_ptr("sp_spa_aux_get",1,SWIGTYPE_p_sp_spa);
  }
  
  result = (sp_auxdata *)& ((arg1)->aux);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_spa(lua_State* L) {
  int SWIG_arg = 0;
  sp_spa *result = 0 ;
  
  SWIG_check_num_args("sp_spa::sp_spa",0,0)
  result = (sp_spa *)new sp_spa();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_spa,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_spa(void *obj) {
sp_spa *arg1 = (sp_spa *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_spa(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_spa);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_spa_attributes[] = {
    { "buf", _wrap_sp_spa_buf_get, _wrap_sp_spa_buf_set },
    { "pos", _wrap_sp_spa_pos_get, _wrap_sp_spa_pos_set },
    { "bufsize", _wrap_sp_spa_bufsize_get, _wrap_sp_spa_bufsize_set },
    { "spa", _wrap_sp_spa_spa_get, _wrap_sp_spa_spa_set },
    { "aux", _wrap_sp_spa_aux_get, _wrap_sp_spa_aux_set },
    {0,0,0}
};
static swig_lua_method swig_sp_spa_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_spa_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_spa_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_spa_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_spa_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_spa_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_spa_Sf_SwigStatic = {
    "sp_spa",
    swig_sp_spa_Sf_SwigStatic_methods,
    swig_sp_spa_Sf_SwigStatic_attributes,
    swig_sp_spa_Sf_SwigStatic_constants,
    swig_sp_spa_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_spa_bases[] = {0};
static const char *swig_sp_spa_base_names[] = {0};
static swig_lua_class _wrap_class_sp_spa = { "sp_spa", "sp_spa", &SWIGTYPE_p_sp_spa,_proxy__wrap_new_sp_spa, swig_delete_sp_spa, swig_sp_spa_methods, swig_sp_spa_attributes, &swig_sp_spa_Sf_SwigStatic, swig_sp_spa_meta, swig_sp_spa_bases, swig_sp_spa_base_names };

static int _wrap_sp_spa_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_spa **arg1 = (sp_spa **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_spa_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_spa_create",1,"sp_spa **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_spa,0))){
    SWIG_fail_ptr("sp_spa_create",1,SWIGTYPE_p_p_sp_spa);
  }
  
  result = (int)sp_spa_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_spa_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_spa **arg1 = (sp_spa **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_spa_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_spa_destroy",1,"sp_spa **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_spa,0))){
    SWIG_fail_ptr("sp_spa_destroy",1,SWIGTYPE_p_p_sp_spa);
  }
  
  result = (int)sp_spa_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_spa_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_spa *arg2 = (sp_spa *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_spa_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_spa_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_spa_init",2,"sp_spa *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_spa_init",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_spa_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_spa,0))){
    SWIG_fail_ptr("sp_spa_init",2,SWIGTYPE_p_sp_spa);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_spa_init(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_spa_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_spa *arg2 = (sp_spa *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_spa_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_spa_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_spa_compute",2,"sp_spa *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_spa_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_spa_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_spa_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_spa,0))){
    SWIG_fail_ptr("sp_spa_compute",2,SWIGTYPE_p_sp_spa);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_spa_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_spa_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_spa_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sparec_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_sparec *arg1 = (sp_sparec *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_sparec::buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec::buf",1,"sp_sparec *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_sparec::buf",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_buf_set",1,SWIGTYPE_p_sp_sparec);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_sparec_buf_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->buf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sparec_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_sparec *arg1 = (sp_sparec *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_sparec::buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec::buf",1,"sp_sparec *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_buf_get",1,SWIGTYPE_p_sp_sparec);
  }
  
  result = (float *) ((arg1)->buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sparec_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_sparec *arg1 = (sp_sparec *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_sparec::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec::pos",1,"sp_sparec *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_sparec::pos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_pos_set",1,SWIGTYPE_p_sp_sparec);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_sparec_pos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sparec_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_sparec *arg1 = (sp_sparec *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_sparec::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec::pos",1,"sp_sparec *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_pos_get",1,SWIGTYPE_p_sp_sparec);
  }
  
  result =  ((arg1)->pos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sparec_bufsize_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_sparec *arg1 = (sp_sparec *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_sparec::bufsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec::bufsize",1,"sp_sparec *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_sparec::bufsize",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_bufsize_set",1,SWIGTYPE_p_sp_sparec);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_sparec_bufsize_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bufsize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sparec_bufsize_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_sparec *arg1 = (sp_sparec *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_sparec::bufsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec::bufsize",1,"sp_sparec *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_bufsize_get",1,SWIGTYPE_p_sp_sparec);
  }
  
  result =  ((arg1)->bufsize);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sparec_spa_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_sparec *arg1 = (sp_sparec *) 0 ;
  sp_audio *arg2 = (sp_audio *) 0 ;
  
  SWIG_check_num_args("sp_sparec::spa",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec::spa",1,"sp_sparec *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_sparec::spa",2,"sp_audio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_spa_set",1,SWIGTYPE_p_sp_sparec);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("sp_sparec_spa_set",2,SWIGTYPE_p_sp_audio);
  }
  
  if (arg1) (arg1)->spa = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sparec_spa_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_sparec *arg1 = (sp_sparec *) 0 ;
  sp_audio *result = 0 ;
  
  SWIG_check_num_args("sp_sparec::spa",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec::spa",1,"sp_sparec *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_spa_get",1,SWIGTYPE_p_sp_sparec);
  }
  
  result = (sp_audio *)& ((arg1)->spa);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_audio,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sparec_aux_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_sparec *arg1 = (sp_sparec *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_sparec::aux",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec::aux",1,"sp_sparec *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_sparec::aux",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_aux_set",1,SWIGTYPE_p_sp_sparec);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_sparec_aux_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->aux = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sparec_aux_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_sparec *arg1 = (sp_sparec *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_sparec::aux",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec::aux",1,"sp_sparec *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_aux_get",1,SWIGTYPE_p_sp_sparec);
  }
  
  result = (sp_auxdata *)& ((arg1)->aux);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_sparec(lua_State* L) {
  int SWIG_arg = 0;
  sp_sparec *result = 0 ;
  
  SWIG_check_num_args("sp_sparec::sp_sparec",0,0)
  result = (sp_sparec *)new sp_sparec();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_sparec,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_sparec(void *obj) {
sp_sparec *arg1 = (sp_sparec *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_sparec(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_sparec);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_sparec_attributes[] = {
    { "buf", _wrap_sp_sparec_buf_get, _wrap_sp_sparec_buf_set },
    { "pos", _wrap_sp_sparec_pos_get, _wrap_sp_sparec_pos_set },
    { "bufsize", _wrap_sp_sparec_bufsize_get, _wrap_sp_sparec_bufsize_set },
    { "spa", _wrap_sp_sparec_spa_get, _wrap_sp_sparec_spa_set },
    { "aux", _wrap_sp_sparec_aux_get, _wrap_sp_sparec_aux_set },
    {0,0,0}
};
static swig_lua_method swig_sp_sparec_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_sparec_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_sparec_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_sparec_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_sparec_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_sparec_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_sparec_Sf_SwigStatic = {
    "sp_sparec",
    swig_sp_sparec_Sf_SwigStatic_methods,
    swig_sp_sparec_Sf_SwigStatic_attributes,
    swig_sp_sparec_Sf_SwigStatic_constants,
    swig_sp_sparec_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_sparec_bases[] = {0};
static const char *swig_sp_sparec_base_names[] = {0};
static swig_lua_class _wrap_class_sp_sparec = { "sp_sparec", "sp_sparec", &SWIGTYPE_p_sp_sparec,_proxy__wrap_new_sp_sparec, swig_delete_sp_sparec, swig_sp_sparec_methods, swig_sp_sparec_attributes, &swig_sp_sparec_Sf_SwigStatic, swig_sp_sparec_meta, swig_sp_sparec_bases, swig_sp_sparec_base_names };

static int _wrap_sp_sparec_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_sparec **arg1 = (sp_sparec **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_sparec_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec_create",1,"sp_sparec **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_create",1,SWIGTYPE_p_p_sp_sparec);
  }
  
  result = (int)sp_sparec_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sparec_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_sparec **arg1 = (sp_sparec **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_sparec_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec_destroy",1,"sp_sparec **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_destroy",1,SWIGTYPE_p_p_sp_sparec);
  }
  
  result = (int)sp_sparec_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sparec_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_sparec *arg2 = (sp_sparec *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_sparec_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_sparec_init",2,"sp_sparec *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_sparec_init",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_sparec_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_init",2,SWIGTYPE_p_sp_sparec);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_sparec_init(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sparec_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_sparec *arg2 = (sp_sparec *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_sparec_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_sparec_compute",2,"sp_sparec *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_sparec_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_sparec_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_sparec_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_compute",2,SWIGTYPE_p_sp_sparec);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_sparec_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_sparec_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_sparec_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_sparec_close(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_sparec *arg2 = (sp_sparec *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_sparec_close",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_sparec_close",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_sparec_close",2,"sp_sparec *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_sparec_close",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_sparec,0))){
    SWIG_fail_ptr("sp_sparec_close",2,SWIGTYPE_p_sp_sparec);
  }
  
  result = (int)sp_sparec_close(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_streson::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::freq",1,"sp_streson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_streson::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_freq_set",1,SWIGTYPE_p_sp_streson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_streson::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::freq",1,"sp_streson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_freq_get",1,SWIGTYPE_p_sp_streson);
  }
  
  result = (float) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_fdbgain_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_streson::fdbgain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::fdbgain",1,"sp_streson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_streson::fdbgain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_fdbgain_set",1,SWIGTYPE_p_sp_streson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->fdbgain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_fdbgain_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_streson::fdbgain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::fdbgain",1,"sp_streson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_fdbgain_get",1,SWIGTYPE_p_sp_streson);
  }
  
  result = (float) ((arg1)->fdbgain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_LPdelay_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_streson::LPdelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::LPdelay",1,"sp_streson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_streson::LPdelay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_LPdelay_set",1,SWIGTYPE_p_sp_streson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->LPdelay = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_LPdelay_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_streson::LPdelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::LPdelay",1,"sp_streson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_LPdelay_get",1,SWIGTYPE_p_sp_streson);
  }
  
  result = (float) ((arg1)->LPdelay);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_APdelay_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_streson::APdelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::APdelay",1,"sp_streson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_streson::APdelay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_APdelay_set",1,SWIGTYPE_p_sp_streson);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->APdelay = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_APdelay_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_streson::APdelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::APdelay",1,"sp_streson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_APdelay_get",1,SWIGTYPE_p_sp_streson);
  }
  
  result = (float) ((arg1)->APdelay);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_Cdelay_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_streson::Cdelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::Cdelay",1,"sp_streson *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_streson::Cdelay",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_Cdelay_set",1,SWIGTYPE_p_sp_streson);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_streson_Cdelay_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->Cdelay = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_Cdelay_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_streson::Cdelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::Cdelay",1,"sp_streson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_Cdelay_get",1,SWIGTYPE_p_sp_streson);
  }
  
  result = (float *) ((arg1)->Cdelay);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_streson::buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::buf",1,"sp_streson *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_streson::buf",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_buf_set",1,SWIGTYPE_p_sp_streson);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_streson_buf_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->buf = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_streson::buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::buf",1,"sp_streson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_buf_get",1,SWIGTYPE_p_sp_streson);
  }
  
  result = (sp_auxdata *)& ((arg1)->buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_wpointer_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_streson::wpointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::wpointer",1,"sp_streson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_streson::wpointer",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_wpointer_set",1,SWIGTYPE_p_sp_streson);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->wpointer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_wpointer_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_streson::wpointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::wpointer",1,"sp_streson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_wpointer_get",1,SWIGTYPE_p_sp_streson);
  }
  
  result = (int) ((arg1)->wpointer);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_rpointer_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_streson::rpointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::rpointer",1,"sp_streson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_streson::rpointer",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_rpointer_set",1,SWIGTYPE_p_sp_streson);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rpointer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_rpointer_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_streson::rpointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::rpointer",1,"sp_streson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_rpointer_get",1,SWIGTYPE_p_sp_streson);
  }
  
  result = (int) ((arg1)->rpointer);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_size_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_streson::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::size",1,"sp_streson *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_streson::size",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_size_set",1,SWIGTYPE_p_sp_streson);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_size_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *arg1 = (sp_streson *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_streson::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson::size",1,"sp_streson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_size_get",1,SWIGTYPE_p_sp_streson);
  }
  
  result = (int) ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_streson(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson *result = 0 ;
  
  SWIG_check_num_args("sp_streson::sp_streson",0,0)
  result = (sp_streson *)new sp_streson();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_streson,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_streson(void *obj) {
sp_streson *arg1 = (sp_streson *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_streson(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_streson);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_streson_attributes[] = {
    { "freq", _wrap_sp_streson_freq_get, _wrap_sp_streson_freq_set },
    { "fdbgain", _wrap_sp_streson_fdbgain_get, _wrap_sp_streson_fdbgain_set },
    { "LPdelay", _wrap_sp_streson_LPdelay_get, _wrap_sp_streson_LPdelay_set },
    { "APdelay", _wrap_sp_streson_APdelay_get, _wrap_sp_streson_APdelay_set },
    { "Cdelay", _wrap_sp_streson_Cdelay_get, _wrap_sp_streson_Cdelay_set },
    { "buf", _wrap_sp_streson_buf_get, _wrap_sp_streson_buf_set },
    { "wpointer", _wrap_sp_streson_wpointer_get, _wrap_sp_streson_wpointer_set },
    { "rpointer", _wrap_sp_streson_rpointer_get, _wrap_sp_streson_rpointer_set },
    { "size", _wrap_sp_streson_size_get, _wrap_sp_streson_size_set },
    {0,0,0}
};
static swig_lua_method swig_sp_streson_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_streson_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_streson_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_streson_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_streson_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_streson_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_streson_Sf_SwigStatic = {
    "sp_streson",
    swig_sp_streson_Sf_SwigStatic_methods,
    swig_sp_streson_Sf_SwigStatic_attributes,
    swig_sp_streson_Sf_SwigStatic_constants,
    swig_sp_streson_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_streson_bases[] = {0};
static const char *swig_sp_streson_base_names[] = {0};
static swig_lua_class _wrap_class_sp_streson = { "sp_streson", "sp_streson", &SWIGTYPE_p_sp_streson,_proxy__wrap_new_sp_streson, swig_delete_sp_streson, swig_sp_streson_methods, swig_sp_streson_attributes, &swig_sp_streson_Sf_SwigStatic, swig_sp_streson_meta, swig_sp_streson_bases, swig_sp_streson_base_names };

static int _wrap_sp_streson_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson **arg1 = (sp_streson **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_streson_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson_create",1,"sp_streson **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_create",1,SWIGTYPE_p_p_sp_streson);
  }
  
  result = (int)sp_streson_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_streson **arg1 = (sp_streson **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_streson_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson_destroy",1,"sp_streson **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_destroy",1,SWIGTYPE_p_p_sp_streson);
  }
  
  result = (int)sp_streson_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_streson *arg2 = (sp_streson *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_streson_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_streson_init",2,"sp_streson *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_streson_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_init",2,SWIGTYPE_p_sp_streson);
  }
  
  result = (int)sp_streson_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_streson_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_streson *arg2 = (sp_streson *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_streson_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_streson_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_streson_compute",2,"sp_streson *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_streson_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_streson_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_streson_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_streson,0))){
    SWIG_fail_ptr("sp_streson_compute",2,SWIGTYPE_p_sp_streson);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_streson_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_streson_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_streson_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_switch_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_switch *arg1 = (sp_switch *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_switch::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_switch::mode",1,"sp_switch *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_switch::mode",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_switch,0))){
    SWIG_fail_ptr("sp_switch_mode_set",1,SWIGTYPE_p_sp_switch);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_switch_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_switch *arg1 = (sp_switch *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_switch::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_switch::mode",1,"sp_switch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_switch,0))){
    SWIG_fail_ptr("sp_switch_mode_get",1,SWIGTYPE_p_sp_switch);
  }
  
  result = (float) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_switch(lua_State* L) {
  int SWIG_arg = 0;
  sp_switch *result = 0 ;
  
  SWIG_check_num_args("sp_switch::sp_switch",0,0)
  result = (sp_switch *)new sp_switch();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_switch,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_switch(void *obj) {
sp_switch *arg1 = (sp_switch *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_switch(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_switch);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_switch_attributes[] = {
    { "mode", _wrap_sp_switch_mode_get, _wrap_sp_switch_mode_set },
    {0,0,0}
};
static swig_lua_method swig_sp_switch_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_switch_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_switch_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_switch_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_switch_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_switch_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_switch_Sf_SwigStatic = {
    "sp_switch",
    swig_sp_switch_Sf_SwigStatic_methods,
    swig_sp_switch_Sf_SwigStatic_attributes,
    swig_sp_switch_Sf_SwigStatic_constants,
    swig_sp_switch_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_switch_bases[] = {0};
static const char *swig_sp_switch_base_names[] = {0};
static swig_lua_class _wrap_class_sp_switch = { "sp_switch", "sp_switch", &SWIGTYPE_p_sp_switch,_proxy__wrap_new_sp_switch, swig_delete_sp_switch, swig_sp_switch_methods, swig_sp_switch_attributes, &swig_sp_switch_Sf_SwigStatic, swig_sp_switch_meta, swig_sp_switch_bases, swig_sp_switch_base_names };

static int _wrap_sp_switch_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_switch **arg1 = (sp_switch **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_switch_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_switch_create",1,"sp_switch **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_switch,0))){
    SWIG_fail_ptr("sp_switch_create",1,SWIGTYPE_p_p_sp_switch);
  }
  
  result = (int)sp_switch_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_switch_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_switch **arg1 = (sp_switch **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_switch_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_switch_destroy",1,"sp_switch **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_switch,0))){
    SWIG_fail_ptr("sp_switch_destroy",1,SWIGTYPE_p_p_sp_switch);
  }
  
  result = (int)sp_switch_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_switch_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_switch *arg2 = (sp_switch *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_switch_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_switch_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_switch_init",2,"sp_switch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_switch_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_switch,0))){
    SWIG_fail_ptr("sp_switch_init",2,SWIGTYPE_p_sp_switch);
  }
  
  result = (int)sp_switch_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_switch_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_switch *arg2 = (sp_switch *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_switch_compute",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_switch_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_switch_compute",2,"sp_switch *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_switch_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_switch_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_switch_compute",5,"float *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("sp_switch_compute",6,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_switch_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_switch,0))){
    SWIG_fail_ptr("sp_switch_compute",2,SWIGTYPE_p_sp_switch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_switch_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_switch_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_switch_compute",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_switch_compute",6,SWIGTYPE_p_float);
  }
  
  result = (int)sp_switch_compute(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_sig_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *arg1 = (sp_tabread *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tabread::sig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread::sig",1,"sp_tabread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tabread::sig",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_sig_set",1,SWIGTYPE_p_sp_tabread);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sig = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_sig_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *arg1 = (sp_tabread *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tabread::sig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread::sig",1,"sp_tabread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_sig_get",1,SWIGTYPE_p_sp_tabread);
  }
  
  result = (float) ((arg1)->sig);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_index_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *arg1 = (sp_tabread *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tabread::index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread::index",1,"sp_tabread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tabread::index",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_index_set",1,SWIGTYPE_p_sp_tabread);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->index = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_index_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *arg1 = (sp_tabread *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tabread::index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread::index",1,"sp_tabread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_index_get",1,SWIGTYPE_p_sp_tabread);
  }
  
  result = (float) ((arg1)->index);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *arg1 = (sp_tabread *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tabread::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread::mode",1,"sp_tabread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tabread::mode",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_mode_set",1,SWIGTYPE_p_sp_tabread);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *arg1 = (sp_tabread *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tabread::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread::mode",1,"sp_tabread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_mode_get",1,SWIGTYPE_p_sp_tabread);
  }
  
  result = (float) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *arg1 = (sp_tabread *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tabread::offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread::offset",1,"sp_tabread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tabread::offset",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_offset_set",1,SWIGTYPE_p_sp_tabread);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *arg1 = (sp_tabread *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tabread::offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread::offset",1,"sp_tabread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_offset_get",1,SWIGTYPE_p_sp_tabread);
  }
  
  result = (float) ((arg1)->offset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_wrap_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *arg1 = (sp_tabread *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tabread::wrap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread::wrap",1,"sp_tabread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tabread::wrap",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_wrap_set",1,SWIGTYPE_p_sp_tabread);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->wrap = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_wrap_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *arg1 = (sp_tabread *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tabread::wrap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread::wrap",1,"sp_tabread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_wrap_get",1,SWIGTYPE_p_sp_tabread);
  }
  
  result = (float) ((arg1)->wrap);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_mul_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *arg1 = (sp_tabread *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tabread::mul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread::mul",1,"sp_tabread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tabread::mul",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_mul_set",1,SWIGTYPE_p_sp_tabread);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->mul = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_mul_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *arg1 = (sp_tabread *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tabread::mul",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread::mul",1,"sp_tabread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_mul_get",1,SWIGTYPE_p_sp_tabread);
  }
  
  result = (float) ((arg1)->mul);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_ft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *arg1 = (sp_tabread *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_tabread::ft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread::ft",1,"sp_tabread *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tabread::ft",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_ft_set",1,SWIGTYPE_p_sp_tabread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_tabread_ft_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_ft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *arg1 = (sp_tabread *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_tabread::ft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread::ft",1,"sp_tabread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_ft_get",1,SWIGTYPE_p_sp_tabread);
  }
  
  result = (sp_ftbl *) ((arg1)->ft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_tabread(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread *result = 0 ;
  
  SWIG_check_num_args("sp_tabread::sp_tabread",0,0)
  result = (sp_tabread *)new sp_tabread();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tabread,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_tabread(void *obj) {
sp_tabread *arg1 = (sp_tabread *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_tabread(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_tabread);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_tabread_attributes[] = {
    { "sig", _wrap_sp_tabread_sig_get, _wrap_sp_tabread_sig_set },
    { "index", _wrap_sp_tabread_index_get, _wrap_sp_tabread_index_set },
    { "mode", _wrap_sp_tabread_mode_get, _wrap_sp_tabread_mode_set },
    { "offset", _wrap_sp_tabread_offset_get, _wrap_sp_tabread_offset_set },
    { "wrap", _wrap_sp_tabread_wrap_get, _wrap_sp_tabread_wrap_set },
    { "mul", _wrap_sp_tabread_mul_get, _wrap_sp_tabread_mul_set },
    { "ft", _wrap_sp_tabread_ft_get, _wrap_sp_tabread_ft_set },
    {0,0,0}
};
static swig_lua_method swig_sp_tabread_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_tabread_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_tabread_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_tabread_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_tabread_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_tabread_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_tabread_Sf_SwigStatic = {
    "sp_tabread",
    swig_sp_tabread_Sf_SwigStatic_methods,
    swig_sp_tabread_Sf_SwigStatic_attributes,
    swig_sp_tabread_Sf_SwigStatic_constants,
    swig_sp_tabread_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_tabread_bases[] = {0};
static const char *swig_sp_tabread_base_names[] = {0};
static swig_lua_class _wrap_class_sp_tabread = { "sp_tabread", "sp_tabread", &SWIGTYPE_p_sp_tabread,_proxy__wrap_new_sp_tabread, swig_delete_sp_tabread, swig_sp_tabread_methods, swig_sp_tabread_attributes, &swig_sp_tabread_Sf_SwigStatic, swig_sp_tabread_meta, swig_sp_tabread_bases, swig_sp_tabread_base_names };

static int _wrap_sp_tabread_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread **arg1 = (sp_tabread **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tabread_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread_create",1,"sp_tabread **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_create",1,SWIGTYPE_p_p_sp_tabread);
  }
  
  result = (int)sp_tabread_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_tabread **arg1 = (sp_tabread **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tabread_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread_destroy",1,"sp_tabread **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_destroy",1,SWIGTYPE_p_p_sp_tabread);
  }
  
  result = (int)sp_tabread_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tabread *arg2 = (sp_tabread *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("sp_tabread_init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tabread_init",2,"sp_tabread *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tabread_init",3,"sp_ftbl *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("sp_tabread_init",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tabread_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_init",2,SWIGTYPE_p_sp_tabread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_tabread_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)sp_tabread_init(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tabread_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tabread *arg2 = (sp_tabread *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tabread_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tabread_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tabread_compute",2,"sp_tabread *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tabread_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tabread_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tabread_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tabread,0))){
    SWIG_fail_ptr("sp_tabread_compute",2,SWIGTYPE_p_sp_tabread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tabread_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tabread_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_tabread_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_value_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tadsr::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::value",1,"sp_tadsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tadsr::value",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_value_set",1,SWIGTYPE_p_sp_tadsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->value = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_value_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tadsr::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::value",1,"sp_tadsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_value_get",1,SWIGTYPE_p_sp_tadsr);
  }
  
  result = (float) ((arg1)->value);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_target_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tadsr::target",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::target",1,"sp_tadsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tadsr::target",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_target_set",1,SWIGTYPE_p_sp_tadsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->target = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_target_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tadsr::target",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::target",1,"sp_tadsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_target_get",1,SWIGTYPE_p_sp_tadsr);
  }
  
  result = (float) ((arg1)->target);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_rate_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tadsr::rate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::rate",1,"sp_tadsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tadsr::rate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_rate_set",1,SWIGTYPE_p_sp_tadsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_rate_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tadsr::rate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::rate",1,"sp_tadsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_rate_get",1,SWIGTYPE_p_sp_tadsr);
  }
  
  result = (float) ((arg1)->rate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_state_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_tadsr::state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::state",1,"sp_tadsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tadsr::state",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_state_set",1,SWIGTYPE_p_sp_tadsr);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_state_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tadsr::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::state",1,"sp_tadsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_state_get",1,SWIGTYPE_p_sp_tadsr);
  }
  
  result = (int) ((arg1)->state);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_attackRate_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tadsr::attackRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::attackRate",1,"sp_tadsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tadsr::attackRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_attackRate_set",1,SWIGTYPE_p_sp_tadsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->attackRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_attackRate_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tadsr::attackRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::attackRate",1,"sp_tadsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_attackRate_get",1,SWIGTYPE_p_sp_tadsr);
  }
  
  result = (float) ((arg1)->attackRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_decayRate_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tadsr::decayRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::decayRate",1,"sp_tadsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tadsr::decayRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_decayRate_set",1,SWIGTYPE_p_sp_tadsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->decayRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_decayRate_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tadsr::decayRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::decayRate",1,"sp_tadsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_decayRate_get",1,SWIGTYPE_p_sp_tadsr);
  }
  
  result = (float) ((arg1)->decayRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_sustainLevel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tadsr::sustainLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::sustainLevel",1,"sp_tadsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tadsr::sustainLevel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_sustainLevel_set",1,SWIGTYPE_p_sp_tadsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sustainLevel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_sustainLevel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tadsr::sustainLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::sustainLevel",1,"sp_tadsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_sustainLevel_get",1,SWIGTYPE_p_sp_tadsr);
  }
  
  result = (float) ((arg1)->sustainLevel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_releaseRate_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tadsr::releaseRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::releaseRate",1,"sp_tadsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tadsr::releaseRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_releaseRate_set",1,SWIGTYPE_p_sp_tadsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->releaseRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_releaseRate_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tadsr::releaseRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::releaseRate",1,"sp_tadsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_releaseRate_get",1,SWIGTYPE_p_sp_tadsr);
  }
  
  result = (float) ((arg1)->releaseRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_atk_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tadsr::atk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::atk",1,"sp_tadsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tadsr::atk",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_atk_set",1,SWIGTYPE_p_sp_tadsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->atk = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_atk_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tadsr::atk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::atk",1,"sp_tadsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_atk_get",1,SWIGTYPE_p_sp_tadsr);
  }
  
  result = (float) ((arg1)->atk);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_rel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tadsr::rel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::rel",1,"sp_tadsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tadsr::rel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_rel_set",1,SWIGTYPE_p_sp_tadsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_rel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tadsr::rel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::rel",1,"sp_tadsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_rel_get",1,SWIGTYPE_p_sp_tadsr);
  }
  
  result = (float) ((arg1)->rel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_sus_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tadsr::sus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::sus",1,"sp_tadsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tadsr::sus",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_sus_set",1,SWIGTYPE_p_sp_tadsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sus = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_sus_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tadsr::sus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::sus",1,"sp_tadsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_sus_get",1,SWIGTYPE_p_sp_tadsr);
  }
  
  result = (float) ((arg1)->sus);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_dec_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tadsr::dec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::dec",1,"sp_tadsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tadsr::dec",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_dec_set",1,SWIGTYPE_p_sp_tadsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_dec_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tadsr::dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::dec",1,"sp_tadsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_dec_get",1,SWIGTYPE_p_sp_tadsr);
  }
  
  result = (float) ((arg1)->dec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_tadsr::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::mode",1,"sp_tadsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tadsr::mode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_mode_set",1,SWIGTYPE_p_sp_tadsr);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *arg1 = (sp_tadsr *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tadsr::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr::mode",1,"sp_tadsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_mode_get",1,SWIGTYPE_p_sp_tadsr);
  }
  
  result = (int) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_tadsr(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr *result = 0 ;
  
  SWIG_check_num_args("sp_tadsr::sp_tadsr",0,0)
  result = (sp_tadsr *)new sp_tadsr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tadsr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_tadsr(void *obj) {
sp_tadsr *arg1 = (sp_tadsr *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_tadsr(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_tadsr);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_tadsr_attributes[] = {
    { "value", _wrap_sp_tadsr_value_get, _wrap_sp_tadsr_value_set },
    { "target", _wrap_sp_tadsr_target_get, _wrap_sp_tadsr_target_set },
    { "rate", _wrap_sp_tadsr_rate_get, _wrap_sp_tadsr_rate_set },
    { "state", _wrap_sp_tadsr_state_get, _wrap_sp_tadsr_state_set },
    { "attackRate", _wrap_sp_tadsr_attackRate_get, _wrap_sp_tadsr_attackRate_set },
    { "decayRate", _wrap_sp_tadsr_decayRate_get, _wrap_sp_tadsr_decayRate_set },
    { "sustainLevel", _wrap_sp_tadsr_sustainLevel_get, _wrap_sp_tadsr_sustainLevel_set },
    { "releaseRate", _wrap_sp_tadsr_releaseRate_get, _wrap_sp_tadsr_releaseRate_set },
    { "atk", _wrap_sp_tadsr_atk_get, _wrap_sp_tadsr_atk_set },
    { "rel", _wrap_sp_tadsr_rel_get, _wrap_sp_tadsr_rel_set },
    { "sus", _wrap_sp_tadsr_sus_get, _wrap_sp_tadsr_sus_set },
    { "dec", _wrap_sp_tadsr_dec_get, _wrap_sp_tadsr_dec_set },
    { "mode", _wrap_sp_tadsr_mode_get, _wrap_sp_tadsr_mode_set },
    {0,0,0}
};
static swig_lua_method swig_sp_tadsr_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_tadsr_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_tadsr_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_tadsr_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_tadsr_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_tadsr_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_tadsr_Sf_SwigStatic = {
    "sp_tadsr",
    swig_sp_tadsr_Sf_SwigStatic_methods,
    swig_sp_tadsr_Sf_SwigStatic_attributes,
    swig_sp_tadsr_Sf_SwigStatic_constants,
    swig_sp_tadsr_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_tadsr_bases[] = {0};
static const char *swig_sp_tadsr_base_names[] = {0};
static swig_lua_class _wrap_class_sp_tadsr = { "sp_tadsr", "sp_tadsr", &SWIGTYPE_p_sp_tadsr,_proxy__wrap_new_sp_tadsr, swig_delete_sp_tadsr, swig_sp_tadsr_methods, swig_sp_tadsr_attributes, &swig_sp_tadsr_Sf_SwigStatic, swig_sp_tadsr_meta, swig_sp_tadsr_bases, swig_sp_tadsr_base_names };

static int _wrap_sp_tadsr_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr **arg1 = (sp_tadsr **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tadsr_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr_create",1,"sp_tadsr **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_create",1,SWIGTYPE_p_p_sp_tadsr);
  }
  
  result = (int)sp_tadsr_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_tadsr **arg1 = (sp_tadsr **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tadsr_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr_destroy",1,"sp_tadsr **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_destroy",1,SWIGTYPE_p_p_sp_tadsr);
  }
  
  result = (int)sp_tadsr_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tadsr *arg2 = (sp_tadsr *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tadsr_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tadsr_init",2,"sp_tadsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tadsr_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_init",2,SWIGTYPE_p_sp_tadsr);
  }
  
  result = (int)sp_tadsr_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tadsr_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tadsr *arg2 = (sp_tadsr *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tadsr_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tadsr_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tadsr_compute",2,"sp_tadsr *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tadsr_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tadsr_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tadsr_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tadsr,0))){
    SWIG_fail_ptr("sp_tadsr_compute",2,SWIGTYPE_p_sp_tadsr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tadsr_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tadsr_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_tadsr_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_quality_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_talkbox::quality",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::quality",1,"sp_talkbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_talkbox::quality",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_quality_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->quality = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_quality_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_talkbox::quality",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::quality",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_quality_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float) ((arg1)->quality);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_d0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_talkbox::d0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::d0",1,"sp_talkbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_talkbox::d0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_d0_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->d0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_d0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_talkbox::d0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::d0",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_d0_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float) ((arg1)->d0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_d1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_talkbox::d1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::d1",1,"sp_talkbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_talkbox::d1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_d1_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->d1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_d1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_talkbox::d1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::d1",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_d1_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float) ((arg1)->d1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_d2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_talkbox::d2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::d2",1,"sp_talkbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_talkbox::d2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_d2_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->d2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_d2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_talkbox::d2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::d2",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_d2_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float) ((arg1)->d2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_d3_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_talkbox::d3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::d3",1,"sp_talkbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_talkbox::d3",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_d3_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->d3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_d3_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_talkbox::d3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::d3",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_d3_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float) ((arg1)->d3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_d4_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_talkbox::d4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::d4",1,"sp_talkbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_talkbox::d4",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_d4_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->d4 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_d4_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_talkbox::d4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::d4",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_d4_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float) ((arg1)->d4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_u0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_talkbox::u0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::u0",1,"sp_talkbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_talkbox::u0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_u0_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->u0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_u0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_talkbox::u0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::u0",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_u0_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float) ((arg1)->u0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_u1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_talkbox::u1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::u1",1,"sp_talkbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_talkbox::u1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_u1_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->u1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_u1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_talkbox::u1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::u1",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_u1_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float) ((arg1)->u1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_u2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_talkbox::u2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::u2",1,"sp_talkbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_talkbox::u2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_u2_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->u2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_u2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_talkbox::u2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::u2",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_u2_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float) ((arg1)->u2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_u3_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_talkbox::u3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::u3",1,"sp_talkbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_talkbox::u3",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_u3_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->u3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_u3_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_talkbox::u3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::u3",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_u3_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float) ((arg1)->u3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_u4_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_talkbox::u4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::u4",1,"sp_talkbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_talkbox::u4",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_u4_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->u4 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_u4_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_talkbox::u4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::u4",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_u4_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float) ((arg1)->u4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_FX_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_talkbox::FX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::FX",1,"sp_talkbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_talkbox::FX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_FX_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->FX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_FX_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_talkbox::FX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::FX",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_FX_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float) ((arg1)->FX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_emphasis_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_talkbox::emphasis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::emphasis",1,"sp_talkbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_talkbox::emphasis",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_emphasis_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->emphasis = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_emphasis_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_talkbox::emphasis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::emphasis",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_emphasis_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float) ((arg1)->emphasis);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_car0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_talkbox::car0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::car0",1,"sp_talkbox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_talkbox::car0",2,"float [1600]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_car0_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_talkbox_car0_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->car0;
    for (ii = 0; ii < (size_t)1600; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_car0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_talkbox::car0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::car0",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_car0_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float *)(float *) ((arg1)->car0);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_car1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_talkbox::car1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::car1",1,"sp_talkbox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_talkbox::car1",2,"float [1600]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_car1_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_talkbox_car1_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->car1;
    for (ii = 0; ii < (size_t)1600; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_car1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_talkbox::car1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::car1",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_car1_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float *)(float *) ((arg1)->car1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_window_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_talkbox::window",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::window",1,"sp_talkbox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_talkbox::window",2,"float [1600]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_window_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_talkbox_window_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->window;
    for (ii = 0; ii < (size_t)1600; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_window_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_talkbox::window",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::window",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_window_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float *)(float *) ((arg1)->window);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_buf0_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_talkbox::buf0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::buf0",1,"sp_talkbox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_talkbox::buf0",2,"float [1600]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_buf0_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_talkbox_buf0_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->buf0;
    for (ii = 0; ii < (size_t)1600; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_buf0_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_talkbox::buf0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::buf0",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_buf0_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float *)(float *) ((arg1)->buf0);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_buf1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("sp_talkbox::buf1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::buf1",1,"sp_talkbox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_talkbox::buf1",2,"float [1600]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_buf1_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_talkbox_buf1_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->buf1;
    for (ii = 0; ii < (size_t)1600; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_buf1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_talkbox::buf1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::buf1",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_buf1_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (float *)(float *) ((arg1)->buf1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_K_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_talkbox::K",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::K",1,"sp_talkbox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_talkbox::K",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_K_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_talkbox_K_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->K = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_K_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_talkbox::K",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::K",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_K_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result =  ((arg1)->K);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_N_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_talkbox::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::N",1,"sp_talkbox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_talkbox::N",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_N_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_talkbox_N_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_N_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_talkbox::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::N",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_N_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result =  ((arg1)->N);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_O_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_talkbox::O",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::O",1,"sp_talkbox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_talkbox::O",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_O_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_talkbox_O_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->O = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_O_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_talkbox::O",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::O",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_O_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result =  ((arg1)->O);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_talkbox::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::pos",1,"sp_talkbox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_talkbox::pos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_pos_set",1,SWIGTYPE_p_sp_talkbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_talkbox_pos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *arg1 = (sp_talkbox *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_talkbox::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox::pos",1,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_pos_get",1,SWIGTYPE_p_sp_talkbox);
  }
  
  result =  ((arg1)->pos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_talkbox(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox *result = 0 ;
  
  SWIG_check_num_args("sp_talkbox::sp_talkbox",0,0)
  result = (sp_talkbox *)new sp_talkbox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_talkbox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_talkbox(void *obj) {
sp_talkbox *arg1 = (sp_talkbox *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_talkbox(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_talkbox);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_talkbox_attributes[] = {
    { "quality", _wrap_sp_talkbox_quality_get, _wrap_sp_talkbox_quality_set },
    { "d0", _wrap_sp_talkbox_d0_get, _wrap_sp_talkbox_d0_set },
    { "d1", _wrap_sp_talkbox_d1_get, _wrap_sp_talkbox_d1_set },
    { "d2", _wrap_sp_talkbox_d2_get, _wrap_sp_talkbox_d2_set },
    { "d3", _wrap_sp_talkbox_d3_get, _wrap_sp_talkbox_d3_set },
    { "d4", _wrap_sp_talkbox_d4_get, _wrap_sp_talkbox_d4_set },
    { "u0", _wrap_sp_talkbox_u0_get, _wrap_sp_talkbox_u0_set },
    { "u1", _wrap_sp_talkbox_u1_get, _wrap_sp_talkbox_u1_set },
    { "u2", _wrap_sp_talkbox_u2_get, _wrap_sp_talkbox_u2_set },
    { "u3", _wrap_sp_talkbox_u3_get, _wrap_sp_talkbox_u3_set },
    { "u4", _wrap_sp_talkbox_u4_get, _wrap_sp_talkbox_u4_set },
    { "FX", _wrap_sp_talkbox_FX_get, _wrap_sp_talkbox_FX_set },
    { "emphasis", _wrap_sp_talkbox_emphasis_get, _wrap_sp_talkbox_emphasis_set },
    { "car0", _wrap_sp_talkbox_car0_get, _wrap_sp_talkbox_car0_set },
    { "car1", _wrap_sp_talkbox_car1_get, _wrap_sp_talkbox_car1_set },
    { "window", _wrap_sp_talkbox_window_get, _wrap_sp_talkbox_window_set },
    { "buf0", _wrap_sp_talkbox_buf0_get, _wrap_sp_talkbox_buf0_set },
    { "buf1", _wrap_sp_talkbox_buf1_get, _wrap_sp_talkbox_buf1_set },
    { "K", _wrap_sp_talkbox_K_get, _wrap_sp_talkbox_K_set },
    { "N", _wrap_sp_talkbox_N_get, _wrap_sp_talkbox_N_set },
    { "O", _wrap_sp_talkbox_O_get, _wrap_sp_talkbox_O_set },
    { "pos", _wrap_sp_talkbox_pos_get, _wrap_sp_talkbox_pos_set },
    {0,0,0}
};
static swig_lua_method swig_sp_talkbox_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_talkbox_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_talkbox_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_talkbox_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_talkbox_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_talkbox_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_talkbox_Sf_SwigStatic = {
    "sp_talkbox",
    swig_sp_talkbox_Sf_SwigStatic_methods,
    swig_sp_talkbox_Sf_SwigStatic_attributes,
    swig_sp_talkbox_Sf_SwigStatic_constants,
    swig_sp_talkbox_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_talkbox_bases[] = {0};
static const char *swig_sp_talkbox_base_names[] = {0};
static swig_lua_class _wrap_class_sp_talkbox = { "sp_talkbox", "sp_talkbox", &SWIGTYPE_p_sp_talkbox,_proxy__wrap_new_sp_talkbox, swig_delete_sp_talkbox, swig_sp_talkbox_methods, swig_sp_talkbox_attributes, &swig_sp_talkbox_Sf_SwigStatic, swig_sp_talkbox_meta, swig_sp_talkbox_bases, swig_sp_talkbox_base_names };

static int _wrap_sp_talkbox_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox **arg1 = (sp_talkbox **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_talkbox_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox_create",1,"sp_talkbox **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_create",1,SWIGTYPE_p_p_sp_talkbox);
  }
  
  result = (int)sp_talkbox_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_talkbox **arg1 = (sp_talkbox **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_talkbox_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox_destroy",1,"sp_talkbox **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_destroy",1,SWIGTYPE_p_p_sp_talkbox);
  }
  
  result = (int)sp_talkbox_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_talkbox *arg2 = (sp_talkbox *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_talkbox_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_talkbox_init",2,"sp_talkbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_talkbox_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_init",2,SWIGTYPE_p_sp_talkbox);
  }
  
  result = (int)sp_talkbox_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_talkbox_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_talkbox *arg2 = (sp_talkbox *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_talkbox_compute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_talkbox_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_talkbox_compute",2,"sp_talkbox *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_talkbox_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_talkbox_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_talkbox_compute",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_talkbox_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_talkbox,0))){
    SWIG_fail_ptr("sp_talkbox_compute",2,SWIGTYPE_p_sp_talkbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_talkbox_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_talkbox_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_talkbox_compute",5,SWIGTYPE_p_float);
  }
  
  result = (int)sp_talkbox_compute(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tblrec_ft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tblrec *arg1 = (sp_tblrec *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_tblrec::ft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tblrec::ft",1,"sp_tblrec *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tblrec::ft",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tblrec,0))){
    SWIG_fail_ptr("sp_tblrec_ft_set",1,SWIGTYPE_p_sp_tblrec);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_tblrec_ft_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tblrec_ft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tblrec *arg1 = (sp_tblrec *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_tblrec::ft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tblrec::ft",1,"sp_tblrec *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tblrec,0))){
    SWIG_fail_ptr("sp_tblrec_ft_get",1,SWIGTYPE_p_sp_tblrec);
  }
  
  result = (sp_ftbl *) ((arg1)->ft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tblrec_index_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tblrec *arg1 = (sp_tblrec *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tblrec::index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tblrec::index",1,"sp_tblrec *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tblrec::index",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tblrec,0))){
    SWIG_fail_ptr("sp_tblrec_index_set",1,SWIGTYPE_p_sp_tblrec);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tblrec_index_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->index = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tblrec_index_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tblrec *arg1 = (sp_tblrec *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tblrec::index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tblrec::index",1,"sp_tblrec *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tblrec,0))){
    SWIG_fail_ptr("sp_tblrec_index_get",1,SWIGTYPE_p_sp_tblrec);
  }
  
  result =  ((arg1)->index);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tblrec_record_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tblrec *arg1 = (sp_tblrec *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_tblrec::record",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tblrec::record",1,"sp_tblrec *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tblrec::record",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tblrec,0))){
    SWIG_fail_ptr("sp_tblrec_record_set",1,SWIGTYPE_p_sp_tblrec);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->record = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tblrec_record_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tblrec *arg1 = (sp_tblrec *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tblrec::record",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tblrec::record",1,"sp_tblrec *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tblrec,0))){
    SWIG_fail_ptr("sp_tblrec_record_get",1,SWIGTYPE_p_sp_tblrec);
  }
  
  result = (int) ((arg1)->record);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_tblrec(lua_State* L) {
  int SWIG_arg = 0;
  sp_tblrec *result = 0 ;
  
  SWIG_check_num_args("sp_tblrec::sp_tblrec",0,0)
  result = (sp_tblrec *)new sp_tblrec();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tblrec,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_tblrec(void *obj) {
sp_tblrec *arg1 = (sp_tblrec *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_tblrec(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_tblrec);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_tblrec_attributes[] = {
    { "ft", _wrap_sp_tblrec_ft_get, _wrap_sp_tblrec_ft_set },
    { "index", _wrap_sp_tblrec_index_get, _wrap_sp_tblrec_index_set },
    { "record", _wrap_sp_tblrec_record_get, _wrap_sp_tblrec_record_set },
    {0,0,0}
};
static swig_lua_method swig_sp_tblrec_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_tblrec_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_tblrec_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_tblrec_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_tblrec_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_tblrec_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_tblrec_Sf_SwigStatic = {
    "sp_tblrec",
    swig_sp_tblrec_Sf_SwigStatic_methods,
    swig_sp_tblrec_Sf_SwigStatic_attributes,
    swig_sp_tblrec_Sf_SwigStatic_constants,
    swig_sp_tblrec_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_tblrec_bases[] = {0};
static const char *swig_sp_tblrec_base_names[] = {0};
static swig_lua_class _wrap_class_sp_tblrec = { "sp_tblrec", "sp_tblrec", &SWIGTYPE_p_sp_tblrec,_proxy__wrap_new_sp_tblrec, swig_delete_sp_tblrec, swig_sp_tblrec_methods, swig_sp_tblrec_attributes, &swig_sp_tblrec_Sf_SwigStatic, swig_sp_tblrec_meta, swig_sp_tblrec_bases, swig_sp_tblrec_base_names };

static int _wrap_sp_tblrec_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_tblrec **arg1 = (sp_tblrec **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tblrec_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tblrec_create",1,"sp_tblrec **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tblrec,0))){
    SWIG_fail_ptr("sp_tblrec_create",1,SWIGTYPE_p_p_sp_tblrec);
  }
  
  result = (int)sp_tblrec_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tblrec_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_tblrec **arg1 = (sp_tblrec **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tblrec_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tblrec_destroy",1,"sp_tblrec **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tblrec,0))){
    SWIG_fail_ptr("sp_tblrec_destroy",1,SWIGTYPE_p_p_sp_tblrec);
  }
  
  result = (int)sp_tblrec_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tblrec_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tblrec *arg2 = (sp_tblrec *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tblrec_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tblrec_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tblrec_init",2,"sp_tblrec *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tblrec_init",3,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tblrec_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tblrec,0))){
    SWIG_fail_ptr("sp_tblrec_init",2,SWIGTYPE_p_sp_tblrec);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_tblrec_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  result = (int)sp_tblrec_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tblrec_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tblrec *arg2 = (sp_tblrec *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tblrec_compute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tblrec_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tblrec_compute",2,"sp_tblrec *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tblrec_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tblrec_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_tblrec_compute",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tblrec_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tblrec,0))){
    SWIG_fail_ptr("sp_tblrec_compute",2,SWIGTYPE_p_sp_tblrec);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tblrec_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tblrec_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tblrec_compute",5,SWIGTYPE_p_float);
  }
  
  result = (int)sp_tblrec_compute(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_fco_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tbvcf::fco",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::fco",1,"sp_tbvcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tbvcf::fco",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_fco_set",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->fco = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_fco_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tbvcf::fco",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::fco",1,"sp_tbvcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_fco_get",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  result = (float) ((arg1)->fco);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_res_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tbvcf::res",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::res",1,"sp_tbvcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tbvcf::res",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_res_set",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->res = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_res_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tbvcf::res",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::res",1,"sp_tbvcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_res_get",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  result = (float) ((arg1)->res);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_dist_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tbvcf::dist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::dist",1,"sp_tbvcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tbvcf::dist",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_dist_set",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dist = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_dist_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tbvcf::dist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::dist",1,"sp_tbvcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_dist_get",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  result = (float) ((arg1)->dist);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_asym_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tbvcf::asym",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::asym",1,"sp_tbvcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tbvcf::asym",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_asym_set",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->asym = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_asym_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tbvcf::asym",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::asym",1,"sp_tbvcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_asym_get",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  result = (float) ((arg1)->asym);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_iskip_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tbvcf::iskip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::iskip",1,"sp_tbvcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tbvcf::iskip",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_iskip_set",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->iskip = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_iskip_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tbvcf::iskip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::iskip",1,"sp_tbvcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_iskip_get",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  result = (float) ((arg1)->iskip);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_y_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tbvcf::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::y",1,"sp_tbvcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tbvcf::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_y_set",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_y_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tbvcf::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::y",1,"sp_tbvcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_y_get",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_y1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tbvcf::y1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::y1",1,"sp_tbvcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tbvcf::y1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_y1_set",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_y1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tbvcf::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::y1",1,"sp_tbvcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_y1_get",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  result = (float) ((arg1)->y1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_y2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tbvcf::y2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::y2",1,"sp_tbvcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tbvcf::y2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_y2_set",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_y2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tbvcf::y2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::y2",1,"sp_tbvcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_y2_get",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  result = (float) ((arg1)->y2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_fcocod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_tbvcf::fcocod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::fcocod",1,"sp_tbvcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tbvcf::fcocod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_fcocod_set",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->fcocod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_fcocod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tbvcf::fcocod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::fcocod",1,"sp_tbvcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_fcocod_get",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  result = (int) ((arg1)->fcocod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_rezcod_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_tbvcf::rezcod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::rezcod",1,"sp_tbvcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tbvcf::rezcod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_rezcod_set",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rezcod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_rezcod_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tbvcf::rezcod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::rezcod",1,"sp_tbvcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_rezcod_get",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  result = (int) ((arg1)->rezcod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tbvcf::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::sr",1,"sp_tbvcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tbvcf::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_sr_set",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tbvcf::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::sr",1,"sp_tbvcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_sr_get",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_onedsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tbvcf::onedsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::onedsr",1,"sp_tbvcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tbvcf::onedsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_onedsr_set",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->onedsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_onedsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *arg1 = (sp_tbvcf *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tbvcf::onedsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf::onedsr",1,"sp_tbvcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_onedsr_get",1,SWIGTYPE_p_sp_tbvcf);
  }
  
  result = (float) ((arg1)->onedsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_tbvcf(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf *result = 0 ;
  
  SWIG_check_num_args("sp_tbvcf::sp_tbvcf",0,0)
  result = (sp_tbvcf *)new sp_tbvcf();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tbvcf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_tbvcf(void *obj) {
sp_tbvcf *arg1 = (sp_tbvcf *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_tbvcf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_tbvcf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_tbvcf_attributes[] = {
    { "fco", _wrap_sp_tbvcf_fco_get, _wrap_sp_tbvcf_fco_set },
    { "res", _wrap_sp_tbvcf_res_get, _wrap_sp_tbvcf_res_set },
    { "dist", _wrap_sp_tbvcf_dist_get, _wrap_sp_tbvcf_dist_set },
    { "asym", _wrap_sp_tbvcf_asym_get, _wrap_sp_tbvcf_asym_set },
    { "iskip", _wrap_sp_tbvcf_iskip_get, _wrap_sp_tbvcf_iskip_set },
    { "y", _wrap_sp_tbvcf_y_get, _wrap_sp_tbvcf_y_set },
    { "y1", _wrap_sp_tbvcf_y1_get, _wrap_sp_tbvcf_y1_set },
    { "y2", _wrap_sp_tbvcf_y2_get, _wrap_sp_tbvcf_y2_set },
    { "fcocod", _wrap_sp_tbvcf_fcocod_get, _wrap_sp_tbvcf_fcocod_set },
    { "rezcod", _wrap_sp_tbvcf_rezcod_get, _wrap_sp_tbvcf_rezcod_set },
    { "sr", _wrap_sp_tbvcf_sr_get, _wrap_sp_tbvcf_sr_set },
    { "onedsr", _wrap_sp_tbvcf_onedsr_get, _wrap_sp_tbvcf_onedsr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_tbvcf_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_tbvcf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_tbvcf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_tbvcf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_tbvcf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_tbvcf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_tbvcf_Sf_SwigStatic = {
    "sp_tbvcf",
    swig_sp_tbvcf_Sf_SwigStatic_methods,
    swig_sp_tbvcf_Sf_SwigStatic_attributes,
    swig_sp_tbvcf_Sf_SwigStatic_constants,
    swig_sp_tbvcf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_tbvcf_bases[] = {0};
static const char *swig_sp_tbvcf_base_names[] = {0};
static swig_lua_class _wrap_class_sp_tbvcf = { "sp_tbvcf", "sp_tbvcf", &SWIGTYPE_p_sp_tbvcf,_proxy__wrap_new_sp_tbvcf, swig_delete_sp_tbvcf, swig_sp_tbvcf_methods, swig_sp_tbvcf_attributes, &swig_sp_tbvcf_Sf_SwigStatic, swig_sp_tbvcf_meta, swig_sp_tbvcf_bases, swig_sp_tbvcf_base_names };

static int _wrap_sp_tbvcf_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf **arg1 = (sp_tbvcf **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tbvcf_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf_create",1,"sp_tbvcf **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_create",1,SWIGTYPE_p_p_sp_tbvcf);
  }
  
  result = (int)sp_tbvcf_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_tbvcf **arg1 = (sp_tbvcf **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tbvcf_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf_destroy",1,"sp_tbvcf **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_destroy",1,SWIGTYPE_p_p_sp_tbvcf);
  }
  
  result = (int)sp_tbvcf_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tbvcf *arg2 = (sp_tbvcf *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tbvcf_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tbvcf_init",2,"sp_tbvcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tbvcf_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_init",2,SWIGTYPE_p_sp_tbvcf);
  }
  
  result = (int)sp_tbvcf_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tbvcf_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tbvcf *arg2 = (sp_tbvcf *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tbvcf_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tbvcf_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tbvcf_compute",2,"sp_tbvcf *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tbvcf_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tbvcf_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tbvcf_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tbvcf,0))){
    SWIG_fail_ptr("sp_tbvcf_compute",2,SWIGTYPE_p_sp_tbvcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tbvcf_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tbvcf_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_tbvcf_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tdiv_num_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tdiv *arg1 = (sp_tdiv *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tdiv::num",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tdiv::num",1,"sp_tdiv *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tdiv::num",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tdiv,0))){
    SWIG_fail_ptr("sp_tdiv_num_set",1,SWIGTYPE_p_sp_tdiv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tdiv_num_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->num = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tdiv_num_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tdiv *arg1 = (sp_tdiv *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tdiv::num",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tdiv::num",1,"sp_tdiv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tdiv,0))){
    SWIG_fail_ptr("sp_tdiv_num_get",1,SWIGTYPE_p_sp_tdiv);
  }
  
  result =  ((arg1)->num);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tdiv_counter_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tdiv *arg1 = (sp_tdiv *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tdiv::counter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tdiv::counter",1,"sp_tdiv *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tdiv::counter",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tdiv,0))){
    SWIG_fail_ptr("sp_tdiv_counter_set",1,SWIGTYPE_p_sp_tdiv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tdiv_counter_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->counter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tdiv_counter_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tdiv *arg1 = (sp_tdiv *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tdiv::counter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tdiv::counter",1,"sp_tdiv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tdiv,0))){
    SWIG_fail_ptr("sp_tdiv_counter_get",1,SWIGTYPE_p_sp_tdiv);
  }
  
  result =  ((arg1)->counter);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tdiv_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tdiv *arg1 = (sp_tdiv *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tdiv::offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tdiv::offset",1,"sp_tdiv *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tdiv::offset",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tdiv,0))){
    SWIG_fail_ptr("sp_tdiv_offset_set",1,SWIGTYPE_p_sp_tdiv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tdiv_offset_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tdiv_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tdiv *arg1 = (sp_tdiv *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tdiv::offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tdiv::offset",1,"sp_tdiv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tdiv,0))){
    SWIG_fail_ptr("sp_tdiv_offset_get",1,SWIGTYPE_p_sp_tdiv);
  }
  
  result =  ((arg1)->offset);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_tdiv(lua_State* L) {
  int SWIG_arg = 0;
  sp_tdiv *result = 0 ;
  
  SWIG_check_num_args("sp_tdiv::sp_tdiv",0,0)
  result = (sp_tdiv *)new sp_tdiv();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tdiv,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_tdiv(void *obj) {
sp_tdiv *arg1 = (sp_tdiv *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_tdiv(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_tdiv);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_tdiv_attributes[] = {
    { "num", _wrap_sp_tdiv_num_get, _wrap_sp_tdiv_num_set },
    { "counter", _wrap_sp_tdiv_counter_get, _wrap_sp_tdiv_counter_set },
    { "offset", _wrap_sp_tdiv_offset_get, _wrap_sp_tdiv_offset_set },
    {0,0,0}
};
static swig_lua_method swig_sp_tdiv_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_tdiv_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_tdiv_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_tdiv_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_tdiv_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_tdiv_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_tdiv_Sf_SwigStatic = {
    "sp_tdiv",
    swig_sp_tdiv_Sf_SwigStatic_methods,
    swig_sp_tdiv_Sf_SwigStatic_attributes,
    swig_sp_tdiv_Sf_SwigStatic_constants,
    swig_sp_tdiv_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_tdiv_bases[] = {0};
static const char *swig_sp_tdiv_base_names[] = {0};
static swig_lua_class _wrap_class_sp_tdiv = { "sp_tdiv", "sp_tdiv", &SWIGTYPE_p_sp_tdiv,_proxy__wrap_new_sp_tdiv, swig_delete_sp_tdiv, swig_sp_tdiv_methods, swig_sp_tdiv_attributes, &swig_sp_tdiv_Sf_SwigStatic, swig_sp_tdiv_meta, swig_sp_tdiv_bases, swig_sp_tdiv_base_names };

static int _wrap_sp_tdiv_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_tdiv **arg1 = (sp_tdiv **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tdiv_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tdiv_create",1,"sp_tdiv **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tdiv,0))){
    SWIG_fail_ptr("sp_tdiv_create",1,SWIGTYPE_p_p_sp_tdiv);
  }
  
  result = (int)sp_tdiv_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tdiv_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_tdiv **arg1 = (sp_tdiv **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tdiv_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tdiv_destroy",1,"sp_tdiv **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tdiv,0))){
    SWIG_fail_ptr("sp_tdiv_destroy",1,SWIGTYPE_p_p_sp_tdiv);
  }
  
  result = (int)sp_tdiv_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tdiv_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tdiv *arg2 = (sp_tdiv *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tdiv_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tdiv_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tdiv_init",2,"sp_tdiv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tdiv_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tdiv,0))){
    SWIG_fail_ptr("sp_tdiv_init",2,SWIGTYPE_p_sp_tdiv);
  }
  
  result = (int)sp_tdiv_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tdiv_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tdiv *arg2 = (sp_tdiv *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tdiv_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tdiv_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tdiv_compute",2,"sp_tdiv *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tdiv_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tdiv_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tdiv_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tdiv,0))){
    SWIG_fail_ptr("sp_tdiv_compute",2,SWIGTYPE_p_sp_tdiv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tdiv_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tdiv_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_tdiv_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_te_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  sp_tevent *arg2 = (sp_tevent *) 0 ;
  
  SWIG_check_num_args("sp_tenv::te",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::te",1,"sp_tenv *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tenv::te",2,"sp_tevent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_te_set",1,SWIGTYPE_p_sp_tenv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tevent,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_tenv_te_set",2,SWIGTYPE_p_sp_tevent);
  }
  
  if (arg1) (arg1)->te = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_te_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  sp_tevent *result = 0 ;
  
  SWIG_check_num_args("sp_tenv::te",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::te",1,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_te_get",1,SWIGTYPE_p_sp_tenv);
  }
  
  result = (sp_tevent *) ((arg1)->te);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tevent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tenv::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::pos",1,"sp_tenv *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tenv::pos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_pos_set",1,SWIGTYPE_p_sp_tenv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tenv_pos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tenv::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::pos",1,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_pos_get",1,SWIGTYPE_p_sp_tenv);
  }
  
  result =  ((arg1)->pos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_atk_end_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tenv::atk_end",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::atk_end",1,"sp_tenv *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tenv::atk_end",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_atk_end_set",1,SWIGTYPE_p_sp_tenv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tenv_atk_end_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->atk_end = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_atk_end_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tenv::atk_end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::atk_end",1,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_atk_end_get",1,SWIGTYPE_p_sp_tenv);
  }
  
  result =  ((arg1)->atk_end);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_rel_start_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tenv::rel_start",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::rel_start",1,"sp_tenv *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tenv::rel_start",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_rel_start_set",1,SWIGTYPE_p_sp_tenv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tenv_rel_start_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->rel_start = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_rel_start_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tenv::rel_start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::rel_start",1,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_rel_start_get",1,SWIGTYPE_p_sp_tenv);
  }
  
  result =  ((arg1)->rel_start);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tenv::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::sr",1,"sp_tenv *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tenv::sr",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_sr_set",1,SWIGTYPE_p_sp_tenv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tenv_sr_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tenv::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::sr",1,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_sr_get",1,SWIGTYPE_p_sp_tenv);
  }
  
  result =  ((arg1)->sr);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_totaldur_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tenv::totaldur",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::totaldur",1,"sp_tenv *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tenv::totaldur",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_totaldur_set",1,SWIGTYPE_p_sp_tenv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tenv_totaldur_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->totaldur = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_totaldur_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tenv::totaldur",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::totaldur",1,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_totaldur_get",1,SWIGTYPE_p_sp_tenv);
  }
  
  result =  ((arg1)->totaldur);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_atk_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenv::atk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::atk",1,"sp_tenv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenv::atk",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_atk_set",1,SWIGTYPE_p_sp_tenv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->atk = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_atk_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenv::atk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::atk",1,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_atk_get",1,SWIGTYPE_p_sp_tenv);
  }
  
  result = (float) ((arg1)->atk);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_rel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenv::rel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::rel",1,"sp_tenv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenv::rel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_rel_set",1,SWIGTYPE_p_sp_tenv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_rel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenv::rel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::rel",1,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_rel_get",1,SWIGTYPE_p_sp_tenv);
  }
  
  result = (float) ((arg1)->rel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_hold_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenv::hold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::hold",1,"sp_tenv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenv::hold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_hold_set",1,SWIGTYPE_p_sp_tenv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->hold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_hold_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenv::hold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::hold",1,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_hold_get",1,SWIGTYPE_p_sp_tenv);
  }
  
  result = (float) ((arg1)->hold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_atk_slp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenv::atk_slp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::atk_slp",1,"sp_tenv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenv::atk_slp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_atk_slp_set",1,SWIGTYPE_p_sp_tenv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->atk_slp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_atk_slp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenv::atk_slp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::atk_slp",1,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_atk_slp_get",1,SWIGTYPE_p_sp_tenv);
  }
  
  result = (float) ((arg1)->atk_slp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_rel_slp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenv::rel_slp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::rel_slp",1,"sp_tenv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenv::rel_slp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_rel_slp_set",1,SWIGTYPE_p_sp_tenv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rel_slp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_rel_slp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenv::rel_slp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::rel_slp",1,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_rel_slp_get",1,SWIGTYPE_p_sp_tenv);
  }
  
  result = (float) ((arg1)->rel_slp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_last_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenv::last",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::last",1,"sp_tenv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenv::last",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_last_set",1,SWIGTYPE_p_sp_tenv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->last = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_last_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenv::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::last",1,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_last_get",1,SWIGTYPE_p_sp_tenv);
  }
  
  result = (float) ((arg1)->last);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_sigmode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_tenv::sigmode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::sigmode",1,"sp_tenv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenv::sigmode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_sigmode_set",1,SWIGTYPE_p_sp_tenv);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sigmode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_sigmode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tenv::sigmode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::sigmode",1,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_sigmode_get",1,SWIGTYPE_p_sp_tenv);
  }
  
  result = (int) ((arg1)->sigmode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_input_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenv::input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::input",1,"sp_tenv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenv::input",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_input_set",1,SWIGTYPE_p_sp_tenv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->input = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_input_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *arg1 = (sp_tenv *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenv::input",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv::input",1,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_input_get",1,SWIGTYPE_p_sp_tenv);
  }
  
  result = (float) ((arg1)->input);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_tenv(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv *result = 0 ;
  
  SWIG_check_num_args("sp_tenv::sp_tenv",0,0)
  result = (sp_tenv *)new sp_tenv();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tenv,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_tenv(void *obj) {
sp_tenv *arg1 = (sp_tenv *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_tenv(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_tenv);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_tenv_attributes[] = {
    { "te", _wrap_sp_tenv_te_get, _wrap_sp_tenv_te_set },
    { "pos", _wrap_sp_tenv_pos_get, _wrap_sp_tenv_pos_set },
    { "atk_end", _wrap_sp_tenv_atk_end_get, _wrap_sp_tenv_atk_end_set },
    { "rel_start", _wrap_sp_tenv_rel_start_get, _wrap_sp_tenv_rel_start_set },
    { "sr", _wrap_sp_tenv_sr_get, _wrap_sp_tenv_sr_set },
    { "totaldur", _wrap_sp_tenv_totaldur_get, _wrap_sp_tenv_totaldur_set },
    { "atk", _wrap_sp_tenv_atk_get, _wrap_sp_tenv_atk_set },
    { "rel", _wrap_sp_tenv_rel_get, _wrap_sp_tenv_rel_set },
    { "hold", _wrap_sp_tenv_hold_get, _wrap_sp_tenv_hold_set },
    { "atk_slp", _wrap_sp_tenv_atk_slp_get, _wrap_sp_tenv_atk_slp_set },
    { "rel_slp", _wrap_sp_tenv_rel_slp_get, _wrap_sp_tenv_rel_slp_set },
    { "last", _wrap_sp_tenv_last_get, _wrap_sp_tenv_last_set },
    { "sigmode", _wrap_sp_tenv_sigmode_get, _wrap_sp_tenv_sigmode_set },
    { "input", _wrap_sp_tenv_input_get, _wrap_sp_tenv_input_set },
    {0,0,0}
};
static swig_lua_method swig_sp_tenv_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_tenv_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_tenv_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_tenv_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_tenv_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_tenv_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_tenv_Sf_SwigStatic = {
    "sp_tenv",
    swig_sp_tenv_Sf_SwigStatic_methods,
    swig_sp_tenv_Sf_SwigStatic_attributes,
    swig_sp_tenv_Sf_SwigStatic_constants,
    swig_sp_tenv_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_tenv_bases[] = {0};
static const char *swig_sp_tenv_base_names[] = {0};
static swig_lua_class _wrap_class_sp_tenv = { "sp_tenv", "sp_tenv", &SWIGTYPE_p_sp_tenv,_proxy__wrap_new_sp_tenv, swig_delete_sp_tenv, swig_sp_tenv_methods, swig_sp_tenv_attributes, &swig_sp_tenv_Sf_SwigStatic, swig_sp_tenv_meta, swig_sp_tenv_bases, swig_sp_tenv_base_names };

static int _wrap_sp_tenv_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv **arg1 = (sp_tenv **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tenv_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv_create",1,"sp_tenv **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_create",1,SWIGTYPE_p_p_sp_tenv);
  }
  
  result = (int)sp_tenv_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv **arg1 = (sp_tenv **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tenv_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv_destroy",1,"sp_tenv **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_destroy",1,SWIGTYPE_p_p_sp_tenv);
  }
  
  result = (int)sp_tenv_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tenv *arg2 = (sp_tenv *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tenv_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tenv_init",2,"sp_tenv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tenv_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_init",2,SWIGTYPE_p_sp_tenv);
  }
  
  result = (int)sp_tenv_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tenv *arg2 = (sp_tenv *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tenv_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tenv_compute",2,"sp_tenv *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tenv_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tenv_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tenv_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tenv,0))){
    SWIG_fail_ptr("sp_tenv_compute",2,SWIGTYPE_p_sp_tenv);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tenv_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tenv_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_tenv_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_state_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *arg1 = (sp_tenv2 *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_tenv2::state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2::state",1,"sp_tenv2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenv2::state",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_state_set",1,SWIGTYPE_p_sp_tenv2);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_state_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *arg1 = (sp_tenv2 *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tenv2::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2::state",1,"sp_tenv2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_state_get",1,SWIGTYPE_p_sp_tenv2);
  }
  
  result = (int) ((arg1)->state);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_atk_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *arg1 = (sp_tenv2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenv2::atk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2::atk",1,"sp_tenv2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenv2::atk",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_atk_set",1,SWIGTYPE_p_sp_tenv2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->atk = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_atk_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *arg1 = (sp_tenv2 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenv2::atk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2::atk",1,"sp_tenv2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_atk_get",1,SWIGTYPE_p_sp_tenv2);
  }
  
  result = (float) ((arg1)->atk);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_rel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *arg1 = (sp_tenv2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenv2::rel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2::rel",1,"sp_tenv2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenv2::rel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_rel_set",1,SWIGTYPE_p_sp_tenv2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_rel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *arg1 = (sp_tenv2 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenv2::rel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2::rel",1,"sp_tenv2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_rel_get",1,SWIGTYPE_p_sp_tenv2);
  }
  
  result = (float) ((arg1)->rel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_totaltime_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *arg1 = (sp_tenv2 *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tenv2::totaltime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2::totaltime",1,"sp_tenv2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tenv2::totaltime",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_totaltime_set",1,SWIGTYPE_p_sp_tenv2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tenv2_totaltime_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->totaltime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_totaltime_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *arg1 = (sp_tenv2 *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tenv2::totaltime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2::totaltime",1,"sp_tenv2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_totaltime_get",1,SWIGTYPE_p_sp_tenv2);
  }
  
  result =  ((arg1)->totaltime);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_timer_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *arg1 = (sp_tenv2 *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tenv2::timer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2::timer",1,"sp_tenv2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tenv2::timer",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_timer_set",1,SWIGTYPE_p_sp_tenv2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tenv2_timer_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->timer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_timer_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *arg1 = (sp_tenv2 *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tenv2::timer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2::timer",1,"sp_tenv2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_timer_get",1,SWIGTYPE_p_sp_tenv2);
  }
  
  result =  ((arg1)->timer);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_slope_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *arg1 = (sp_tenv2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenv2::slope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2::slope",1,"sp_tenv2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenv2::slope",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_slope_set",1,SWIGTYPE_p_sp_tenv2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->slope = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_slope_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *arg1 = (sp_tenv2 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenv2::slope",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2::slope",1,"sp_tenv2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_slope_get",1,SWIGTYPE_p_sp_tenv2);
  }
  
  result = (float) ((arg1)->slope);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_last_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *arg1 = (sp_tenv2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenv2::last",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2::last",1,"sp_tenv2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenv2::last",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_last_set",1,SWIGTYPE_p_sp_tenv2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->last = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_last_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *arg1 = (sp_tenv2 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenv2::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2::last",1,"sp_tenv2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_last_get",1,SWIGTYPE_p_sp_tenv2);
  }
  
  result = (float) ((arg1)->last);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_tenv2(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 *result = 0 ;
  
  SWIG_check_num_args("sp_tenv2::sp_tenv2",0,0)
  result = (sp_tenv2 *)new sp_tenv2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tenv2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_tenv2(void *obj) {
sp_tenv2 *arg1 = (sp_tenv2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_tenv2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_tenv2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_tenv2_attributes[] = {
    { "state", _wrap_sp_tenv2_state_get, _wrap_sp_tenv2_state_set },
    { "atk", _wrap_sp_tenv2_atk_get, _wrap_sp_tenv2_atk_set },
    { "rel", _wrap_sp_tenv2_rel_get, _wrap_sp_tenv2_rel_set },
    { "totaltime", _wrap_sp_tenv2_totaltime_get, _wrap_sp_tenv2_totaltime_set },
    { "timer", _wrap_sp_tenv2_timer_get, _wrap_sp_tenv2_timer_set },
    { "slope", _wrap_sp_tenv2_slope_get, _wrap_sp_tenv2_slope_set },
    { "last", _wrap_sp_tenv2_last_get, _wrap_sp_tenv2_last_set },
    {0,0,0}
};
static swig_lua_method swig_sp_tenv2_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_tenv2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_tenv2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_tenv2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_tenv2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_tenv2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_tenv2_Sf_SwigStatic = {
    "sp_tenv2",
    swig_sp_tenv2_Sf_SwigStatic_methods,
    swig_sp_tenv2_Sf_SwigStatic_attributes,
    swig_sp_tenv2_Sf_SwigStatic_constants,
    swig_sp_tenv2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_tenv2_bases[] = {0};
static const char *swig_sp_tenv2_base_names[] = {0};
static swig_lua_class _wrap_class_sp_tenv2 = { "sp_tenv2", "sp_tenv2", &SWIGTYPE_p_sp_tenv2,_proxy__wrap_new_sp_tenv2, swig_delete_sp_tenv2, swig_sp_tenv2_methods, swig_sp_tenv2_attributes, &swig_sp_tenv2_Sf_SwigStatic, swig_sp_tenv2_meta, swig_sp_tenv2_bases, swig_sp_tenv2_base_names };

static int _wrap_sp_tenv2_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 **arg1 = (sp_tenv2 **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tenv2_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2_create",1,"sp_tenv2 **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_create",1,SWIGTYPE_p_p_sp_tenv2);
  }
  
  result = (int)sp_tenv2_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenv2 **arg1 = (sp_tenv2 **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tenv2_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2_destroy",1,"sp_tenv2 **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_destroy",1,SWIGTYPE_p_p_sp_tenv2);
  }
  
  result = (int)sp_tenv2_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tenv2 *arg2 = (sp_tenv2 *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tenv2_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tenv2_init",2,"sp_tenv2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tenv2_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_init",2,SWIGTYPE_p_sp_tenv2);
  }
  
  result = (int)sp_tenv2_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenv2_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tenv2 *arg2 = (sp_tenv2 *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tenv2_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenv2_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tenv2_compute",2,"sp_tenv2 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tenv2_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tenv2_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tenv2_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tenv2,0))){
    SWIG_fail_ptr("sp_tenv2_compute",2,SWIGTYPE_p_sp_tenv2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tenv2_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tenv2_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_tenv2_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_atk_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenvx::atk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::atk",1,"sp_tenvx *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenvx::atk",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_atk_set",1,SWIGTYPE_p_sp_tenvx);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->atk = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_atk_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenvx::atk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::atk",1,"sp_tenvx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_atk_get",1,SWIGTYPE_p_sp_tenvx);
  }
  
  result = (float) ((arg1)->atk);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_rel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenvx::rel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::rel",1,"sp_tenvx *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenvx::rel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_rel_set",1,SWIGTYPE_p_sp_tenvx);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_rel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenvx::rel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::rel",1,"sp_tenvx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_rel_get",1,SWIGTYPE_p_sp_tenvx);
  }
  
  result = (float) ((arg1)->rel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_hold_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenvx::hold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::hold",1,"sp_tenvx *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenvx::hold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_hold_set",1,SWIGTYPE_p_sp_tenvx);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->hold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_hold_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenvx::hold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::hold",1,"sp_tenvx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_hold_get",1,SWIGTYPE_p_sp_tenvx);
  }
  
  result = (float) ((arg1)->hold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_patk_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenvx::patk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::patk",1,"sp_tenvx *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenvx::patk",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_patk_set",1,SWIGTYPE_p_sp_tenvx);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->patk = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_patk_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenvx::patk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::patk",1,"sp_tenvx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_patk_get",1,SWIGTYPE_p_sp_tenvx);
  }
  
  result = (float) ((arg1)->patk);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_prel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenvx::prel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::prel",1,"sp_tenvx *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenvx::prel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_prel_set",1,SWIGTYPE_p_sp_tenvx);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_prel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenvx::prel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::prel",1,"sp_tenvx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_prel_get",1,SWIGTYPE_p_sp_tenvx);
  }
  
  result = (float) ((arg1)->prel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_count_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tenvx::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::count",1,"sp_tenvx *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tenvx::count",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_count_set",1,SWIGTYPE_p_sp_tenvx);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tenvx_count_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->count = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_count_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tenvx::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::count",1,"sp_tenvx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_count_get",1,SWIGTYPE_p_sp_tenvx);
  }
  
  result =  ((arg1)->count);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_a_a_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenvx::a_a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::a_a",1,"sp_tenvx *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenvx::a_a",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_a_a_set",1,SWIGTYPE_p_sp_tenvx);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a_a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_a_a_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenvx::a_a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::a_a",1,"sp_tenvx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_a_a_get",1,SWIGTYPE_p_sp_tenvx);
  }
  
  result = (float) ((arg1)->a_a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_b_a_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenvx::b_a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::b_a",1,"sp_tenvx *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenvx::b_a",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_b_a_set",1,SWIGTYPE_p_sp_tenvx);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b_a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_b_a_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenvx::b_a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::b_a",1,"sp_tenvx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_b_a_get",1,SWIGTYPE_p_sp_tenvx);
  }
  
  result = (float) ((arg1)->b_a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_a_r_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenvx::a_r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::a_r",1,"sp_tenvx *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenvx::a_r",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_a_r_set",1,SWIGTYPE_p_sp_tenvx);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a_r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_a_r_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenvx::a_r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::a_r",1,"sp_tenvx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_a_r_get",1,SWIGTYPE_p_sp_tenvx);
  }
  
  result = (float) ((arg1)->a_r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_b_r_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenvx::b_r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::b_r",1,"sp_tenvx *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenvx::b_r",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_b_r_set",1,SWIGTYPE_p_sp_tenvx);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b_r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_b_r_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenvx::b_r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::b_r",1,"sp_tenvx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_b_r_get",1,SWIGTYPE_p_sp_tenvx);
  }
  
  result = (float) ((arg1)->b_r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_y_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tenvx::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::y",1,"sp_tenvx *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tenvx::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_y_set",1,SWIGTYPE_p_sp_tenvx);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_y_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *arg1 = (sp_tenvx *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tenvx::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx::y",1,"sp_tenvx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_y_get",1,SWIGTYPE_p_sp_tenvx);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_tenvx(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx *result = 0 ;
  
  SWIG_check_num_args("sp_tenvx::sp_tenvx",0,0)
  result = (sp_tenvx *)new sp_tenvx();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tenvx,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_tenvx(void *obj) {
sp_tenvx *arg1 = (sp_tenvx *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_tenvx(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_tenvx);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_tenvx_attributes[] = {
    { "atk", _wrap_sp_tenvx_atk_get, _wrap_sp_tenvx_atk_set },
    { "rel", _wrap_sp_tenvx_rel_get, _wrap_sp_tenvx_rel_set },
    { "hold", _wrap_sp_tenvx_hold_get, _wrap_sp_tenvx_hold_set },
    { "patk", _wrap_sp_tenvx_patk_get, _wrap_sp_tenvx_patk_set },
    { "prel", _wrap_sp_tenvx_prel_get, _wrap_sp_tenvx_prel_set },
    { "count", _wrap_sp_tenvx_count_get, _wrap_sp_tenvx_count_set },
    { "a_a", _wrap_sp_tenvx_a_a_get, _wrap_sp_tenvx_a_a_set },
    { "b_a", _wrap_sp_tenvx_b_a_get, _wrap_sp_tenvx_b_a_set },
    { "a_r", _wrap_sp_tenvx_a_r_get, _wrap_sp_tenvx_a_r_set },
    { "b_r", _wrap_sp_tenvx_b_r_get, _wrap_sp_tenvx_b_r_set },
    { "y", _wrap_sp_tenvx_y_get, _wrap_sp_tenvx_y_set },
    {0,0,0}
};
static swig_lua_method swig_sp_tenvx_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_tenvx_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_tenvx_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_tenvx_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_tenvx_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_tenvx_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_tenvx_Sf_SwigStatic = {
    "sp_tenvx",
    swig_sp_tenvx_Sf_SwigStatic_methods,
    swig_sp_tenvx_Sf_SwigStatic_attributes,
    swig_sp_tenvx_Sf_SwigStatic_constants,
    swig_sp_tenvx_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_tenvx_bases[] = {0};
static const char *swig_sp_tenvx_base_names[] = {0};
static swig_lua_class _wrap_class_sp_tenvx = { "sp_tenvx", "sp_tenvx", &SWIGTYPE_p_sp_tenvx,_proxy__wrap_new_sp_tenvx, swig_delete_sp_tenvx, swig_sp_tenvx_methods, swig_sp_tenvx_attributes, &swig_sp_tenvx_Sf_SwigStatic, swig_sp_tenvx_meta, swig_sp_tenvx_bases, swig_sp_tenvx_base_names };

static int _wrap_sp_tenvx_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx **arg1 = (sp_tenvx **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tenvx_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx_create",1,"sp_tenvx **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_create",1,SWIGTYPE_p_p_sp_tenvx);
  }
  
  result = (int)sp_tenvx_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_tenvx **arg1 = (sp_tenvx **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tenvx_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx_destroy",1,"sp_tenvx **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_destroy",1,SWIGTYPE_p_p_sp_tenvx);
  }
  
  result = (int)sp_tenvx_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tenvx *arg2 = (sp_tenvx *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tenvx_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tenvx_init",2,"sp_tenvx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tenvx_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_init",2,SWIGTYPE_p_sp_tenvx);
  }
  
  result = (int)sp_tenvx_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tenvx_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tenvx *arg2 = (sp_tenvx *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tenvx_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tenvx_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tenvx_compute",2,"sp_tenvx *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tenvx_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tenvx_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tenvx_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tenvx,0))){
    SWIG_fail_ptr("sp_tenvx_compute",2,SWIGTYPE_p_sp_tenvx);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tenvx_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tenvx_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_tenvx_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tgate_time_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tgate *arg1 = (sp_tgate *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tgate::time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tgate::time",1,"sp_tgate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tgate::time",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tgate,0))){
    SWIG_fail_ptr("sp_tgate_time_set",1,SWIGTYPE_p_sp_tgate);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->time = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tgate_time_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tgate *arg1 = (sp_tgate *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tgate::time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tgate::time",1,"sp_tgate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tgate,0))){
    SWIG_fail_ptr("sp_tgate_time_get",1,SWIGTYPE_p_sp_tgate);
  }
  
  result = (float) ((arg1)->time);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tgate_timer_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tgate *arg1 = (sp_tgate *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tgate::timer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tgate::timer",1,"sp_tgate *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tgate::timer",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tgate,0))){
    SWIG_fail_ptr("sp_tgate_timer_set",1,SWIGTYPE_p_sp_tgate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tgate_timer_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->timer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tgate_timer_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tgate *arg1 = (sp_tgate *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tgate::timer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tgate::timer",1,"sp_tgate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tgate,0))){
    SWIG_fail_ptr("sp_tgate_timer_get",1,SWIGTYPE_p_sp_tgate);
  }
  
  result =  ((arg1)->timer);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_tgate(lua_State* L) {
  int SWIG_arg = 0;
  sp_tgate *result = 0 ;
  
  SWIG_check_num_args("sp_tgate::sp_tgate",0,0)
  result = (sp_tgate *)new sp_tgate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tgate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_tgate(void *obj) {
sp_tgate *arg1 = (sp_tgate *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_tgate(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_tgate);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_tgate_attributes[] = {
    { "time", _wrap_sp_tgate_time_get, _wrap_sp_tgate_time_set },
    { "timer", _wrap_sp_tgate_timer_get, _wrap_sp_tgate_timer_set },
    {0,0,0}
};
static swig_lua_method swig_sp_tgate_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_tgate_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_tgate_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_tgate_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_tgate_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_tgate_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_tgate_Sf_SwigStatic = {
    "sp_tgate",
    swig_sp_tgate_Sf_SwigStatic_methods,
    swig_sp_tgate_Sf_SwigStatic_attributes,
    swig_sp_tgate_Sf_SwigStatic_constants,
    swig_sp_tgate_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_tgate_bases[] = {0};
static const char *swig_sp_tgate_base_names[] = {0};
static swig_lua_class _wrap_class_sp_tgate = { "sp_tgate", "sp_tgate", &SWIGTYPE_p_sp_tgate,_proxy__wrap_new_sp_tgate, swig_delete_sp_tgate, swig_sp_tgate_methods, swig_sp_tgate_attributes, &swig_sp_tgate_Sf_SwigStatic, swig_sp_tgate_meta, swig_sp_tgate_bases, swig_sp_tgate_base_names };

static int _wrap_sp_tgate_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_tgate **arg1 = (sp_tgate **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tgate_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tgate_create",1,"sp_tgate **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tgate,0))){
    SWIG_fail_ptr("sp_tgate_create",1,SWIGTYPE_p_p_sp_tgate);
  }
  
  result = (int)sp_tgate_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tgate_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_tgate **arg1 = (sp_tgate **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tgate_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tgate_destroy",1,"sp_tgate **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tgate,0))){
    SWIG_fail_ptr("sp_tgate_destroy",1,SWIGTYPE_p_p_sp_tgate);
  }
  
  result = (int)sp_tgate_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tgate_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tgate *arg2 = (sp_tgate *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tgate_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tgate_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tgate_init",2,"sp_tgate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tgate_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tgate,0))){
    SWIG_fail_ptr("sp_tgate_init",2,SWIGTYPE_p_sp_tgate);
  }
  
  result = (int)sp_tgate_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tgate_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tgate *arg2 = (sp_tgate *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tgate_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tgate_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tgate_compute",2,"sp_tgate *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tgate_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tgate_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tgate_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tgate,0))){
    SWIG_fail_ptr("sp_tgate_compute",2,SWIGTYPE_p_sp_tgate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tgate_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tgate_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_tgate_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_thresh_init_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_thresh *arg1 = (sp_thresh *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_thresh::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_thresh::init",1,"sp_thresh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_thresh::init",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_thresh,0))){
    SWIG_fail_ptr("sp_thresh_init_set",1,SWIGTYPE_p_sp_thresh);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->init = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_thresh_init_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_thresh *arg1 = (sp_thresh *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_thresh::init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_thresh::init",1,"sp_thresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_thresh,0))){
    SWIG_fail_ptr("sp_thresh_init_get",1,SWIGTYPE_p_sp_thresh);
  }
  
  result = (int) ((arg1)->init);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_thresh_prev_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_thresh *arg1 = (sp_thresh *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_thresh::prev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_thresh::prev",1,"sp_thresh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_thresh::prev",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_thresh,0))){
    SWIG_fail_ptr("sp_thresh_prev_set",1,SWIGTYPE_p_sp_thresh);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prev = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_thresh_prev_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_thresh *arg1 = (sp_thresh *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_thresh::prev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_thresh::prev",1,"sp_thresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_thresh,0))){
    SWIG_fail_ptr("sp_thresh_prev_get",1,SWIGTYPE_p_sp_thresh);
  }
  
  result = (float) ((arg1)->prev);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_thresh_thresh_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_thresh *arg1 = (sp_thresh *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_thresh::thresh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_thresh::thresh",1,"sp_thresh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_thresh::thresh",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_thresh,0))){
    SWIG_fail_ptr("sp_thresh_thresh_set",1,SWIGTYPE_p_sp_thresh);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->thresh = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_thresh_thresh_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_thresh *arg1 = (sp_thresh *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_thresh::thresh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_thresh::thresh",1,"sp_thresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_thresh,0))){
    SWIG_fail_ptr("sp_thresh_thresh_get",1,SWIGTYPE_p_sp_thresh);
  }
  
  result = (float) ((arg1)->thresh);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_thresh_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_thresh *arg1 = (sp_thresh *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_thresh::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_thresh::mode",1,"sp_thresh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_thresh::mode",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_thresh,0))){
    SWIG_fail_ptr("sp_thresh_mode_set",1,SWIGTYPE_p_sp_thresh);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_thresh_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_thresh *arg1 = (sp_thresh *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_thresh::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_thresh::mode",1,"sp_thresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_thresh,0))){
    SWIG_fail_ptr("sp_thresh_mode_get",1,SWIGTYPE_p_sp_thresh);
  }
  
  result = (float) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_thresh(lua_State* L) {
  int SWIG_arg = 0;
  sp_thresh *result = 0 ;
  
  SWIG_check_num_args("sp_thresh::sp_thresh",0,0)
  result = (sp_thresh *)new sp_thresh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_thresh,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_thresh(void *obj) {
sp_thresh *arg1 = (sp_thresh *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_thresh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_thresh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_thresh_attributes[] = {
    { "init", _wrap_sp_thresh_init_get, _wrap_sp_thresh_init_set },
    { "prev", _wrap_sp_thresh_prev_get, _wrap_sp_thresh_prev_set },
    { "thresh", _wrap_sp_thresh_thresh_get, _wrap_sp_thresh_thresh_set },
    { "mode", _wrap_sp_thresh_mode_get, _wrap_sp_thresh_mode_set },
    {0,0,0}
};
static swig_lua_method swig_sp_thresh_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_thresh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_thresh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_thresh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_thresh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_thresh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_thresh_Sf_SwigStatic = {
    "sp_thresh",
    swig_sp_thresh_Sf_SwigStatic_methods,
    swig_sp_thresh_Sf_SwigStatic_attributes,
    swig_sp_thresh_Sf_SwigStatic_constants,
    swig_sp_thresh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_thresh_bases[] = {0};
static const char *swig_sp_thresh_base_names[] = {0};
static swig_lua_class _wrap_class_sp_thresh = { "sp_thresh", "sp_thresh", &SWIGTYPE_p_sp_thresh,_proxy__wrap_new_sp_thresh, swig_delete_sp_thresh, swig_sp_thresh_methods, swig_sp_thresh_attributes, &swig_sp_thresh_Sf_SwigStatic, swig_sp_thresh_meta, swig_sp_thresh_bases, swig_sp_thresh_base_names };

static int _wrap_sp_thresh_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_thresh **arg1 = (sp_thresh **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_thresh_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_thresh_create",1,"sp_thresh **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_thresh,0))){
    SWIG_fail_ptr("sp_thresh_create",1,SWIGTYPE_p_p_sp_thresh);
  }
  
  result = (int)sp_thresh_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_thresh_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_thresh **arg1 = (sp_thresh **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_thresh_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_thresh_destroy",1,"sp_thresh **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_thresh,0))){
    SWIG_fail_ptr("sp_thresh_destroy",1,SWIGTYPE_p_p_sp_thresh);
  }
  
  result = (int)sp_thresh_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_thresh_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_thresh *arg2 = (sp_thresh *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_thresh_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_thresh_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_thresh_init",2,"sp_thresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_thresh_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_thresh,0))){
    SWIG_fail_ptr("sp_thresh_init",2,SWIGTYPE_p_sp_thresh);
  }
  
  result = (int)sp_thresh_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_thresh_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_thresh *arg2 = (sp_thresh *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_thresh_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_thresh_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_thresh_compute",2,"sp_thresh *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_thresh_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_thresh_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_thresh_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_thresh,0))){
    SWIG_fail_ptr("sp_thresh_compute",2,SWIGTYPE_p_sp_thresh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_thresh_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_thresh_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_thresh_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_timer_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_timer *arg1 = (sp_timer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_timer::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_timer::mode",1,"sp_timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_timer::mode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_timer,0))){
    SWIG_fail_ptr("sp_timer_mode_set",1,SWIGTYPE_p_sp_timer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_timer_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_timer *arg1 = (sp_timer *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_timer::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_timer::mode",1,"sp_timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_timer,0))){
    SWIG_fail_ptr("sp_timer_mode_get",1,SWIGTYPE_p_sp_timer);
  }
  
  result = (int) ((arg1)->mode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_timer_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_timer *arg1 = (sp_timer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_timer::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_timer::pos",1,"sp_timer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_timer::pos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_timer,0))){
    SWIG_fail_ptr("sp_timer_pos_set",1,SWIGTYPE_p_sp_timer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_timer_pos_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_timer_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_timer *arg1 = (sp_timer *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_timer::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_timer::pos",1,"sp_timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_timer,0))){
    SWIG_fail_ptr("sp_timer_pos_get",1,SWIGTYPE_p_sp_timer);
  }
  
  result =  ((arg1)->pos);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_timer_time_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_timer *arg1 = (sp_timer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_timer::time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_timer::time",1,"sp_timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_timer::time",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_timer,0))){
    SWIG_fail_ptr("sp_timer_time_set",1,SWIGTYPE_p_sp_timer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->time = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_timer_time_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_timer *arg1 = (sp_timer *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_timer::time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_timer::time",1,"sp_timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_timer,0))){
    SWIG_fail_ptr("sp_timer_time_get",1,SWIGTYPE_p_sp_timer);
  }
  
  result = (float) ((arg1)->time);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_timer(lua_State* L) {
  int SWIG_arg = 0;
  sp_timer *result = 0 ;
  
  SWIG_check_num_args("sp_timer::sp_timer",0,0)
  result = (sp_timer *)new sp_timer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_timer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_timer(void *obj) {
sp_timer *arg1 = (sp_timer *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_timer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_timer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_timer_attributes[] = {
    { "mode", _wrap_sp_timer_mode_get, _wrap_sp_timer_mode_set },
    { "pos", _wrap_sp_timer_pos_get, _wrap_sp_timer_pos_set },
    { "time", _wrap_sp_timer_time_get, _wrap_sp_timer_time_set },
    {0,0,0}
};
static swig_lua_method swig_sp_timer_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_timer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_timer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_timer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_timer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_timer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_timer_Sf_SwigStatic = {
    "sp_timer",
    swig_sp_timer_Sf_SwigStatic_methods,
    swig_sp_timer_Sf_SwigStatic_attributes,
    swig_sp_timer_Sf_SwigStatic_constants,
    swig_sp_timer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_timer_bases[] = {0};
static const char *swig_sp_timer_base_names[] = {0};
static swig_lua_class _wrap_class_sp_timer = { "sp_timer", "sp_timer", &SWIGTYPE_p_sp_timer,_proxy__wrap_new_sp_timer, swig_delete_sp_timer, swig_sp_timer_methods, swig_sp_timer_attributes, &swig_sp_timer_Sf_SwigStatic, swig_sp_timer_meta, swig_sp_timer_bases, swig_sp_timer_base_names };

static int _wrap_sp_timer_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_timer **arg1 = (sp_timer **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_timer_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_timer_create",1,"sp_timer **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_timer,0))){
    SWIG_fail_ptr("sp_timer_create",1,SWIGTYPE_p_p_sp_timer);
  }
  
  result = (int)sp_timer_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_timer_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_timer **arg1 = (sp_timer **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_timer_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_timer_destroy",1,"sp_timer **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_timer,0))){
    SWIG_fail_ptr("sp_timer_destroy",1,SWIGTYPE_p_p_sp_timer);
  }
  
  result = (int)sp_timer_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_timer_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_timer *arg2 = (sp_timer *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_timer_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_timer_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_timer_init",2,"sp_timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_timer_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_timer,0))){
    SWIG_fail_ptr("sp_timer_init",2,SWIGTYPE_p_sp_timer);
  }
  
  result = (int)sp_timer_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_timer_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_timer *arg2 = (sp_timer *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_timer_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_timer_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_timer_compute",2,"sp_timer *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_timer_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_timer_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_timer_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_timer,0))){
    SWIG_fail_ptr("sp_timer_compute",2,SWIGTYPE_p_sp_timer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_timer_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_timer_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_timer_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tin_fp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tin *arg1 = (sp_tin *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  SWIG_check_num_args("sp_tin::fp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tin::fp",1,"sp_tin *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tin::fp",2,"FILE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tin,0))){
    SWIG_fail_ptr("sp_tin_fp_set",1,SWIGTYPE_p_sp_tin);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_tin_fp_set",2,SWIGTYPE_p_FILE);
  }
  
  if (arg1) (arg1)->fp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tin_fp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tin *arg1 = (sp_tin *) 0 ;
  FILE *result = 0 ;
  
  SWIG_check_num_args("sp_tin::fp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tin::fp",1,"sp_tin *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tin,0))){
    SWIG_fail_ptr("sp_tin_fp_get",1,SWIGTYPE_p_sp_tin);
  }
  
  result = (FILE *) ((arg1)->fp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FILE,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tin_val_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tin *arg1 = (sp_tin *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tin::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tin::val",1,"sp_tin *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tin::val",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tin,0))){
    SWIG_fail_ptr("sp_tin_val_set",1,SWIGTYPE_p_sp_tin);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tin_val_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tin *arg1 = (sp_tin *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tin::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tin::val",1,"sp_tin *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tin,0))){
    SWIG_fail_ptr("sp_tin_val_get",1,SWIGTYPE_p_sp_tin);
  }
  
  result = (float) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_tin(lua_State* L) {
  int SWIG_arg = 0;
  sp_tin *result = 0 ;
  
  SWIG_check_num_args("sp_tin::sp_tin",0,0)
  result = (sp_tin *)new sp_tin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tin,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_tin(void *obj) {
sp_tin *arg1 = (sp_tin *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_tin(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_tin);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_tin_attributes[] = {
    { "fp", _wrap_sp_tin_fp_get, _wrap_sp_tin_fp_set },
    { "val", _wrap_sp_tin_val_get, _wrap_sp_tin_val_set },
    {0,0,0}
};
static swig_lua_method swig_sp_tin_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_tin_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_tin_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_tin_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_tin_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_tin_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_tin_Sf_SwigStatic = {
    "sp_tin",
    swig_sp_tin_Sf_SwigStatic_methods,
    swig_sp_tin_Sf_SwigStatic_attributes,
    swig_sp_tin_Sf_SwigStatic_constants,
    swig_sp_tin_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_tin_bases[] = {0};
static const char *swig_sp_tin_base_names[] = {0};
static swig_lua_class _wrap_class_sp_tin = { "sp_tin", "sp_tin", &SWIGTYPE_p_sp_tin,_proxy__wrap_new_sp_tin, swig_delete_sp_tin, swig_sp_tin_methods, swig_sp_tin_attributes, &swig_sp_tin_Sf_SwigStatic, swig_sp_tin_meta, swig_sp_tin_bases, swig_sp_tin_base_names };

static int _wrap_sp_tin_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_tin **arg1 = (sp_tin **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tin_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tin_create",1,"sp_tin **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tin,0))){
    SWIG_fail_ptr("sp_tin_create",1,SWIGTYPE_p_p_sp_tin);
  }
  
  result = (int)sp_tin_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tin_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_tin **arg1 = (sp_tin **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tin_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tin_destroy",1,"sp_tin **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tin,0))){
    SWIG_fail_ptr("sp_tin_destroy",1,SWIGTYPE_p_p_sp_tin);
  }
  
  result = (int)sp_tin_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tin_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tin *arg2 = (sp_tin *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tin_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tin_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tin_init",2,"sp_tin *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tin_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tin,0))){
    SWIG_fail_ptr("sp_tin_init",2,SWIGTYPE_p_sp_tin);
  }
  
  result = (int)sp_tin_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tin_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tin *arg2 = (sp_tin *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tin_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tin_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tin_compute",2,"sp_tin *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tin_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tin_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tin_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tin,0))){
    SWIG_fail_ptr("sp_tin_compute",2,SWIGTYPE_p_sp_tin);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tin_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tin_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_tin_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_hp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone *arg1 = (sp_tone *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tone::hp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone::hp",1,"sp_tone *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tone::hp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_hp_set",1,SWIGTYPE_p_sp_tone);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->hp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_hp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone *arg1 = (sp_tone *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tone::hp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone::hp",1,"sp_tone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_hp_get",1,SWIGTYPE_p_sp_tone);
  }
  
  result = (float) ((arg1)->hp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_c1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone *arg1 = (sp_tone *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tone::c1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone::c1",1,"sp_tone *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tone::c1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_c1_set",1,SWIGTYPE_p_sp_tone);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_c1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone *arg1 = (sp_tone *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tone::c1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone::c1",1,"sp_tone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_c1_get",1,SWIGTYPE_p_sp_tone);
  }
  
  result = (float) ((arg1)->c1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_c2_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone *arg1 = (sp_tone *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tone::c2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone::c2",1,"sp_tone *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tone::c2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_c2_set",1,SWIGTYPE_p_sp_tone);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_c2_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone *arg1 = (sp_tone *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tone::c2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone::c2",1,"sp_tone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_c2_get",1,SWIGTYPE_p_sp_tone);
  }
  
  result = (float) ((arg1)->c2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_yt1_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone *arg1 = (sp_tone *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tone::yt1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone::yt1",1,"sp_tone *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tone::yt1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_yt1_set",1,SWIGTYPE_p_sp_tone);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->yt1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_yt1_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone *arg1 = (sp_tone *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tone::yt1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone::yt1",1,"sp_tone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_yt1_get",1,SWIGTYPE_p_sp_tone);
  }
  
  result = (float) ((arg1)->yt1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_prvhp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone *arg1 = (sp_tone *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tone::prvhp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone::prvhp",1,"sp_tone *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tone::prvhp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_prvhp_set",1,SWIGTYPE_p_sp_tone);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prvhp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_prvhp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone *arg1 = (sp_tone *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tone::prvhp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone::prvhp",1,"sp_tone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_prvhp_get",1,SWIGTYPE_p_sp_tone);
  }
  
  result = (float) ((arg1)->prvhp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_tpidsr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone *arg1 = (sp_tone *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tone::tpidsr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone::tpidsr",1,"sp_tone *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tone::tpidsr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_tpidsr_set",1,SWIGTYPE_p_sp_tone);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tpidsr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_tpidsr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone *arg1 = (sp_tone *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tone::tpidsr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone::tpidsr",1,"sp_tone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_tpidsr_get",1,SWIGTYPE_p_sp_tone);
  }
  
  result = (float) ((arg1)->tpidsr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_tone(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone *result = 0 ;
  
  SWIG_check_num_args("sp_tone::sp_tone",0,0)
  result = (sp_tone *)new sp_tone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tone,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_tone(void *obj) {
sp_tone *arg1 = (sp_tone *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_tone(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_tone);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_tone_attributes[] = {
    { "hp", _wrap_sp_tone_hp_get, _wrap_sp_tone_hp_set },
    { "c1", _wrap_sp_tone_c1_get, _wrap_sp_tone_c1_set },
    { "c2", _wrap_sp_tone_c2_get, _wrap_sp_tone_c2_set },
    { "yt1", _wrap_sp_tone_yt1_get, _wrap_sp_tone_yt1_set },
    { "prvhp", _wrap_sp_tone_prvhp_get, _wrap_sp_tone_prvhp_set },
    { "tpidsr", _wrap_sp_tone_tpidsr_get, _wrap_sp_tone_tpidsr_set },
    {0,0,0}
};
static swig_lua_method swig_sp_tone_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_tone_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_tone_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_tone_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_tone_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_tone_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_tone_Sf_SwigStatic = {
    "sp_tone",
    swig_sp_tone_Sf_SwigStatic_methods,
    swig_sp_tone_Sf_SwigStatic_attributes,
    swig_sp_tone_Sf_SwigStatic_constants,
    swig_sp_tone_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_tone_bases[] = {0};
static const char *swig_sp_tone_base_names[] = {0};
static swig_lua_class _wrap_class_sp_tone = { "sp_tone", "sp_tone", &SWIGTYPE_p_sp_tone,_proxy__wrap_new_sp_tone, swig_delete_sp_tone, swig_sp_tone_methods, swig_sp_tone_attributes, &swig_sp_tone_Sf_SwigStatic, swig_sp_tone_meta, swig_sp_tone_bases, swig_sp_tone_base_names };

static int _wrap_sp_tone_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone **arg1 = (sp_tone **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tone_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone_create",1,"sp_tone **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_create",1,SWIGTYPE_p_p_sp_tone);
  }
  
  result = (int)sp_tone_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_tone **arg1 = (sp_tone **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tone_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone_destroy",1,"sp_tone **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_destroy",1,SWIGTYPE_p_p_sp_tone);
  }
  
  result = (int)sp_tone_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tone *arg2 = (sp_tone *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tone_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tone_init",2,"sp_tone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tone_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_init",2,SWIGTYPE_p_sp_tone);
  }
  
  result = (int)sp_tone_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tone_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tone *arg2 = (sp_tone *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tone_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tone_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tone_compute",2,"sp_tone *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tone_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tone_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tone_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tone,0))){
    SWIG_fail_ptr("sp_tone_compute",2,SWIGTYPE_p_sp_tone);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tone_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tone_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_tone_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_trand_min_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_trand *arg1 = (sp_trand *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_trand::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_trand::min",1,"sp_trand *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_trand::min",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_trand,0))){
    SWIG_fail_ptr("sp_trand_min_set",1,SWIGTYPE_p_sp_trand);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->min = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_trand_min_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_trand *arg1 = (sp_trand *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_trand::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_trand::min",1,"sp_trand *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_trand,0))){
    SWIG_fail_ptr("sp_trand_min_get",1,SWIGTYPE_p_sp_trand);
  }
  
  result = (float) ((arg1)->min);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_trand_max_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_trand *arg1 = (sp_trand *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_trand::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_trand::max",1,"sp_trand *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_trand::max",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_trand,0))){
    SWIG_fail_ptr("sp_trand_max_set",1,SWIGTYPE_p_sp_trand);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_trand_max_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_trand *arg1 = (sp_trand *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_trand::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_trand::max",1,"sp_trand *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_trand,0))){
    SWIG_fail_ptr("sp_trand_max_get",1,SWIGTYPE_p_sp_trand);
  }
  
  result = (float) ((arg1)->max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_trand_val_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_trand *arg1 = (sp_trand *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_trand::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_trand::val",1,"sp_trand *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_trand::val",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_trand,0))){
    SWIG_fail_ptr("sp_trand_val_set",1,SWIGTYPE_p_sp_trand);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_trand_val_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_trand *arg1 = (sp_trand *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_trand::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_trand::val",1,"sp_trand *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_trand,0))){
    SWIG_fail_ptr("sp_trand_val_get",1,SWIGTYPE_p_sp_trand);
  }
  
  result = (float) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_trand(lua_State* L) {
  int SWIG_arg = 0;
  sp_trand *result = 0 ;
  
  SWIG_check_num_args("sp_trand::sp_trand",0,0)
  result = (sp_trand *)new sp_trand();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_trand,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_trand(void *obj) {
sp_trand *arg1 = (sp_trand *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_trand(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_trand);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_trand_attributes[] = {
    { "min", _wrap_sp_trand_min_get, _wrap_sp_trand_min_set },
    { "max", _wrap_sp_trand_max_get, _wrap_sp_trand_max_set },
    { "val", _wrap_sp_trand_val_get, _wrap_sp_trand_val_set },
    {0,0,0}
};
static swig_lua_method swig_sp_trand_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_trand_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_trand_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_trand_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_trand_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_trand_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_trand_Sf_SwigStatic = {
    "sp_trand",
    swig_sp_trand_Sf_SwigStatic_methods,
    swig_sp_trand_Sf_SwigStatic_attributes,
    swig_sp_trand_Sf_SwigStatic_constants,
    swig_sp_trand_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_trand_bases[] = {0};
static const char *swig_sp_trand_base_names[] = {0};
static swig_lua_class _wrap_class_sp_trand = { "sp_trand", "sp_trand", &SWIGTYPE_p_sp_trand,_proxy__wrap_new_sp_trand, swig_delete_sp_trand, swig_sp_trand_methods, swig_sp_trand_attributes, &swig_sp_trand_Sf_SwigStatic, swig_sp_trand_meta, swig_sp_trand_bases, swig_sp_trand_base_names };

static int _wrap_sp_trand_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_trand **arg1 = (sp_trand **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_trand_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_trand_create",1,"sp_trand **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_trand,0))){
    SWIG_fail_ptr("sp_trand_create",1,SWIGTYPE_p_p_sp_trand);
  }
  
  result = (int)sp_trand_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_trand_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_trand **arg1 = (sp_trand **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_trand_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_trand_destroy",1,"sp_trand **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_trand,0))){
    SWIG_fail_ptr("sp_trand_destroy",1,SWIGTYPE_p_p_sp_trand);
  }
  
  result = (int)sp_trand_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_trand_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_trand *arg2 = (sp_trand *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_trand_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_trand_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_trand_init",2,"sp_trand *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_trand_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_trand,0))){
    SWIG_fail_ptr("sp_trand_init",2,SWIGTYPE_p_sp_trand);
  }
  
  result = (int)sp_trand_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_trand_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_trand *arg2 = (sp_trand *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_trand_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_trand_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_trand_compute",2,"sp_trand *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_trand_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_trand_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_trand_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_trand,0))){
    SWIG_fail_ptr("sp_trand_compute",2,SWIGTYPE_p_sp_trand);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_trand_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_trand_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_trand_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_beg_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tseg::beg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::beg",1,"sp_tseg *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tseg::beg",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_beg_set",1,SWIGTYPE_p_sp_tseg);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->beg = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_beg_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tseg::beg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::beg",1,"sp_tseg *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_beg_get",1,SWIGTYPE_p_sp_tseg);
  }
  
  result = (float) ((arg1)->beg);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_dur_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tseg::dur",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::dur",1,"sp_tseg *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tseg::dur",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_dur_set",1,SWIGTYPE_p_sp_tseg);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->dur = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_dur_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tseg::dur",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::dur",1,"sp_tseg *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_dur_get",1,SWIGTYPE_p_sp_tseg);
  }
  
  result = (float) ((arg1)->dur);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_c_end_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tseg::end",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::end",1,"sp_tseg *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tseg::end",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_c_end_set",1,SWIGTYPE_p_sp_tseg);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->end = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_c_end_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tseg::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::end",1,"sp_tseg *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_c_end_get",1,SWIGTYPE_p_sp_tseg);
  }
  
  result = (float) ((arg1)->end);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_steps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tseg::steps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::steps",1,"sp_tseg *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tseg::steps",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_steps_set",1,SWIGTYPE_p_sp_tseg);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tseg_steps_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->steps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_steps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tseg::steps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::steps",1,"sp_tseg *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_steps_get",1,SWIGTYPE_p_sp_tseg);
  }
  
  result =  ((arg1)->steps);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_count_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_tseg::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::count",1,"sp_tseg *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tseg::count",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_count_set",1,SWIGTYPE_p_sp_tseg);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_tseg_count_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->count = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_count_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_tseg::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::count",1,"sp_tseg *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_count_get",1,SWIGTYPE_p_sp_tseg);
  }
  
  result =  ((arg1)->count);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_val_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tseg::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::val",1,"sp_tseg *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tseg::val",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_val_set",1,SWIGTYPE_p_sp_tseg);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_val_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tseg::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::val",1,"sp_tseg *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_val_get",1,SWIGTYPE_p_sp_tseg);
  }
  
  result = (float) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_type_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tseg::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::type",1,"sp_tseg *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tseg::type",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_type_set",1,SWIGTYPE_p_sp_tseg);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_type_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tseg::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::type",1,"sp_tseg *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_type_get",1,SWIGTYPE_p_sp_tseg);
  }
  
  result = (float) ((arg1)->type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_slope_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tseg::slope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::slope",1,"sp_tseg *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tseg::slope",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_slope_set",1,SWIGTYPE_p_sp_tseg);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->slope = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_slope_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tseg::slope",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::slope",1,"sp_tseg *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_slope_get",1,SWIGTYPE_p_sp_tseg);
  }
  
  result = (float) ((arg1)->slope);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_tdivnsteps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tseg::tdivnsteps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::tdivnsteps",1,"sp_tseg *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tseg::tdivnsteps",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_tdivnsteps_set",1,SWIGTYPE_p_sp_tseg);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tdivnsteps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_tdivnsteps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *arg1 = (sp_tseg *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tseg::tdivnsteps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg::tdivnsteps",1,"sp_tseg *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_tdivnsteps_get",1,SWIGTYPE_p_sp_tseg);
  }
  
  result = (float) ((arg1)->tdivnsteps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_tseg(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg *result = 0 ;
  
  SWIG_check_num_args("sp_tseg::sp_tseg",0,0)
  result = (sp_tseg *)new sp_tseg();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tseg,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_tseg(void *obj) {
sp_tseg *arg1 = (sp_tseg *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_tseg(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_tseg);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_tseg_attributes[] = {
    { "beg", _wrap_sp_tseg_beg_get, _wrap_sp_tseg_beg_set },
    { "dur", _wrap_sp_tseg_dur_get, _wrap_sp_tseg_dur_set },
    { "c_end", _wrap_sp_tseg_c_end_get, _wrap_sp_tseg_c_end_set },
    { "steps", _wrap_sp_tseg_steps_get, _wrap_sp_tseg_steps_set },
    { "count", _wrap_sp_tseg_count_get, _wrap_sp_tseg_count_set },
    { "val", _wrap_sp_tseg_val_get, _wrap_sp_tseg_val_set },
    { "type", _wrap_sp_tseg_type_get, _wrap_sp_tseg_type_set },
    { "slope", _wrap_sp_tseg_slope_get, _wrap_sp_tseg_slope_set },
    { "tdivnsteps", _wrap_sp_tseg_tdivnsteps_get, _wrap_sp_tseg_tdivnsteps_set },
    {0,0,0}
};
static swig_lua_method swig_sp_tseg_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_tseg_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_tseg_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_tseg_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_tseg_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_tseg_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_tseg_Sf_SwigStatic = {
    "sp_tseg",
    swig_sp_tseg_Sf_SwigStatic_methods,
    swig_sp_tseg_Sf_SwigStatic_attributes,
    swig_sp_tseg_Sf_SwigStatic_constants,
    swig_sp_tseg_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_tseg_bases[] = {0};
static const char *swig_sp_tseg_base_names[] = {0};
static swig_lua_class _wrap_class_sp_tseg = { "sp_tseg", "sp_tseg", &SWIGTYPE_p_sp_tseg,_proxy__wrap_new_sp_tseg, swig_delete_sp_tseg, swig_sp_tseg_methods, swig_sp_tseg_attributes, &swig_sp_tseg_Sf_SwigStatic, swig_sp_tseg_meta, swig_sp_tseg_bases, swig_sp_tseg_base_names };

static int _wrap_sp_tseg_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg **arg1 = (sp_tseg **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tseg_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg_create",1,"sp_tseg **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_create",1,SWIGTYPE_p_p_sp_tseg);
  }
  
  result = (int)sp_tseg_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseg **arg1 = (sp_tseg **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tseg_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg_destroy",1,"sp_tseg **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_destroy",1,SWIGTYPE_p_p_sp_tseg);
  }
  
  result = (int)sp_tseg_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tseg *arg2 = (sp_tseg *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("sp_tseg_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tseg_init",2,"sp_tseg *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_tseg_init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tseg_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_init",2,SWIGTYPE_p_sp_tseg);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)sp_tseg_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseg_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tseg *arg2 = (sp_tseg *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tseg_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseg_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tseg_compute",2,"sp_tseg *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tseg_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tseg_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tseg_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tseg,0))){
    SWIG_fail_ptr("sp_tseg_compute",2,SWIGTYPE_p_sp_tseg);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tseg_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tseg_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_tseg_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseq_ft_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseq *arg1 = (sp_tseq *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_tseq::ft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseq::ft",1,"sp_tseq *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tseq::ft",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseq,0))){
    SWIG_fail_ptr("sp_tseq_ft_set",1,SWIGTYPE_p_sp_tseq);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_tseq_ft_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->ft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseq_ft_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseq *arg1 = (sp_tseq *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_tseq::ft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseq::ft",1,"sp_tseq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseq,0))){
    SWIG_fail_ptr("sp_tseq_ft_get",1,SWIGTYPE_p_sp_tseq);
  }
  
  result = (sp_ftbl *) ((arg1)->ft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseq_val_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseq *arg1 = (sp_tseq *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_tseq::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseq::val",1,"sp_tseq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tseq::val",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseq,0))){
    SWIG_fail_ptr("sp_tseq_val_set",1,SWIGTYPE_p_sp_tseq);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseq_val_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseq *arg1 = (sp_tseq *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_tseq::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseq::val",1,"sp_tseq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseq,0))){
    SWIG_fail_ptr("sp_tseq_val_get",1,SWIGTYPE_p_sp_tseq);
  }
  
  result = (float) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseq_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseq *arg1 = (sp_tseq *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_tseq::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseq::pos",1,"sp_tseq *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_tseq::pos",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseq,0))){
    SWIG_fail_ptr("sp_tseq_pos_set",1,SWIGTYPE_p_sp_tseq);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_tseq_pos_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseq_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseq *arg1 = (sp_tseq *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_tseq::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseq::pos",1,"sp_tseq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseq,0))){
    SWIG_fail_ptr("sp_tseq_pos_get",1,SWIGTYPE_p_sp_tseq);
  }
  
  result =  ((arg1)->pos);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseq_shuf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseq *arg1 = (sp_tseq *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_tseq::shuf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseq::shuf",1,"sp_tseq *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_tseq::shuf",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseq,0))){
    SWIG_fail_ptr("sp_tseq_shuf_set",1,SWIGTYPE_p_sp_tseq);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->shuf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseq_shuf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseq *arg1 = (sp_tseq *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tseq::shuf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseq::shuf",1,"sp_tseq *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_tseq,0))){
    SWIG_fail_ptr("sp_tseq_shuf_get",1,SWIGTYPE_p_sp_tseq);
  }
  
  result = (int) ((arg1)->shuf);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_tseq(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseq *result = 0 ;
  
  SWIG_check_num_args("sp_tseq::sp_tseq",0,0)
  result = (sp_tseq *)new sp_tseq();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_tseq,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_tseq(void *obj) {
sp_tseq *arg1 = (sp_tseq *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_tseq(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_tseq);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_tseq_attributes[] = {
    { "ft", _wrap_sp_tseq_ft_get, _wrap_sp_tseq_ft_set },
    { "val", _wrap_sp_tseq_val_get, _wrap_sp_tseq_val_set },
    { "pos", _wrap_sp_tseq_pos_get, _wrap_sp_tseq_pos_set },
    { "shuf", _wrap_sp_tseq_shuf_get, _wrap_sp_tseq_shuf_set },
    {0,0,0}
};
static swig_lua_method swig_sp_tseq_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_tseq_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_tseq_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_tseq_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_tseq_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_tseq_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_tseq_Sf_SwigStatic = {
    "sp_tseq",
    swig_sp_tseq_Sf_SwigStatic_methods,
    swig_sp_tseq_Sf_SwigStatic_attributes,
    swig_sp_tseq_Sf_SwigStatic_constants,
    swig_sp_tseq_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_tseq_bases[] = {0};
static const char *swig_sp_tseq_base_names[] = {0};
static swig_lua_class _wrap_class_sp_tseq = { "sp_tseq", "sp_tseq", &SWIGTYPE_p_sp_tseq,_proxy__wrap_new_sp_tseq, swig_delete_sp_tseq, swig_sp_tseq_methods, swig_sp_tseq_attributes, &swig_sp_tseq_Sf_SwigStatic, swig_sp_tseq_meta, swig_sp_tseq_bases, swig_sp_tseq_base_names };

static int _wrap_sp_tseq_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseq **arg1 = (sp_tseq **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tseq_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseq_create",1,"sp_tseq **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tseq,0))){
    SWIG_fail_ptr("sp_tseq_create",1,SWIGTYPE_p_p_sp_tseq);
  }
  
  result = (int)sp_tseq_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseq_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_tseq **arg1 = (sp_tseq **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tseq_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseq_destroy",1,"sp_tseq **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_tseq,0))){
    SWIG_fail_ptr("sp_tseq_destroy",1,SWIGTYPE_p_p_sp_tseq);
  }
  
  result = (int)sp_tseq_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseq_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tseq *arg2 = (sp_tseq *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tseq_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseq_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tseq_init",2,"sp_tseq *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tseq_init",3,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tseq_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tseq,0))){
    SWIG_fail_ptr("sp_tseq_init",2,SWIGTYPE_p_sp_tseq);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_tseq_init",3,SWIGTYPE_p_sp_ftbl);
  }
  
  result = (int)sp_tseq_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_tseq_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_tseq *arg2 = (sp_tseq *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_tseq_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_tseq_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_tseq_compute",2,"sp_tseq *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_tseq_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_tseq_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_tseq_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_tseq,0))){
    SWIG_fail_ptr("sp_tseq_compute",2,SWIGTYPE_p_sp_tseq);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tseq_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_tseq_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_tseq_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_del_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *arg1 = (sp_vdelay *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_vdelay::del",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay::del",1,"sp_vdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_vdelay::del",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_del_set",1,SWIGTYPE_p_sp_vdelay);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->del = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_del_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *arg1 = (sp_vdelay *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_vdelay::del",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay::del",1,"sp_vdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_del_get",1,SWIGTYPE_p_sp_vdelay);
  }
  
  result = (float) ((arg1)->del);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_maxdel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *arg1 = (sp_vdelay *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_vdelay::maxdel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay::maxdel",1,"sp_vdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_vdelay::maxdel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_maxdel_set",1,SWIGTYPE_p_sp_vdelay);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxdel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_maxdel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *arg1 = (sp_vdelay *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_vdelay::maxdel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay::maxdel",1,"sp_vdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_maxdel_get",1,SWIGTYPE_p_sp_vdelay);
  }
  
  result = (float) ((arg1)->maxdel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_feedback_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *arg1 = (sp_vdelay *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_vdelay::feedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay::feedback",1,"sp_vdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_vdelay::feedback",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_feedback_set",1,SWIGTYPE_p_sp_vdelay);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->feedback = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_feedback_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *arg1 = (sp_vdelay *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_vdelay::feedback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay::feedback",1,"sp_vdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_feedback_get",1,SWIGTYPE_p_sp_vdelay);
  }
  
  result = (float) ((arg1)->feedback);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_prev_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *arg1 = (sp_vdelay *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_vdelay::prev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay::prev",1,"sp_vdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_vdelay::prev",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_prev_set",1,SWIGTYPE_p_sp_vdelay);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->prev = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_prev_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *arg1 = (sp_vdelay *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_vdelay::prev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay::prev",1,"sp_vdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_prev_get",1,SWIGTYPE_p_sp_vdelay);
  }
  
  result = (float) ((arg1)->prev);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *arg1 = (sp_vdelay *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_vdelay::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay::sr",1,"sp_vdelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_vdelay::sr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_sr_set",1,SWIGTYPE_p_sp_vdelay);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *arg1 = (sp_vdelay *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_vdelay::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay::sr",1,"sp_vdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_sr_get",1,SWIGTYPE_p_sp_vdelay);
  }
  
  result = (float) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *arg1 = (sp_vdelay *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_vdelay::buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay::buf",1,"sp_vdelay *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_vdelay::buf",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_buf_set",1,SWIGTYPE_p_sp_vdelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_vdelay_buf_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->buf = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *arg1 = (sp_vdelay *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_vdelay::buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay::buf",1,"sp_vdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_buf_get",1,SWIGTYPE_p_sp_vdelay);
  }
  
  result = (sp_auxdata *)& ((arg1)->buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_left_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *arg1 = (sp_vdelay *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_vdelay::left",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay::left",1,"sp_vdelay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_vdelay::left",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_left_set",1,SWIGTYPE_p_sp_vdelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_vdelay_left_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->left = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_left_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *arg1 = (sp_vdelay *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_vdelay::left",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay::left",1,"sp_vdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_left_get",1,SWIGTYPE_p_sp_vdelay);
  }
  
  result =  ((arg1)->left);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_vdelay(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay *result = 0 ;
  
  SWIG_check_num_args("sp_vdelay::sp_vdelay",0,0)
  result = (sp_vdelay *)new sp_vdelay();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_vdelay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_vdelay(void *obj) {
sp_vdelay *arg1 = (sp_vdelay *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_vdelay(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_vdelay);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_vdelay_attributes[] = {
    { "del", _wrap_sp_vdelay_del_get, _wrap_sp_vdelay_del_set },
    { "maxdel", _wrap_sp_vdelay_maxdel_get, _wrap_sp_vdelay_maxdel_set },
    { "feedback", _wrap_sp_vdelay_feedback_get, _wrap_sp_vdelay_feedback_set },
    { "prev", _wrap_sp_vdelay_prev_get, _wrap_sp_vdelay_prev_set },
    { "sr", _wrap_sp_vdelay_sr_get, _wrap_sp_vdelay_sr_set },
    { "buf", _wrap_sp_vdelay_buf_get, _wrap_sp_vdelay_buf_set },
    { "left", _wrap_sp_vdelay_left_get, _wrap_sp_vdelay_left_set },
    {0,0,0}
};
static swig_lua_method swig_sp_vdelay_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_vdelay_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_vdelay_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_vdelay_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_vdelay_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_vdelay_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_vdelay_Sf_SwigStatic = {
    "sp_vdelay",
    swig_sp_vdelay_Sf_SwigStatic_methods,
    swig_sp_vdelay_Sf_SwigStatic_attributes,
    swig_sp_vdelay_Sf_SwigStatic_constants,
    swig_sp_vdelay_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_vdelay_bases[] = {0};
static const char *swig_sp_vdelay_base_names[] = {0};
static swig_lua_class _wrap_class_sp_vdelay = { "sp_vdelay", "sp_vdelay", &SWIGTYPE_p_sp_vdelay,_proxy__wrap_new_sp_vdelay, swig_delete_sp_vdelay, swig_sp_vdelay_methods, swig_sp_vdelay_attributes, &swig_sp_vdelay_Sf_SwigStatic, swig_sp_vdelay_meta, swig_sp_vdelay_bases, swig_sp_vdelay_base_names };

static int _wrap_sp_vdelay_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay **arg1 = (sp_vdelay **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_vdelay_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay_create",1,"sp_vdelay **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_create",1,SWIGTYPE_p_p_sp_vdelay);
  }
  
  result = (int)sp_vdelay_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_vdelay **arg1 = (sp_vdelay **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_vdelay_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay_destroy",1,"sp_vdelay **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_destroy",1,SWIGTYPE_p_p_sp_vdelay);
  }
  
  result = (int)sp_vdelay_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_vdelay *arg2 = (sp_vdelay *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("sp_vdelay_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_vdelay_init",2,"sp_vdelay *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_vdelay_init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_vdelay_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_init",2,SWIGTYPE_p_sp_vdelay);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)sp_vdelay_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_vdelay *arg2 = (sp_vdelay *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_vdelay_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_vdelay_compute",2,"sp_vdelay *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_vdelay_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_vdelay_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_vdelay_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_compute",2,SWIGTYPE_p_sp_vdelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_vdelay_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_vdelay_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_vdelay_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vdelay_reset(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_vdelay *arg2 = (sp_vdelay *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_vdelay_reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vdelay_reset",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_vdelay_reset",2,"sp_vdelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_vdelay_reset",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_vdelay,0))){
    SWIG_fail_ptr("sp_vdelay_reset",2,SWIGTYPE_p_sp_vdelay);
  }
  
  result = (int)sp_vdelay_reset(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc **arg1 = (sp_voc **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_voc_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_create",1,"sp_voc **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_create",1,SWIGTYPE_p_p_sp_voc);
  }
  
  result = (int)sp_voc_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc **arg1 = (sp_voc **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_voc_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_destroy",1,"sp_voc **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_destroy",1,SWIGTYPE_p_p_sp_voc);
  }
  
  result = (int)sp_voc_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_voc *arg2 = (sp_voc *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_voc_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_voc_init",2,"sp_voc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_voc_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_init",2,SWIGTYPE_p_sp_voc);
  }
  
  result = (int)sp_voc_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_voc *arg2 = (sp_voc *) 0 ;
  float *arg3 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_voc_compute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_voc_compute",2,"sp_voc *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_voc_compute",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_voc_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_compute",2,SWIGTYPE_p_sp_voc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_voc_compute",3,SWIGTYPE_p_float);
  }
  
  result = (int)sp_voc_compute(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_tract_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_voc *arg2 = (sp_voc *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_voc_tract_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_tract_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_voc_tract_compute",2,"sp_voc *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_voc_tract_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_voc_tract_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_voc_tract_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_tract_compute",2,SWIGTYPE_p_sp_voc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_voc_tract_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_voc_tract_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_voc_tract_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_set_frequency(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc *arg1 = (sp_voc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_voc_set_frequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_set_frequency",1,"sp_voc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_voc_set_frequency",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_set_frequency",1,SWIGTYPE_p_sp_voc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  sp_voc_set_frequency(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_get_frequency_ptr(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc *arg1 = (sp_voc *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_voc_get_frequency_ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_get_frequency_ptr",1,"sp_voc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_get_frequency_ptr",1,SWIGTYPE_p_sp_voc);
  }
  
  result = (float *)sp_voc_get_frequency_ptr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_get_tract_diameters(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc *arg1 = (sp_voc *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_voc_get_tract_diameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_get_tract_diameters",1,"sp_voc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_get_tract_diameters",1,SWIGTYPE_p_sp_voc);
  }
  
  result = (float *)sp_voc_get_tract_diameters(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_get_current_tract_diameters(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc *arg1 = (sp_voc *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_voc_get_current_tract_diameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_get_current_tract_diameters",1,"sp_voc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_get_current_tract_diameters",1,SWIGTYPE_p_sp_voc);
  }
  
  result = (float *)sp_voc_get_current_tract_diameters(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_get_tract_size(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc *arg1 = (sp_voc *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_voc_get_tract_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_get_tract_size",1,"sp_voc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_get_tract_size",1,SWIGTYPE_p_sp_voc);
  }
  
  result = (int)sp_voc_get_tract_size(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_get_nose_diameters(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc *arg1 = (sp_voc *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_voc_get_nose_diameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_get_nose_diameters",1,"sp_voc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_get_nose_diameters",1,SWIGTYPE_p_sp_voc);
  }
  
  result = (float *)sp_voc_get_nose_diameters(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_get_nose_size(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc *arg1 = (sp_voc *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_voc_get_nose_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_get_nose_size",1,"sp_voc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_get_nose_size",1,SWIGTYPE_p_sp_voc);
  }
  
  result = (int)sp_voc_get_nose_size(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_set_tongue_shape(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc *arg1 = (sp_voc *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("sp_voc_set_tongue_shape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_set_tongue_shape",1,"sp_voc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_voc_set_tongue_shape",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_voc_set_tongue_shape",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_set_tongue_shape",1,SWIGTYPE_p_sp_voc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  sp_voc_set_tongue_shape(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_set_tenseness(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc *arg1 = (sp_voc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_voc_set_tenseness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_set_tenseness",1,"sp_voc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_voc_set_tenseness",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_set_tenseness",1,SWIGTYPE_p_sp_voc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  sp_voc_set_tenseness(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_get_tenseness_ptr(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc *arg1 = (sp_voc *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_voc_get_tenseness_ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_get_tenseness_ptr",1,"sp_voc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_get_tenseness_ptr",1,SWIGTYPE_p_sp_voc);
  }
  
  result = (float *)sp_voc_get_tenseness_ptr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_set_velum(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc *arg1 = (sp_voc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_voc_set_velum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_set_velum",1,"sp_voc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_voc_set_velum",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_set_velum",1,SWIGTYPE_p_sp_voc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  sp_voc_set_velum(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_get_velum_ptr(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc *arg1 = (sp_voc *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_voc_get_velum_ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_get_velum_ptr",1,"sp_voc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_get_velum_ptr",1,SWIGTYPE_p_sp_voc);
  }
  
  result = (float *)sp_voc_get_velum_ptr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_set_diameters(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc *arg1 = (sp_voc *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  float arg5 ;
  float arg6 ;
  float *arg7 = (float *) 0 ;
  
  SWIG_check_num_args("sp_voc_set_diameters",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_set_diameters",1,"sp_voc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_voc_set_diameters",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_voc_set_diameters",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("sp_voc_set_diameters",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("sp_voc_set_diameters",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("sp_voc_set_diameters",6,"float");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("sp_voc_set_diameters",7,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_set_diameters",1,SWIGTYPE_p_sp_voc);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_voc_set_diameters",7,SWIGTYPE_p_float);
  }
  
  sp_voc_set_diameters(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_voc_get_counter(lua_State* L) {
  int SWIG_arg = 0;
  sp_voc *arg1 = (sp_voc *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_voc_get_counter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_voc_get_counter",1,"sp_voc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_voc,0))){
    SWIG_fail_ptr("sp_voc_get_counter",1,SWIGTYPE_p_sp_voc);
  }
  
  result = (int)sp_voc_get_counter(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_faust_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder *arg1 = (sp_vocoder *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("sp_vocoder::faust",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder::faust",1,"sp_vocoder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_vocoder::faust",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_faust_set",1,SWIGTYPE_p_sp_vocoder);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_vocoder_faust_set");
  if (arg1) (arg1)->faust = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_faust_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder *arg1 = (sp_vocoder *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("sp_vocoder::faust",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder::faust",1,"sp_vocoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_faust_get",1,SWIGTYPE_p_sp_vocoder);
  }
  
  result = (void *) ((arg1)->faust);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_argpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder *arg1 = (sp_vocoder *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_vocoder::argpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder::argpos",1,"sp_vocoder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_vocoder::argpos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_argpos_set",1,SWIGTYPE_p_sp_vocoder);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->argpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_argpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder *arg1 = (sp_vocoder *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_vocoder::argpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder::argpos",1,"sp_vocoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_argpos_get",1,SWIGTYPE_p_sp_vocoder);
  }
  
  result = (int) ((arg1)->argpos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_args_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder *arg1 = (sp_vocoder *) 0 ;
  float **arg2 ;
  
  SWIG_check_num_args("sp_vocoder::args",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder::args",1,"sp_vocoder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_vocoder::args",2,"float *[3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_args_set",1,SWIGTYPE_p_sp_vocoder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("sp_vocoder_args_set",2,SWIGTYPE_p_p_float);
  }
  
  {
    size_t ii;
    float * *b = (float * *) arg1->args;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_args_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder *arg1 = (sp_vocoder *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("sp_vocoder::args",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder::args",1,"sp_vocoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_args_get",1,SWIGTYPE_p_sp_vocoder);
  }
  
  result = (float **)(float **) ((arg1)->args);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_atk_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder *arg1 = (sp_vocoder *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_vocoder::atk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder::atk",1,"sp_vocoder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_vocoder::atk",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_atk_set",1,SWIGTYPE_p_sp_vocoder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_vocoder_atk_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->atk = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_atk_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder *arg1 = (sp_vocoder *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_vocoder::atk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder::atk",1,"sp_vocoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_atk_get",1,SWIGTYPE_p_sp_vocoder);
  }
  
  result = (float *) ((arg1)->atk);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_rel_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder *arg1 = (sp_vocoder *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_vocoder::rel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder::rel",1,"sp_vocoder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_vocoder::rel",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_rel_set",1,SWIGTYPE_p_sp_vocoder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_vocoder_rel_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->rel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_rel_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder *arg1 = (sp_vocoder *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_vocoder::rel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder::rel",1,"sp_vocoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_rel_get",1,SWIGTYPE_p_sp_vocoder);
  }
  
  result = (float *) ((arg1)->rel);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_bwratio_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder *arg1 = (sp_vocoder *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_vocoder::bwratio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder::bwratio",1,"sp_vocoder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_vocoder::bwratio",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_bwratio_set",1,SWIGTYPE_p_sp_vocoder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_vocoder_bwratio_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->bwratio = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_bwratio_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder *arg1 = (sp_vocoder *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_vocoder::bwratio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder::bwratio",1,"sp_vocoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_bwratio_get",1,SWIGTYPE_p_sp_vocoder);
  }
  
  result = (float *) ((arg1)->bwratio);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_vocoder(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder *result = 0 ;
  
  SWIG_check_num_args("sp_vocoder::sp_vocoder",0,0)
  result = (sp_vocoder *)new sp_vocoder();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_vocoder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_vocoder(void *obj) {
sp_vocoder *arg1 = (sp_vocoder *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_vocoder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_vocoder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_vocoder_attributes[] = {
    { "faust", _wrap_sp_vocoder_faust_get, _wrap_sp_vocoder_faust_set },
    { "argpos", _wrap_sp_vocoder_argpos_get, _wrap_sp_vocoder_argpos_set },
    { "args", _wrap_sp_vocoder_args_get, _wrap_sp_vocoder_args_set },
    { "atk", _wrap_sp_vocoder_atk_get, _wrap_sp_vocoder_atk_set },
    { "rel", _wrap_sp_vocoder_rel_get, _wrap_sp_vocoder_rel_set },
    { "bwratio", _wrap_sp_vocoder_bwratio_get, _wrap_sp_vocoder_bwratio_set },
    {0,0,0}
};
static swig_lua_method swig_sp_vocoder_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_vocoder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_vocoder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_vocoder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_vocoder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_vocoder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_vocoder_Sf_SwigStatic = {
    "sp_vocoder",
    swig_sp_vocoder_Sf_SwigStatic_methods,
    swig_sp_vocoder_Sf_SwigStatic_attributes,
    swig_sp_vocoder_Sf_SwigStatic_constants,
    swig_sp_vocoder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_vocoder_bases[] = {0};
static const char *swig_sp_vocoder_base_names[] = {0};
static swig_lua_class _wrap_class_sp_vocoder = { "sp_vocoder", "sp_vocoder", &SWIGTYPE_p_sp_vocoder,_proxy__wrap_new_sp_vocoder, swig_delete_sp_vocoder, swig_sp_vocoder_methods, swig_sp_vocoder_attributes, &swig_sp_vocoder_Sf_SwigStatic, swig_sp_vocoder_meta, swig_sp_vocoder_bases, swig_sp_vocoder_base_names };

static int _wrap_sp_vocoder_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder **arg1 = (sp_vocoder **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_vocoder_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder_create",1,"sp_vocoder **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_create",1,SWIGTYPE_p_p_sp_vocoder);
  }
  
  result = (int)sp_vocoder_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_vocoder **arg1 = (sp_vocoder **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_vocoder_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder_destroy",1,"sp_vocoder **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_destroy",1,SWIGTYPE_p_p_sp_vocoder);
  }
  
  result = (int)sp_vocoder_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_vocoder *arg2 = (sp_vocoder *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_vocoder_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_vocoder_init",2,"sp_vocoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_vocoder_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_init",2,SWIGTYPE_p_sp_vocoder);
  }
  
  result = (int)sp_vocoder_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_vocoder_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_vocoder *arg2 = (sp_vocoder *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_vocoder_compute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_vocoder_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_vocoder_compute",2,"sp_vocoder *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_vocoder_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_vocoder_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_vocoder_compute",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_vocoder_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_vocoder,0))){
    SWIG_fail_ptr("sp_vocoder_compute",2,SWIGTYPE_p_sp_vocoder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_vocoder_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_vocoder_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_vocoder_compute",5,SWIGTYPE_p_float);
  }
  
  result = (int)sp_vocoder_compute(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_rep_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_waveset::rep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::rep",1,"sp_waveset *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_waveset::rep",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_rep_set",1,SWIGTYPE_p_sp_waveset);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rep = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_rep_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_waveset::rep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::rep",1,"sp_waveset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_rep_get",1,SWIGTYPE_p_sp_waveset);
  }
  
  result = (float) ((arg1)->rep);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_len_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_waveset::len",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::len",1,"sp_waveset *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_waveset::len",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_len_set",1,SWIGTYPE_p_sp_waveset);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->len = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_len_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_waveset::len",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::len",1,"sp_waveset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_len_get",1,SWIGTYPE_p_sp_waveset);
  }
  
  result = (float) ((arg1)->len);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_auxch_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  sp_auxdata *arg2 = (sp_auxdata *) 0 ;
  
  SWIG_check_num_args("sp_waveset::auxch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::auxch",1,"sp_waveset *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_waveset::auxch",2,"sp_auxdata *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_auxch_set",1,SWIGTYPE_p_sp_waveset);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_auxdata,0))){
    SWIG_fail_ptr("sp_waveset_auxch_set",2,SWIGTYPE_p_sp_auxdata);
  }
  
  if (arg1) (arg1)->auxch = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_auxch_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  sp_auxdata *result = 0 ;
  
  SWIG_check_num_args("sp_waveset::auxch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::auxch",1,"sp_waveset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_auxch_get",1,SWIGTYPE_p_sp_waveset);
  }
  
  result = (sp_auxdata *)& ((arg1)->auxch);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_auxdata,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_length_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_waveset::length",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::length",1,"sp_waveset *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_waveset::length",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_length_set",1,SWIGTYPE_p_sp_waveset);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_waveset_length_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->length = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_length_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_waveset::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::length",1,"sp_waveset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_length_get",1,SWIGTYPE_p_sp_waveset);
  }
  
  result =  ((arg1)->length);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_cnt_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_waveset::cnt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::cnt",1,"sp_waveset *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_waveset::cnt",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_cnt_set",1,SWIGTYPE_p_sp_waveset);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_waveset_cnt_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->cnt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_cnt_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_waveset::cnt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::cnt",1,"sp_waveset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_cnt_get",1,SWIGTYPE_p_sp_waveset);
  }
  
  result =  ((arg1)->cnt);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_start_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_waveset::start",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::start",1,"sp_waveset *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_waveset::start",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_start_set",1,SWIGTYPE_p_sp_waveset);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_waveset_start_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->start = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_start_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_waveset::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::start",1,"sp_waveset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_start_get",1,SWIGTYPE_p_sp_waveset);
  }
  
  result =  ((arg1)->start);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_current_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_waveset::current",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::current",1,"sp_waveset *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_waveset::current",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_current_set",1,SWIGTYPE_p_sp_waveset);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_waveset_current_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->current = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_current_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_waveset::current",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::current",1,"sp_waveset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_current_get",1,SWIGTYPE_p_sp_waveset);
  }
  
  result =  ((arg1)->current);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_direction_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_waveset::direction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::direction",1,"sp_waveset *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_waveset::direction",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_direction_set",1,SWIGTYPE_p_sp_waveset);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_waveset_direction_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->direction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_direction_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_waveset::direction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::direction",1,"sp_waveset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_direction_get",1,SWIGTYPE_p_sp_waveset);
  }
  
  result =  ((arg1)->direction);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_c_end_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_waveset::end",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::end",1,"sp_waveset *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_waveset::end",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_c_end_set",1,SWIGTYPE_p_sp_waveset);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_waveset_c_end_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->end = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_c_end_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_waveset::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::end",1,"sp_waveset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_c_end_get",1,SWIGTYPE_p_sp_waveset);
  }
  
  result =  ((arg1)->end);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_lastsamp_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_waveset::lastsamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::lastsamp",1,"sp_waveset *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_waveset::lastsamp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_lastsamp_set",1,SWIGTYPE_p_sp_waveset);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lastsamp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_lastsamp_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_waveset::lastsamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::lastsamp",1,"sp_waveset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_lastsamp_get",1,SWIGTYPE_p_sp_waveset);
  }
  
  result = (float) ((arg1)->lastsamp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_noinsert_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  int32_t arg2 ;
  int32_t *argp2 ;
  
  SWIG_check_num_args("sp_waveset::noinsert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::noinsert",1,"sp_waveset *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_waveset::noinsert",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_noinsert_set",1,SWIGTYPE_p_sp_waveset);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int32_t,0))){
    SWIG_fail_ptr("sp_waveset_noinsert_set",2,SWIGTYPE_p_int32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->noinsert = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_noinsert_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *arg1 = (sp_waveset *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("sp_waveset::noinsert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset::noinsert",1,"sp_waveset *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_noinsert_get",1,SWIGTYPE_p_sp_waveset);
  }
  
  result =  ((arg1)->noinsert);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_waveset(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset *result = 0 ;
  
  SWIG_check_num_args("sp_waveset::sp_waveset",0,0)
  result = (sp_waveset *)new sp_waveset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_waveset,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_waveset(void *obj) {
sp_waveset *arg1 = (sp_waveset *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_waveset(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_waveset);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_waveset_attributes[] = {
    { "rep", _wrap_sp_waveset_rep_get, _wrap_sp_waveset_rep_set },
    { "len", _wrap_sp_waveset_len_get, _wrap_sp_waveset_len_set },
    { "auxch", _wrap_sp_waveset_auxch_get, _wrap_sp_waveset_auxch_set },
    { "length", _wrap_sp_waveset_length_get, _wrap_sp_waveset_length_set },
    { "cnt", _wrap_sp_waveset_cnt_get, _wrap_sp_waveset_cnt_set },
    { "start", _wrap_sp_waveset_start_get, _wrap_sp_waveset_start_set },
    { "current", _wrap_sp_waveset_current_get, _wrap_sp_waveset_current_set },
    { "direction", _wrap_sp_waveset_direction_get, _wrap_sp_waveset_direction_set },
    { "c_end", _wrap_sp_waveset_c_end_get, _wrap_sp_waveset_c_end_set },
    { "lastsamp", _wrap_sp_waveset_lastsamp_get, _wrap_sp_waveset_lastsamp_set },
    { "noinsert", _wrap_sp_waveset_noinsert_get, _wrap_sp_waveset_noinsert_set },
    {0,0,0}
};
static swig_lua_method swig_sp_waveset_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_waveset_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_waveset_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_waveset_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_waveset_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_waveset_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_waveset_Sf_SwigStatic = {
    "sp_waveset",
    swig_sp_waveset_Sf_SwigStatic_methods,
    swig_sp_waveset_Sf_SwigStatic_attributes,
    swig_sp_waveset_Sf_SwigStatic_constants,
    swig_sp_waveset_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_waveset_bases[] = {0};
static const char *swig_sp_waveset_base_names[] = {0};
static swig_lua_class _wrap_class_sp_waveset = { "sp_waveset", "sp_waveset", &SWIGTYPE_p_sp_waveset,_proxy__wrap_new_sp_waveset, swig_delete_sp_waveset, swig_sp_waveset_methods, swig_sp_waveset_attributes, &swig_sp_waveset_Sf_SwigStatic, swig_sp_waveset_meta, swig_sp_waveset_bases, swig_sp_waveset_base_names };

static int _wrap_sp_waveset_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset **arg1 = (sp_waveset **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_waveset_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset_create",1,"sp_waveset **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_create",1,SWIGTYPE_p_p_sp_waveset);
  }
  
  result = (int)sp_waveset_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_waveset **arg1 = (sp_waveset **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_waveset_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset_destroy",1,"sp_waveset **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_destroy",1,SWIGTYPE_p_p_sp_waveset);
  }
  
  result = (int)sp_waveset_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_waveset *arg2 = (sp_waveset *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("sp_waveset_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_waveset_init",2,"sp_waveset *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sp_waveset_init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_waveset_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_init",2,SWIGTYPE_p_sp_waveset);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)sp_waveset_init(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_waveset_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_waveset *arg2 = (sp_waveset *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_waveset_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_waveset_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_waveset_compute",2,"sp_waveset *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_waveset_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_waveset_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_waveset_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_waveset,0))){
    SWIG_fail_ptr("sp_waveset_compute",2,SWIGTYPE_p_sp_waveset);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_waveset_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_waveset_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_waveset_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wavin_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_wavin **arg1 = (sp_wavin **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_wavin_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wavin_create",1,"sp_wavin **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_wavin,0))){
    SWIG_fail_ptr("sp_wavin_create",1,SWIGTYPE_p_p_sp_wavin);
  }
  
  result = (int)sp_wavin_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wavin_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_wavin **arg1 = (sp_wavin **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_wavin_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wavin_destroy",1,"sp_wavin **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_wavin,0))){
    SWIG_fail_ptr("sp_wavin_destroy",1,SWIGTYPE_p_p_sp_wavin);
  }
  
  result = (int)sp_wavin_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wavin_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_wavin *arg2 = (sp_wavin *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_wavin_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wavin_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_wavin_init",2,"sp_wavin *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_wavin_init",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_wavin_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_wavin,0))){
    SWIG_fail_ptr("sp_wavin_init",2,SWIGTYPE_p_sp_wavin);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_wavin_init(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wavin_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_wavin *arg2 = (sp_wavin *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_wavin_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wavin_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_wavin_compute",2,"sp_wavin *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_wavin_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_wavin_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_wavin_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_wavin,0))){
    SWIG_fail_ptr("sp_wavin_compute",2,SWIGTYPE_p_sp_wavin);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_wavin_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_wavin_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_wavin_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wavout_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_wavout **arg1 = (sp_wavout **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_wavout_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wavout_create",1,"sp_wavout **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_wavout,0))){
    SWIG_fail_ptr("sp_wavout_create",1,SWIGTYPE_p_p_sp_wavout);
  }
  
  result = (int)sp_wavout_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wavout_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_wavout **arg1 = (sp_wavout **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_wavout_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wavout_destroy",1,"sp_wavout **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_wavout,0))){
    SWIG_fail_ptr("sp_wavout_destroy",1,SWIGTYPE_p_p_sp_wavout);
  }
  
  result = (int)sp_wavout_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wavout_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_wavout *arg2 = (sp_wavout *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_wavout_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wavout_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_wavout_init",2,"sp_wavout *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_wavout_init",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_wavout_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_wavout,0))){
    SWIG_fail_ptr("sp_wavout_init",2,SWIGTYPE_p_sp_wavout);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_wavout_init(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wavout_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_wavout *arg2 = (sp_wavout *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_wavout_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wavout_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_wavout_compute",2,"sp_wavout *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_wavout_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_wavout_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_wavout_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_wavout,0))){
    SWIG_fail_ptr("sp_wavout_compute",2,SWIGTYPE_p_sp_wavout);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_wavout_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_wavout_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_wavout_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_lpf1_a_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_wpkorg35::lpf1_a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::lpf1_a",1,"sp_wpkorg35 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_wpkorg35::lpf1_a",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_lpf1_a_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lpf1_a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_lpf1_a_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_wpkorg35::lpf1_a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::lpf1_a",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_lpf1_a_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (float) ((arg1)->lpf1_a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_lpf1_z_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_wpkorg35::lpf1_z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::lpf1_z",1,"sp_wpkorg35 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_wpkorg35::lpf1_z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_lpf1_z_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lpf1_z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_lpf1_z_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_wpkorg35::lpf1_z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::lpf1_z",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_lpf1_z_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (float) ((arg1)->lpf1_z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_lpf2_a_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_wpkorg35::lpf2_a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::lpf2_a",1,"sp_wpkorg35 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_wpkorg35::lpf2_a",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_lpf2_a_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lpf2_a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_lpf2_a_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_wpkorg35::lpf2_a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::lpf2_a",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_lpf2_a_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (float) ((arg1)->lpf2_a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_lpf2_b_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_wpkorg35::lpf2_b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::lpf2_b",1,"sp_wpkorg35 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_wpkorg35::lpf2_b",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_lpf2_b_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lpf2_b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_lpf2_b_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_wpkorg35::lpf2_b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::lpf2_b",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_lpf2_b_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (float) ((arg1)->lpf2_b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_lpf2_z_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_wpkorg35::lpf2_z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::lpf2_z",1,"sp_wpkorg35 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_wpkorg35::lpf2_z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_lpf2_z_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lpf2_z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_lpf2_z_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_wpkorg35::lpf2_z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::lpf2_z",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_lpf2_z_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (float) ((arg1)->lpf2_z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_hpf_a_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_wpkorg35::hpf_a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::hpf_a",1,"sp_wpkorg35 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_wpkorg35::hpf_a",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_hpf_a_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->hpf_a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_hpf_a_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_wpkorg35::hpf_a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::hpf_a",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_hpf_a_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (float) ((arg1)->hpf_a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_hpf_b_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_wpkorg35::hpf_b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::hpf_b",1,"sp_wpkorg35 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_wpkorg35::hpf_b",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_hpf_b_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->hpf_b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_hpf_b_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_wpkorg35::hpf_b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::hpf_b",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_hpf_b_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (float) ((arg1)->hpf_b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_hpf_z_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_wpkorg35::hpf_z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::hpf_z",1,"sp_wpkorg35 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_wpkorg35::hpf_z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_hpf_z_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->hpf_z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_hpf_z_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_wpkorg35::hpf_z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::hpf_z",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_hpf_z_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (float) ((arg1)->hpf_z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_alpha_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_wpkorg35::alpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::alpha",1,"sp_wpkorg35 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_wpkorg35::alpha",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_alpha_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->alpha = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_alpha_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_wpkorg35::alpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::alpha",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_alpha_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (float) ((arg1)->alpha);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_cutoff_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_wpkorg35::cutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::cutoff",1,"sp_wpkorg35 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_wpkorg35::cutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_cutoff_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->cutoff = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_cutoff_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_wpkorg35::cutoff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::cutoff",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_cutoff_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (float) ((arg1)->cutoff);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_res_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_wpkorg35::res",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::res",1,"sp_wpkorg35 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_wpkorg35::res",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_res_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->res = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_res_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_wpkorg35::res",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::res",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_res_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (float) ((arg1)->res);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_saturation_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_wpkorg35::saturation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::saturation",1,"sp_wpkorg35 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_wpkorg35::saturation",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_saturation_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->saturation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_saturation_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_wpkorg35::saturation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::saturation",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_saturation_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (float) ((arg1)->saturation);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_pcutoff_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_wpkorg35::pcutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::pcutoff",1,"sp_wpkorg35 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_wpkorg35::pcutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_pcutoff_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pcutoff = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_pcutoff_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_wpkorg35::pcutoff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::pcutoff",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_pcutoff_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (float) ((arg1)->pcutoff);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_pres_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_wpkorg35::pres",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::pres",1,"sp_wpkorg35 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_wpkorg35::pres",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_pres_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pres = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_pres_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_wpkorg35::pres",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::pres",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_pres_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (float) ((arg1)->pres);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_nonlinear_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  SWIG_check_num_args("sp_wpkorg35::nonlinear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::nonlinear",1,"sp_wpkorg35 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sp_wpkorg35::nonlinear",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_nonlinear_set",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("sp_wpkorg35_nonlinear_set",2,SWIGTYPE_p_uint32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->nonlinear = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_nonlinear_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *arg1 = (sp_wpkorg35 *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("sp_wpkorg35::nonlinear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35::nonlinear",1,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_nonlinear_get",1,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result =  ((arg1)->nonlinear);
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_wpkorg35(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 *result = 0 ;
  
  SWIG_check_num_args("sp_wpkorg35::sp_wpkorg35",0,0)
  result = (sp_wpkorg35 *)new sp_wpkorg35();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_wpkorg35,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_wpkorg35(void *obj) {
sp_wpkorg35 *arg1 = (sp_wpkorg35 *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_wpkorg35(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_wpkorg35);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_wpkorg35_attributes[] = {
    { "lpf1_a", _wrap_sp_wpkorg35_lpf1_a_get, _wrap_sp_wpkorg35_lpf1_a_set },
    { "lpf1_z", _wrap_sp_wpkorg35_lpf1_z_get, _wrap_sp_wpkorg35_lpf1_z_set },
    { "lpf2_a", _wrap_sp_wpkorg35_lpf2_a_get, _wrap_sp_wpkorg35_lpf2_a_set },
    { "lpf2_b", _wrap_sp_wpkorg35_lpf2_b_get, _wrap_sp_wpkorg35_lpf2_b_set },
    { "lpf2_z", _wrap_sp_wpkorg35_lpf2_z_get, _wrap_sp_wpkorg35_lpf2_z_set },
    { "hpf_a", _wrap_sp_wpkorg35_hpf_a_get, _wrap_sp_wpkorg35_hpf_a_set },
    { "hpf_b", _wrap_sp_wpkorg35_hpf_b_get, _wrap_sp_wpkorg35_hpf_b_set },
    { "hpf_z", _wrap_sp_wpkorg35_hpf_z_get, _wrap_sp_wpkorg35_hpf_z_set },
    { "alpha", _wrap_sp_wpkorg35_alpha_get, _wrap_sp_wpkorg35_alpha_set },
    { "cutoff", _wrap_sp_wpkorg35_cutoff_get, _wrap_sp_wpkorg35_cutoff_set },
    { "res", _wrap_sp_wpkorg35_res_get, _wrap_sp_wpkorg35_res_set },
    { "saturation", _wrap_sp_wpkorg35_saturation_get, _wrap_sp_wpkorg35_saturation_set },
    { "pcutoff", _wrap_sp_wpkorg35_pcutoff_get, _wrap_sp_wpkorg35_pcutoff_set },
    { "pres", _wrap_sp_wpkorg35_pres_get, _wrap_sp_wpkorg35_pres_set },
    { "nonlinear", _wrap_sp_wpkorg35_nonlinear_get, _wrap_sp_wpkorg35_nonlinear_set },
    {0,0,0}
};
static swig_lua_method swig_sp_wpkorg35_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_wpkorg35_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_wpkorg35_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_wpkorg35_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_wpkorg35_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_wpkorg35_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_wpkorg35_Sf_SwigStatic = {
    "sp_wpkorg35",
    swig_sp_wpkorg35_Sf_SwigStatic_methods,
    swig_sp_wpkorg35_Sf_SwigStatic_attributes,
    swig_sp_wpkorg35_Sf_SwigStatic_constants,
    swig_sp_wpkorg35_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_wpkorg35_bases[] = {0};
static const char *swig_sp_wpkorg35_base_names[] = {0};
static swig_lua_class _wrap_class_sp_wpkorg35 = { "sp_wpkorg35", "sp_wpkorg35", &SWIGTYPE_p_sp_wpkorg35,_proxy__wrap_new_sp_wpkorg35, swig_delete_sp_wpkorg35, swig_sp_wpkorg35_methods, swig_sp_wpkorg35_attributes, &swig_sp_wpkorg35_Sf_SwigStatic, swig_sp_wpkorg35_meta, swig_sp_wpkorg35_bases, swig_sp_wpkorg35_base_names };

static int _wrap_sp_wpkorg35_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 **arg1 = (sp_wpkorg35 **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_wpkorg35_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35_create",1,"sp_wpkorg35 **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_create",1,SWIGTYPE_p_p_sp_wpkorg35);
  }
  
  result = (int)sp_wpkorg35_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_wpkorg35 **arg1 = (sp_wpkorg35 **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_wpkorg35_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35_destroy",1,"sp_wpkorg35 **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_destroy",1,SWIGTYPE_p_p_sp_wpkorg35);
  }
  
  result = (int)sp_wpkorg35_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_wpkorg35 *arg2 = (sp_wpkorg35 *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_wpkorg35_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_wpkorg35_init",2,"sp_wpkorg35 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_wpkorg35_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_init",2,SWIGTYPE_p_sp_wpkorg35);
  }
  
  result = (int)sp_wpkorg35_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_wpkorg35_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_wpkorg35 *arg2 = (sp_wpkorg35 *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_wpkorg35_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_wpkorg35_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_wpkorg35_compute",2,"sp_wpkorg35 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_wpkorg35_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_wpkorg35_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_wpkorg35_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_wpkorg35,0))){
    SWIG_fail_ptr("sp_wpkorg35_compute",2,SWIGTYPE_p_sp_wpkorg35);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_wpkorg35_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_wpkorg35_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_wpkorg35_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_faust_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("sp_zitarev::faust",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::faust",1,"sp_zitarev *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev::faust",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_faust_set",1,SWIGTYPE_p_sp_zitarev);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sp_zitarev_faust_set");
  if (arg1) (arg1)->faust = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_faust_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("sp_zitarev::faust",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::faust",1,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_faust_get",1,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (void *) ((arg1)->faust);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_argpos_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sp_zitarev::argpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::argpos",1,"sp_zitarev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_zitarev::argpos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_argpos_set",1,SWIGTYPE_p_sp_zitarev);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->argpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_argpos_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_zitarev::argpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::argpos",1,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_argpos_get",1,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (int) ((arg1)->argpos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_args_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float **arg2 ;
  
  SWIG_check_num_args("sp_zitarev::args",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::args",1,"sp_zitarev *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev::args",2,"float *[11]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_args_set",1,SWIGTYPE_p_sp_zitarev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("sp_zitarev_args_set",2,SWIGTYPE_p_p_float);
  }
  
  {
    size_t ii;
    float * *b = (float * *) arg1->args;
    for (ii = 0; ii < (size_t)11; ii++) b[ii] = *((float * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_args_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float **result = 0 ;
  
  SWIG_check_num_args("sp_zitarev::args",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::args",1,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_args_get",1,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (float **)(float **) ((arg1)->args);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_in_delay_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_zitarev::in_delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::in_delay",1,"sp_zitarev *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev::in_delay",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_in_delay_set",1,SWIGTYPE_p_sp_zitarev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_zitarev_in_delay_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->in_delay = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_in_delay_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_zitarev::in_delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::in_delay",1,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_in_delay_get",1,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (float *) ((arg1)->in_delay);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_lf_x_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_zitarev::lf_x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::lf_x",1,"sp_zitarev *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev::lf_x",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_lf_x_set",1,SWIGTYPE_p_sp_zitarev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_zitarev_lf_x_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->lf_x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_lf_x_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_zitarev::lf_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::lf_x",1,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_lf_x_get",1,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (float *) ((arg1)->lf_x);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_rt60_low_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_zitarev::rt60_low",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::rt60_low",1,"sp_zitarev *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev::rt60_low",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_rt60_low_set",1,SWIGTYPE_p_sp_zitarev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_zitarev_rt60_low_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->rt60_low = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_rt60_low_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_zitarev::rt60_low",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::rt60_low",1,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_rt60_low_get",1,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (float *) ((arg1)->rt60_low);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_rt60_mid_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_zitarev::rt60_mid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::rt60_mid",1,"sp_zitarev *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev::rt60_mid",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_rt60_mid_set",1,SWIGTYPE_p_sp_zitarev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_zitarev_rt60_mid_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->rt60_mid = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_rt60_mid_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_zitarev::rt60_mid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::rt60_mid",1,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_rt60_mid_get",1,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (float *) ((arg1)->rt60_mid);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_hf_damping_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_zitarev::hf_damping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::hf_damping",1,"sp_zitarev *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev::hf_damping",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_hf_damping_set",1,SWIGTYPE_p_sp_zitarev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_zitarev_hf_damping_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->hf_damping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_hf_damping_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_zitarev::hf_damping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::hf_damping",1,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_hf_damping_get",1,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (float *) ((arg1)->hf_damping);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_eq1_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_zitarev::eq1_freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::eq1_freq",1,"sp_zitarev *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev::eq1_freq",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_eq1_freq_set",1,SWIGTYPE_p_sp_zitarev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_zitarev_eq1_freq_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->eq1_freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_eq1_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_zitarev::eq1_freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::eq1_freq",1,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_eq1_freq_get",1,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (float *) ((arg1)->eq1_freq);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_eq1_level_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_zitarev::eq1_level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::eq1_level",1,"sp_zitarev *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev::eq1_level",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_eq1_level_set",1,SWIGTYPE_p_sp_zitarev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_zitarev_eq1_level_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->eq1_level = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_eq1_level_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_zitarev::eq1_level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::eq1_level",1,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_eq1_level_get",1,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (float *) ((arg1)->eq1_level);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_eq2_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_zitarev::eq2_freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::eq2_freq",1,"sp_zitarev *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev::eq2_freq",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_eq2_freq_set",1,SWIGTYPE_p_sp_zitarev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_zitarev_eq2_freq_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->eq2_freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_eq2_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_zitarev::eq2_freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::eq2_freq",1,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_eq2_freq_get",1,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (float *) ((arg1)->eq2_freq);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_eq2_level_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_zitarev::eq2_level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::eq2_level",1,"sp_zitarev *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev::eq2_level",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_eq2_level_set",1,SWIGTYPE_p_sp_zitarev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_zitarev_eq2_level_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->eq2_level = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_eq2_level_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_zitarev::eq2_level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::eq2_level",1,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_eq2_level_get",1,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (float *) ((arg1)->eq2_level);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_mix_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_zitarev::mix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::mix",1,"sp_zitarev *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev::mix",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_mix_set",1,SWIGTYPE_p_sp_zitarev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_zitarev_mix_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->mix = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_mix_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_zitarev::mix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::mix",1,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_mix_get",1,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (float *) ((arg1)->mix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_level_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("sp_zitarev::level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::level",1,"sp_zitarev *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev::level",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_level_set",1,SWIGTYPE_p_sp_zitarev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_zitarev_level_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->level = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_level_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *arg1 = (sp_zitarev *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("sp_zitarev::level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev::level",1,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_level_get",1,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (float *) ((arg1)->level);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_zitarev(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev *result = 0 ;
  
  SWIG_check_num_args("sp_zitarev::sp_zitarev",0,0)
  result = (sp_zitarev *)new sp_zitarev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_zitarev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_zitarev(void *obj) {
sp_zitarev *arg1 = (sp_zitarev *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_zitarev(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_zitarev);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_zitarev_attributes[] = {
    { "faust", _wrap_sp_zitarev_faust_get, _wrap_sp_zitarev_faust_set },
    { "argpos", _wrap_sp_zitarev_argpos_get, _wrap_sp_zitarev_argpos_set },
    { "args", _wrap_sp_zitarev_args_get, _wrap_sp_zitarev_args_set },
    { "in_delay", _wrap_sp_zitarev_in_delay_get, _wrap_sp_zitarev_in_delay_set },
    { "lf_x", _wrap_sp_zitarev_lf_x_get, _wrap_sp_zitarev_lf_x_set },
    { "rt60_low", _wrap_sp_zitarev_rt60_low_get, _wrap_sp_zitarev_rt60_low_set },
    { "rt60_mid", _wrap_sp_zitarev_rt60_mid_get, _wrap_sp_zitarev_rt60_mid_set },
    { "hf_damping", _wrap_sp_zitarev_hf_damping_get, _wrap_sp_zitarev_hf_damping_set },
    { "eq1_freq", _wrap_sp_zitarev_eq1_freq_get, _wrap_sp_zitarev_eq1_freq_set },
    { "eq1_level", _wrap_sp_zitarev_eq1_level_get, _wrap_sp_zitarev_eq1_level_set },
    { "eq2_freq", _wrap_sp_zitarev_eq2_freq_get, _wrap_sp_zitarev_eq2_freq_set },
    { "eq2_level", _wrap_sp_zitarev_eq2_level_get, _wrap_sp_zitarev_eq2_level_set },
    { "mix", _wrap_sp_zitarev_mix_get, _wrap_sp_zitarev_mix_set },
    { "level", _wrap_sp_zitarev_level_get, _wrap_sp_zitarev_level_set },
    {0,0,0}
};
static swig_lua_method swig_sp_zitarev_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_zitarev_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_zitarev_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_zitarev_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_zitarev_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_zitarev_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_zitarev_Sf_SwigStatic = {
    "sp_zitarev",
    swig_sp_zitarev_Sf_SwigStatic_methods,
    swig_sp_zitarev_Sf_SwigStatic_attributes,
    swig_sp_zitarev_Sf_SwigStatic_constants,
    swig_sp_zitarev_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_zitarev_bases[] = {0};
static const char *swig_sp_zitarev_base_names[] = {0};
static swig_lua_class _wrap_class_sp_zitarev = { "sp_zitarev", "sp_zitarev", &SWIGTYPE_p_sp_zitarev,_proxy__wrap_new_sp_zitarev, swig_delete_sp_zitarev, swig_sp_zitarev_methods, swig_sp_zitarev_attributes, &swig_sp_zitarev_Sf_SwigStatic, swig_sp_zitarev_meta, swig_sp_zitarev_bases, swig_sp_zitarev_base_names };

static int _wrap_sp_zitarev_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev **arg1 = (sp_zitarev **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_zitarev_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev_create",1,"sp_zitarev **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_create",1,SWIGTYPE_p_p_sp_zitarev);
  }
  
  result = (int)sp_zitarev_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_zitarev **arg1 = (sp_zitarev **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_zitarev_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev_destroy",1,"sp_zitarev **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_destroy",1,SWIGTYPE_p_p_sp_zitarev);
  }
  
  result = (int)sp_zitarev_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_zitarev *arg2 = (sp_zitarev *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_zitarev_init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev_init",2,"sp_zitarev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_zitarev_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_init",2,SWIGTYPE_p_sp_zitarev);
  }
  
  result = (int)sp_zitarev_init(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_zitarev_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_zitarev *arg2 = (sp_zitarev *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_zitarev_compute",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_zitarev_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_zitarev_compute",2,"sp_zitarev *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_zitarev_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_zitarev_compute",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("sp_zitarev_compute",5,"float *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("sp_zitarev_compute",6,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_zitarev_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_zitarev,0))){
    SWIG_fail_ptr("sp_zitarev_compute",2,SWIGTYPE_p_sp_zitarev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_zitarev_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_zitarev_compute",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_zitarev_compute",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_zitarev_compute",6,SWIGTYPE_p_float);
  }
  
  result = (int)sp_zitarev_compute(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diskin_create(lua_State* L) {
  int SWIG_arg = 0;
  sp_diskin **arg1 = (sp_diskin **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_diskin_create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diskin_create",1,"sp_diskin **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_diskin,0))){
    SWIG_fail_ptr("sp_diskin_create",1,SWIGTYPE_p_p_sp_diskin);
  }
  
  result = (int)sp_diskin_create(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diskin_destroy(lua_State* L) {
  int SWIG_arg = 0;
  sp_diskin **arg1 = (sp_diskin **) 0 ;
  int result;
  
  SWIG_check_num_args("sp_diskin_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diskin_destroy",1,"sp_diskin **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_sp_diskin,0))){
    SWIG_fail_ptr("sp_diskin_destroy",1,SWIGTYPE_p_p_sp_diskin);
  }
  
  result = (int)sp_diskin_destroy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diskin_init(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_diskin *arg2 = (sp_diskin *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_diskin_init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diskin_init",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_diskin_init",2,"sp_diskin *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sp_diskin_init",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_diskin_init",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_diskin,0))){
    SWIG_fail_ptr("sp_diskin_init",2,SWIGTYPE_p_sp_diskin);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)sp_diskin_init(arg1,arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_diskin_compute(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_diskin *arg2 = (sp_diskin *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_diskin_compute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_diskin_compute",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_diskin_compute",2,"sp_diskin *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_diskin_compute",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_diskin_compute",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_diskin_compute",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_diskin,0))){
    SWIG_fail_ptr("sp_diskin_compute",2,SWIGTYPE_p_sp_diskin);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_diskin_compute",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_diskin_compute",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_diskin_compute(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTFREQS_size_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTFREQS *arg1 = (FFTFREQS *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("FFTFREQS::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTFREQS::size",1,"FFTFREQS *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FFTFREQS::size",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTFREQS,0))){
    SWIG_fail_ptr("FFTFREQS_size_set",1,SWIGTYPE_p_FFTFREQS);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTFREQS_size_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTFREQS *arg1 = (FFTFREQS *) 0 ;
  int result;
  
  SWIG_check_num_args("FFTFREQS::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTFREQS::size",1,"FFTFREQS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTFREQS,0))){
    SWIG_fail_ptr("FFTFREQS_size_get",1,SWIGTYPE_p_FFTFREQS);
  }
  
  result = (int) ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTFREQS_s_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTFREQS *arg1 = (FFTFREQS *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("FFTFREQS::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTFREQS::s",1,"FFTFREQS *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTFREQS::s",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTFREQS,0))){
    SWIG_fail_ptr("FFTFREQS_s_set",1,SWIGTYPE_p_FFTFREQS);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTFREQS_s_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTFREQS_s_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTFREQS *arg1 = (FFTFREQS *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("FFTFREQS::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTFREQS::s",1,"FFTFREQS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTFREQS,0))){
    SWIG_fail_ptr("FFTFREQS_s_get",1,SWIGTYPE_p_FFTFREQS);
  }
  
  result = (float *) ((arg1)->s);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTFREQS_c_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTFREQS *arg1 = (FFTFREQS *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("FFTFREQS::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTFREQS::c",1,"FFTFREQS *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTFREQS::c",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTFREQS,0))){
    SWIG_fail_ptr("FFTFREQS_c_set",1,SWIGTYPE_p_FFTFREQS);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTFREQS_c_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->c = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTFREQS_c_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTFREQS *arg1 = (FFTFREQS *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("FFTFREQS::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTFREQS::c",1,"FFTFREQS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTFREQS,0))){
    SWIG_fail_ptr("FFTFREQS_c_get",1,SWIGTYPE_p_FFTFREQS);
  }
  
  result = (float *) ((arg1)->c);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTFREQS(lua_State* L) {
  int SWIG_arg = 0;
  FFTFREQS *result = 0 ;
  
  SWIG_check_num_args("FFTFREQS::FFTFREQS",0,0)
  result = (FFTFREQS *)new FFTFREQS();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FFTFREQS,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTFREQS(void *obj) {
FFTFREQS *arg1 = (FFTFREQS *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTFREQS(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTFREQS);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTFREQS_attributes[] = {
    { "size", _wrap_FFTFREQS_size_get, _wrap_FFTFREQS_size_set },
    { "s", _wrap_FFTFREQS_s_get, _wrap_FFTFREQS_s_set },
    { "c", _wrap_FFTFREQS_c_get, _wrap_FFTFREQS_c_set },
    {0,0,0}
};
static swig_lua_method swig_FFTFREQS_methods[]= {
    {0,0}
};
static swig_lua_method swig_FFTFREQS_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTFREQS_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTFREQS_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTFREQS_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTFREQS_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTFREQS_Sf_SwigStatic = {
    "FFTFREQS",
    swig_FFTFREQS_Sf_SwigStatic_methods,
    swig_FFTFREQS_Sf_SwigStatic_attributes,
    swig_FFTFREQS_Sf_SwigStatic_constants,
    swig_FFTFREQS_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTFREQS_bases[] = {0};
static const char *swig_FFTFREQS_base_names[] = {0};
static swig_lua_class _wrap_class_FFTFREQS = { "FFTFREQS", "FFTFREQS", &SWIGTYPE_p_FFTFREQS,_proxy__wrap_new_FFTFREQS, swig_delete_FFTFREQS, swig_FFTFREQS_methods, swig_FFTFREQS_attributes, &swig_FFTFREQS_Sf_SwigStatic, swig_FFTFREQS_meta, swig_FFTFREQS_bases, swig_FFTFREQS_base_names };

static int _wrap_FFTwrapper_fftsize_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper *arg1 = (FFTwrapper *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("FFTwrapper::fftsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTwrapper::fftsize",1,"FFTwrapper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FFTwrapper::fftsize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTwrapper,0))){
    SWIG_fail_ptr("FFTwrapper_fftsize_set",1,SWIGTYPE_p_FFTwrapper);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->fftsize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTwrapper_fftsize_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper *arg1 = (FFTwrapper *) 0 ;
  int result;
  
  SWIG_check_num_args("FFTwrapper::fftsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTwrapper::fftsize",1,"FFTwrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTwrapper,0))){
    SWIG_fail_ptr("FFTwrapper_fftsize_get",1,SWIGTYPE_p_FFTwrapper);
  }
  
  result = (int) ((arg1)->fftsize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTwrapper_fft_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper *arg1 = (FFTwrapper *) 0 ;
  kiss_fftr_cfg arg2 = (kiss_fftr_cfg) 0 ;
  
  SWIG_check_num_args("FFTwrapper::fft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTwrapper::fft",1,"FFTwrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTwrapper::fft",2,"kiss_fftr_cfg");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTwrapper,0))){
    SWIG_fail_ptr("FFTwrapper_fft_set",1,SWIGTYPE_p_FFTwrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kiss_fftr_state,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTwrapper_fft_set",2,SWIGTYPE_p_kiss_fftr_state);
  }
  
  if (arg1) (arg1)->fft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTwrapper_fft_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper *arg1 = (FFTwrapper *) 0 ;
  kiss_fftr_cfg result;
  
  SWIG_check_num_args("FFTwrapper::fft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTwrapper::fft",1,"FFTwrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTwrapper,0))){
    SWIG_fail_ptr("FFTwrapper_fft_get",1,SWIGTYPE_p_FFTwrapper);
  }
  
  result = (kiss_fftr_cfg) ((arg1)->fft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kiss_fftr_state,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTwrapper_ifft_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper *arg1 = (FFTwrapper *) 0 ;
  kiss_fftr_cfg arg2 = (kiss_fftr_cfg) 0 ;
  
  SWIG_check_num_args("FFTwrapper::ifft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTwrapper::ifft",1,"FFTwrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTwrapper::ifft",2,"kiss_fftr_cfg");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTwrapper,0))){
    SWIG_fail_ptr("FFTwrapper_ifft_set",1,SWIGTYPE_p_FFTwrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kiss_fftr_state,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTwrapper_ifft_set",2,SWIGTYPE_p_kiss_fftr_state);
  }
  
  if (arg1) (arg1)->ifft = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTwrapper_ifft_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper *arg1 = (FFTwrapper *) 0 ;
  kiss_fftr_cfg result;
  
  SWIG_check_num_args("FFTwrapper::ifft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTwrapper::ifft",1,"FFTwrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTwrapper,0))){
    SWIG_fail_ptr("FFTwrapper_ifft_get",1,SWIGTYPE_p_FFTwrapper);
  }
  
  result = (kiss_fftr_cfg) ((arg1)->ifft);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kiss_fftr_state,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTwrapper_tmp1_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper *arg1 = (FFTwrapper *) 0 ;
  kiss_fft_cpx *arg2 = (kiss_fft_cpx *) 0 ;
  
  SWIG_check_num_args("FFTwrapper::tmp1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTwrapper::tmp1",1,"FFTwrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTwrapper::tmp1",2,"kiss_fft_cpx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTwrapper,0))){
    SWIG_fail_ptr("FFTwrapper_tmp1_set",1,SWIGTYPE_p_FFTwrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kiss_fft_cpx,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTwrapper_tmp1_set",2,SWIGTYPE_p_kiss_fft_cpx);
  }
  
  if (arg1) (arg1)->tmp1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTwrapper_tmp1_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper *arg1 = (FFTwrapper *) 0 ;
  kiss_fft_cpx *result = 0 ;
  
  SWIG_check_num_args("FFTwrapper::tmp1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTwrapper::tmp1",1,"FFTwrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTwrapper,0))){
    SWIG_fail_ptr("FFTwrapper_tmp1_get",1,SWIGTYPE_p_FFTwrapper);
  }
  
  result = (kiss_fft_cpx *) ((arg1)->tmp1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kiss_fft_cpx,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTwrapper_tmp2_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper *arg1 = (FFTwrapper *) 0 ;
  kiss_fft_cpx *arg2 = (kiss_fft_cpx *) 0 ;
  
  SWIG_check_num_args("FFTwrapper::tmp2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTwrapper::tmp2",1,"FFTwrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTwrapper::tmp2",2,"kiss_fft_cpx *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTwrapper,0))){
    SWIG_fail_ptr("FFTwrapper_tmp2_set",1,SWIGTYPE_p_FFTwrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kiss_fft_cpx,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTwrapper_tmp2_set",2,SWIGTYPE_p_kiss_fft_cpx);
  }
  
  if (arg1) (arg1)->tmp2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTwrapper_tmp2_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper *arg1 = (FFTwrapper *) 0 ;
  kiss_fft_cpx *result = 0 ;
  
  SWIG_check_num_args("FFTwrapper::tmp2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTwrapper::tmp2",1,"FFTwrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTwrapper,0))){
    SWIG_fail_ptr("FFTwrapper_tmp2_get",1,SWIGTYPE_p_FFTwrapper);
  }
  
  result = (kiss_fft_cpx *) ((arg1)->tmp2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kiss_fft_cpx,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTwrapper(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper *result = 0 ;
  
  SWIG_check_num_args("FFTwrapper::FFTwrapper",0,0)
  result = (FFTwrapper *)new FFTwrapper();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FFTwrapper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTwrapper(void *obj) {
FFTwrapper *arg1 = (FFTwrapper *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTwrapper(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTwrapper);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTwrapper_attributes[] = {
    { "fftsize", _wrap_FFTwrapper_fftsize_get, _wrap_FFTwrapper_fftsize_set },
    { "fft", _wrap_FFTwrapper_fft_get, _wrap_FFTwrapper_fft_set },
    { "ifft", _wrap_FFTwrapper_ifft_get, _wrap_FFTwrapper_ifft_set },
    { "tmp1", _wrap_FFTwrapper_tmp1_get, _wrap_FFTwrapper_tmp1_set },
    { "tmp2", _wrap_FFTwrapper_tmp2_get, _wrap_FFTwrapper_tmp2_set },
    {0,0,0}
};
static swig_lua_method swig_FFTwrapper_methods[]= {
    {0,0}
};
static swig_lua_method swig_FFTwrapper_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTwrapper_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTwrapper_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTwrapper_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTwrapper_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTwrapper_Sf_SwigStatic = {
    "FFTwrapper",
    swig_FFTwrapper_Sf_SwigStatic_methods,
    swig_FFTwrapper_Sf_SwigStatic_attributes,
    swig_FFTwrapper_Sf_SwigStatic_constants,
    swig_FFTwrapper_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTwrapper_bases[] = {0};
static const char *swig_FFTwrapper_base_names[] = {0};
static swig_lua_class _wrap_class_FFTwrapper = { "FFTwrapper", "FFTwrapper", &SWIGTYPE_p_FFTwrapper,_proxy__wrap_new_FFTwrapper, swig_delete_FFTwrapper, swig_FFTwrapper_methods, swig_FFTwrapper_attributes, &swig_FFTwrapper_Sf_SwigStatic, swig_FFTwrapper_meta, swig_FFTwrapper_bases, swig_FFTwrapper_base_names };

static int _wrap_FFTwrapper_create(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper **arg1 = (FFTwrapper **) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("FFTwrapper_create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTwrapper_create",1,"FFTwrapper **");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FFTwrapper_create",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_FFTwrapper,0))){
    SWIG_fail_ptr("FFTwrapper_create",1,SWIGTYPE_p_p_FFTwrapper);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  FFTwrapper_create(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTwrapper_destroy(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper **arg1 = (FFTwrapper **) 0 ;
  
  SWIG_check_num_args("FFTwrapper_destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTwrapper_destroy",1,"FFTwrapper **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_FFTwrapper,0))){
    SWIG_fail_ptr("FFTwrapper_destroy",1,SWIGTYPE_p_p_FFTwrapper);
  }
  
  FFTwrapper_destroy(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_newFFTFREQS(lua_State* L) {
  int SWIG_arg = 0;
  FFTFREQS *arg1 = (FFTFREQS *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("newFFTFREQS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("newFFTFREQS",1,"FFTFREQS *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("newFFTFREQS",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTFREQS,0))){
    SWIG_fail_ptr("newFFTFREQS",1,SWIGTYPE_p_FFTFREQS);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  newFFTFREQS(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deleteFFTFREQS(lua_State* L) {
  int SWIG_arg = 0;
  FFTFREQS *arg1 = (FFTFREQS *) 0 ;
  
  SWIG_check_num_args("deleteFFTFREQS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("deleteFFTFREQS",1,"FFTFREQS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTFREQS,0))){
    SWIG_fail_ptr("deleteFFTFREQS",1,SWIGTYPE_p_FFTFREQS);
  }
  
  deleteFFTFREQS(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_smps2freqs(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper *arg1 = (FFTwrapper *) 0 ;
  float *arg2 = (float *) 0 ;
  FFTFREQS *arg3 = (FFTFREQS *) 0 ;
  
  SWIG_check_num_args("smps2freqs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("smps2freqs",1,"FFTwrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("smps2freqs",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("smps2freqs",3,"FFTFREQS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTwrapper,0))){
    SWIG_fail_ptr("smps2freqs",1,SWIGTYPE_p_FFTwrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("smps2freqs",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FFTFREQS,0))){
    SWIG_fail_ptr("smps2freqs",3,SWIGTYPE_p_FFTFREQS);
  }
  
  smps2freqs(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_freqs2smps(lua_State* L) {
  int SWIG_arg = 0;
  FFTwrapper *arg1 = (FFTwrapper *) 0 ;
  FFTFREQS *arg2 = (FFTFREQS *) 0 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("freqs2smps",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("freqs2smps",1,"FFTwrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("freqs2smps",2,"FFTFREQS *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("freqs2smps",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTwrapper,0))){
    SWIG_fail_ptr("freqs2smps",1,SWIGTYPE_p_FFTwrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FFTFREQS,0))){
    SWIG_fail_ptr("freqs2smps",2,SWIGTYPE_p_FFTFREQS);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("freqs2smps",3,SWIGTYPE_p_float);
  }
  
  freqs2smps(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_padsynth_cps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_padsynth *arg1 = (sp_padsynth *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_padsynth::cps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_padsynth::cps",1,"sp_padsynth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_padsynth::cps",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_padsynth,0))){
    SWIG_fail_ptr("sp_padsynth_cps_set",1,SWIGTYPE_p_sp_padsynth);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->cps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_padsynth_cps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_padsynth *arg1 = (sp_padsynth *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_padsynth::cps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_padsynth::cps",1,"sp_padsynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_padsynth,0))){
    SWIG_fail_ptr("sp_padsynth_cps_get",1,SWIGTYPE_p_sp_padsynth);
  }
  
  result = (float) ((arg1)->cps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_padsynth_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_padsynth *arg1 = (sp_padsynth *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("sp_padsynth::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_padsynth::bw",1,"sp_padsynth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_padsynth::bw",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_padsynth,0))){
    SWIG_fail_ptr("sp_padsynth_bw_set",1,SWIGTYPE_p_sp_padsynth);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_padsynth_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_padsynth *arg1 = (sp_padsynth *) 0 ;
  float result;
  
  SWIG_check_num_args("sp_padsynth::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_padsynth::bw",1,"sp_padsynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_padsynth,0))){
    SWIG_fail_ptr("sp_padsynth_bw_get",1,SWIGTYPE_p_sp_padsynth);
  }
  
  result = (float) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_padsynth_amps_set(lua_State* L) {
  int SWIG_arg = 0;
  sp_padsynth *arg1 = (sp_padsynth *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  
  SWIG_check_num_args("sp_padsynth::amps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_padsynth::amps",1,"sp_padsynth *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_padsynth::amps",2,"sp_ftbl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_padsynth,0))){
    SWIG_fail_ptr("sp_padsynth_amps_set",1,SWIGTYPE_p_sp_padsynth);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("sp_padsynth_amps_set",2,SWIGTYPE_p_sp_ftbl);
  }
  
  if (arg1) (arg1)->amps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_padsynth_amps_get(lua_State* L) {
  int SWIG_arg = 0;
  sp_padsynth *arg1 = (sp_padsynth *) 0 ;
  sp_ftbl *result = 0 ;
  
  SWIG_check_num_args("sp_padsynth::amps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_padsynth::amps",1,"sp_padsynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_padsynth,0))){
    SWIG_fail_ptr("sp_padsynth_amps_get",1,SWIGTYPE_p_sp_padsynth);
  }
  
  result = (sp_ftbl *) ((arg1)->amps);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_ftbl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sp_padsynth(lua_State* L) {
  int SWIG_arg = 0;
  sp_padsynth *result = 0 ;
  
  SWIG_check_num_args("sp_padsynth::sp_padsynth",0,0)
  result = (sp_padsynth *)new sp_padsynth();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sp_padsynth,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sp_padsynth(void *obj) {
sp_padsynth *arg1 = (sp_padsynth *) obj;
delete arg1;
}
static int _proxy__wrap_new_sp_padsynth(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sp_padsynth);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sp_padsynth_attributes[] = {
    { "cps", _wrap_sp_padsynth_cps_get, _wrap_sp_padsynth_cps_set },
    { "bw", _wrap_sp_padsynth_bw_get, _wrap_sp_padsynth_bw_set },
    { "amps", _wrap_sp_padsynth_amps_get, _wrap_sp_padsynth_amps_set },
    {0,0,0}
};
static swig_lua_method swig_sp_padsynth_methods[]= {
    {0,0}
};
static swig_lua_method swig_sp_padsynth_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sp_padsynth_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sp_padsynth_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sp_padsynth_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sp_padsynth_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sp_padsynth_Sf_SwigStatic = {
    "sp_padsynth",
    swig_sp_padsynth_Sf_SwigStatic_methods,
    swig_sp_padsynth_Sf_SwigStatic_attributes,
    swig_sp_padsynth_Sf_SwigStatic_constants,
    swig_sp_padsynth_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sp_padsynth_bases[] = {0};
static const char *swig_sp_padsynth_base_names[] = {0};
static swig_lua_class _wrap_class_sp_padsynth = { "sp_padsynth", "sp_padsynth", &SWIGTYPE_p_sp_padsynth,_proxy__wrap_new_sp_padsynth, swig_delete_sp_padsynth, swig_sp_padsynth_methods, swig_sp_padsynth_attributes, &swig_sp_padsynth_Sf_SwigStatic, swig_sp_padsynth_meta, swig_sp_padsynth_bases, swig_sp_padsynth_base_names };

static int _wrap_sp_gen_padsynth(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_ftbl *arg2 = (sp_ftbl *) 0 ;
  sp_ftbl *arg3 = (sp_ftbl *) 0 ;
  float arg4 ;
  float arg5 ;
  int result;
  
  SWIG_check_num_args("sp_gen_padsynth",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sp_gen_padsynth",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_gen_padsynth",2,"sp_ftbl *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_gen_padsynth",3,"sp_ftbl *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("sp_gen_padsynth",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("sp_gen_padsynth",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("sp_gen_padsynth",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gen_padsynth",2,SWIGTYPE_p_sp_ftbl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_sp_ftbl,0))){
    SWIG_fail_ptr("sp_gen_padsynth",3,SWIGTYPE_p_sp_ftbl);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (int)sp_gen_padsynth(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_padsynth_profile(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("sp_padsynth_profile",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sp_padsynth_profile",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sp_padsynth_profile",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)sp_padsynth_profile(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_padsynth_ifft(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_padsynth_ifft",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sp_padsynth_ifft",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_padsynth_ifft",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("sp_padsynth_ifft",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("sp_padsynth_ifft",4,"float *");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_padsynth_ifft",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_padsynth_ifft",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_padsynth_ifft",4,SWIGTYPE_p_float);
  }
  
  result = (int)sp_padsynth_ifft(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sp_padsynth_normalize(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("sp_padsynth_normalize",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sp_padsynth_normalize",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sp_padsynth_normalize",2,"float *");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sp_padsynth_normalize",2,SWIGTYPE_p_float);
  }
  
  result = (int)sp_padsynth_normalize(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_spa_open(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_audio *arg2 = (sp_audio *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("spa_open",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("spa_open",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("spa_open",2,"sp_audio *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("spa_open",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("spa_open",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("spa_open",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("spa_open",2,SWIGTYPE_p_sp_audio);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)spa_open(arg1,arg2,(char const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_spa_write_buf(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_audio *arg2 = (sp_audio *) 0 ;
  float *arg3 = (float *) 0 ;
  uint32_t arg4 ;
  uint32_t *argp4 ;
  size_t result;
  
  SWIG_check_num_args("spa_write_buf",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("spa_write_buf",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("spa_write_buf",2,"sp_audio *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("spa_write_buf",3,"float *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("spa_write_buf",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("spa_write_buf",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("spa_write_buf",2,SWIGTYPE_p_sp_audio);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("spa_write_buf",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("spa_write_buf",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  result = spa_write_buf(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_spa_read_buf(lua_State* L) {
  int SWIG_arg = 0;
  sp_data *arg1 = (sp_data *) 0 ;
  sp_audio *arg2 = (sp_audio *) 0 ;
  float *arg3 = (float *) 0 ;
  uint32_t arg4 ;
  uint32_t *argp4 ;
  size_t result;
  
  SWIG_check_num_args("spa_read_buf",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("spa_read_buf",1,"sp_data *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("spa_read_buf",2,"sp_audio *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("spa_read_buf",3,"float *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("spa_read_buf",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_data,0))){
    SWIG_fail_ptr("spa_read_buf",1,SWIGTYPE_p_sp_data);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("spa_read_buf",2,SWIGTYPE_p_sp_audio);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("spa_read_buf",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("spa_read_buf",4,SWIGTYPE_p_uint32_t);
  }
  arg4 = *argp4;
  
  result = spa_read_buf(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_spa_close(lua_State* L) {
  int SWIG_arg = 0;
  sp_audio *arg1 = (sp_audio *) 0 ;
  int result;
  
  SWIG_check_num_args("spa_close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("spa_close",1,"sp_audio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sp_audio,0))){
    SWIG_fail_ptr("spa_close",1,SWIGTYPE_p_sp_audio);
  }
  
  result = (int)spa_close(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("SP_BUFSIZE", 4096)},
    {SWIG_LUA_CONSTTAB_INT("SP_OK", 1)},
    {SWIG_LUA_CONSTTAB_INT("SP_NOT_OK", 0)},
    {SWIG_LUA_CONSTTAB_INT("SP_RANDMAX", 2147483648)},
    {SWIG_LUA_CONSTTAB_INT("SPA_READ", SPA_READ)},
    {SWIG_LUA_CONSTTAB_INT("SPA_WRITE", SPA_WRITE)},
    {SWIG_LUA_CONSTTAB_INT("SPA_NULL", SPA_NULL)},
    {SWIG_LUA_CONSTTAB_INT("SP_FT_MAXLEN", 0x1000000L)},
    {SWIG_LUA_CONSTTAB_INT("SP_FT_PHMASK", 0x0FFFFFFL)},
    {SWIG_LUA_CONSTTAB_INT("SP_TALKBOX_BUFMAX", 1600)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "sp_auxdata_alloc", _wrap_sp_auxdata_alloc},
    { "sp_auxdata_free", _wrap_sp_auxdata_free},
    { "sp_create", _wrap_sp_create},
    { "sp_createn", _wrap_sp_createn},
    { "sp_destroy", _wrap_sp_destroy},
    { "sp_process", _wrap_sp_process},
    { "sp_process_raw", _wrap_sp_process_raw},
    { "sp_process_plot", _wrap_sp_process_plot},
    { "sp_process_spa", _wrap_sp_process_spa},
    { "sp_midi2cps", _wrap_sp_midi2cps},
    { "sp_set", _wrap_sp_set},
    { "sp_out", _wrap_sp_out},
    { "sp_rand", _wrap_sp_rand},
    { "sp_srand", _wrap_sp_srand},
    { "sp_fft_init", _wrap_sp_fft_init},
    { "sp_fftr", _wrap_sp_fftr},
    { "sp_fft_cpx", _wrap_sp_fft_cpx},
    { "sp_ifftr", _wrap_sp_ifftr},
    { "sp_fft_destroy", _wrap_sp_fft_destroy},
    { "sp_ftbl_create", _wrap_sp_ftbl_create},
    { "sp_ftbl_init", _wrap_sp_ftbl_init},
    { "sp_ftbl_bind", _wrap_sp_ftbl_bind},
    { "sp_ftbl_destroy", _wrap_sp_ftbl_destroy},
    { "sp_gen_vals", _wrap_sp_gen_vals},
    { "sp_gen_sine", _wrap_sp_gen_sine},
    { "sp_gen_file", _wrap_sp_gen_file},
    { "sp_gen_sinesum", _wrap_sp_gen_sinesum},
    { "sp_gen_line", _wrap_sp_gen_line},
    { "sp_gen_xline", _wrap_sp_gen_xline},
    { "sp_gen_gauss", _wrap_sp_gen_gauss},
    { "sp_ftbl_loadfile", _wrap_sp_ftbl_loadfile},
    { "sp_ftbl_loadspa", _wrap_sp_ftbl_loadspa},
    { "sp_gen_composite", _wrap_sp_gen_composite},
    { "sp_gen_rand", _wrap_sp_gen_rand},
    { "sp_gen_triangle", _wrap_sp_gen_triangle},
    { "sp_tevent_create", _wrap_sp_tevent_create},
    { "sp_tevent_destroy", _wrap_sp_tevent_destroy},
    { "sp_tevent_init", _wrap_sp_tevent_init},
    { "sp_tevent_compute", _wrap_sp_tevent_compute},
    { "sp_adsr_create", _wrap_sp_adsr_create},
    { "sp_adsr_destroy", _wrap_sp_adsr_destroy},
    { "sp_adsr_init", _wrap_sp_adsr_init},
    { "sp_adsr_compute", _wrap_sp_adsr_compute},
    { "sp_allpass_create", _wrap_sp_allpass_create},
    { "sp_allpass_destroy", _wrap_sp_allpass_destroy},
    { "sp_allpass_init", _wrap_sp_allpass_init},
    { "sp_allpass_compute", _wrap_sp_allpass_compute},
    { "sp_atone_create", _wrap_sp_atone_create},
    { "sp_atone_destroy", _wrap_sp_atone_destroy},
    { "sp_atone_init", _wrap_sp_atone_init},
    { "sp_atone_compute", _wrap_sp_atone_compute},
    { "sp_autowah_create", _wrap_sp_autowah_create},
    { "sp_autowah_destroy", _wrap_sp_autowah_destroy},
    { "sp_autowah_init", _wrap_sp_autowah_init},
    { "sp_autowah_compute", _wrap_sp_autowah_compute},
    { "sp_bal_create", _wrap_sp_bal_create},
    { "sp_bal_destroy", _wrap_sp_bal_destroy},
    { "sp_bal_init", _wrap_sp_bal_init},
    { "sp_bal_compute", _wrap_sp_bal_compute},
    { "sp_bar_create", _wrap_sp_bar_create},
    { "sp_bar_destroy", _wrap_sp_bar_destroy},
    { "sp_bar_init", _wrap_sp_bar_init},
    { "sp_bar_compute", _wrap_sp_bar_compute},
    { "sp_biquad_create", _wrap_sp_biquad_create},
    { "sp_biquad_destroy", _wrap_sp_biquad_destroy},
    { "sp_biquad_init", _wrap_sp_biquad_init},
    { "sp_biquad_compute", _wrap_sp_biquad_compute},
    { "sp_biscale_create", _wrap_sp_biscale_create},
    { "sp_biscale_destroy", _wrap_sp_biscale_destroy},
    { "sp_biscale_init", _wrap_sp_biscale_init},
    { "sp_biscale_compute", _wrap_sp_biscale_compute},
    { "sp_blsaw_create", _wrap_sp_blsaw_create},
    { "sp_blsaw_destroy", _wrap_sp_blsaw_destroy},
    { "sp_blsaw_init", _wrap_sp_blsaw_init},
    { "sp_blsaw_compute", _wrap_sp_blsaw_compute},
    { "sp_blsquare_create", _wrap_sp_blsquare_create},
    { "sp_blsquare_destroy", _wrap_sp_blsquare_destroy},
    { "sp_blsquare_init", _wrap_sp_blsquare_init},
    { "sp_blsquare_compute", _wrap_sp_blsquare_compute},
    { "sp_bltriangle_create", _wrap_sp_bltriangle_create},
    { "sp_bltriangle_destroy", _wrap_sp_bltriangle_destroy},
    { "sp_bltriangle_init", _wrap_sp_bltriangle_init},
    { "sp_bltriangle_compute", _wrap_sp_bltriangle_compute},
    { "sp_fold_create", _wrap_sp_fold_create},
    { "sp_fold_destroy", _wrap_sp_fold_destroy},
    { "sp_fold_init", _wrap_sp_fold_init},
    { "sp_fold_compute", _wrap_sp_fold_compute},
    { "sp_bitcrush_create", _wrap_sp_bitcrush_create},
    { "sp_bitcrush_destroy", _wrap_sp_bitcrush_destroy},
    { "sp_bitcrush_init", _wrap_sp_bitcrush_init},
    { "sp_bitcrush_compute", _wrap_sp_bitcrush_compute},
    { "sp_brown_create", _wrap_sp_brown_create},
    { "sp_brown_destroy", _wrap_sp_brown_destroy},
    { "sp_brown_init", _wrap_sp_brown_init},
    { "sp_brown_compute", _wrap_sp_brown_compute},
    { "sp_butbp_create", _wrap_sp_butbp_create},
    { "sp_butbp_destroy", _wrap_sp_butbp_destroy},
    { "sp_butbp_init", _wrap_sp_butbp_init},
    { "sp_butbp_compute", _wrap_sp_butbp_compute},
    { "sp_butbr_create", _wrap_sp_butbr_create},
    { "sp_butbr_destroy", _wrap_sp_butbr_destroy},
    { "sp_butbr_init", _wrap_sp_butbr_init},
    { "sp_butbr_compute", _wrap_sp_butbr_compute},
    { "sp_buthp_create", _wrap_sp_buthp_create},
    { "sp_buthp_destroy", _wrap_sp_buthp_destroy},
    { "sp_buthp_init", _wrap_sp_buthp_init},
    { "sp_buthp_compute", _wrap_sp_buthp_compute},
    { "sp_butlp_create", _wrap_sp_butlp_create},
    { "sp_butlp_destroy", _wrap_sp_butlp_destroy},
    { "sp_butlp_init", _wrap_sp_butlp_init},
    { "sp_butlp_compute", _wrap_sp_butlp_compute},
    { "sp_clip_create", _wrap_sp_clip_create},
    { "sp_clip_destroy", _wrap_sp_clip_destroy},
    { "sp_clip_init", _wrap_sp_clip_init},
    { "sp_clip_compute", _wrap_sp_clip_compute},
    { "sp_clock_create", _wrap_sp_clock_create},
    { "sp_clock_destroy", _wrap_sp_clock_destroy},
    { "sp_clock_init", _wrap_sp_clock_init},
    { "sp_clock_compute", _wrap_sp_clock_compute},
    { "sp_comb_create", _wrap_sp_comb_create},
    { "sp_comb_destroy", _wrap_sp_comb_destroy},
    { "sp_comb_init", _wrap_sp_comb_init},
    { "sp_comb_compute", _wrap_sp_comb_compute},
    { "sp_compressor_create", _wrap_sp_compressor_create},
    { "sp_compressor_destroy", _wrap_sp_compressor_destroy},
    { "sp_compressor_init", _wrap_sp_compressor_init},
    { "sp_compressor_compute", _wrap_sp_compressor_compute},
    { "sp_count_create", _wrap_sp_count_create},
    { "sp_count_destroy", _wrap_sp_count_destroy},
    { "sp_count_init", _wrap_sp_count_init},
    { "sp_count_compute", _wrap_sp_count_compute},
    { "sp_conv_create", _wrap_sp_conv_create},
    { "sp_conv_destroy", _wrap_sp_conv_destroy},
    { "sp_conv_init", _wrap_sp_conv_init},
    { "sp_conv_compute", _wrap_sp_conv_compute},
    { "sp_crossfade_create", _wrap_sp_crossfade_create},
    { "sp_crossfade_destroy", _wrap_sp_crossfade_destroy},
    { "sp_crossfade_init", _wrap_sp_crossfade_init},
    { "sp_crossfade_compute", _wrap_sp_crossfade_compute},
    { "sp_dcblock_create", _wrap_sp_dcblock_create},
    { "sp_dcblock_destroy", _wrap_sp_dcblock_destroy},
    { "sp_dcblock_init", _wrap_sp_dcblock_init},
    { "sp_dcblock_compute", _wrap_sp_dcblock_compute},
    { "sp_delay_create", _wrap_sp_delay_create},
    { "sp_delay_destroy", _wrap_sp_delay_destroy},
    { "sp_delay_init", _wrap_sp_delay_init},
    { "sp_delay_compute", _wrap_sp_delay_compute},
    { "sp_diode_create", _wrap_sp_diode_create},
    { "sp_diode_destroy", _wrap_sp_diode_destroy},
    { "sp_diode_init", _wrap_sp_diode_init},
    { "sp_diode_compute", _wrap_sp_diode_compute},
    { "sp_dist_create", _wrap_sp_dist_create},
    { "sp_dist_destroy", _wrap_sp_dist_destroy},
    { "sp_dist_init", _wrap_sp_dist_init},
    { "sp_dist_compute", _wrap_sp_dist_compute},
    { "sp_dmetro_create", _wrap_sp_dmetro_create},
    { "sp_dmetro_destroy", _wrap_sp_dmetro_destroy},
    { "sp_dmetro_init", _wrap_sp_dmetro_init},
    { "sp_dmetro_compute", _wrap_sp_dmetro_compute},
    { "sp_drip_create", _wrap_sp_drip_create},
    { "sp_drip_destroy", _wrap_sp_drip_destroy},
    { "sp_drip_init", _wrap_sp_drip_init},
    { "sp_drip_compute", _wrap_sp_drip_compute},
    { "sp_dtrig_create", _wrap_sp_dtrig_create},
    { "sp_dtrig_destroy", _wrap_sp_dtrig_destroy},
    { "sp_dtrig_init", _wrap_sp_dtrig_init},
    { "sp_dtrig_compute", _wrap_sp_dtrig_compute},
    { "sp_dust_create", _wrap_sp_dust_create},
    { "sp_dust_destroy", _wrap_sp_dust_destroy},
    { "sp_dust_init", _wrap_sp_dust_init},
    { "sp_dust_compute", _wrap_sp_dust_compute},
    { "sp_eqfil_create", _wrap_sp_eqfil_create},
    { "sp_eqfil_destroy", _wrap_sp_eqfil_destroy},
    { "sp_eqfil_init", _wrap_sp_eqfil_init},
    { "sp_eqfil_compute", _wrap_sp_eqfil_compute},
    { "sp_expon_create", _wrap_sp_expon_create},
    { "sp_expon_destroy", _wrap_sp_expon_destroy},
    { "sp_expon_init", _wrap_sp_expon_init},
    { "sp_expon_compute", _wrap_sp_expon_compute},
    { "sp_fof_create", _wrap_sp_fof_create},
    { "sp_fof_destroy", _wrap_sp_fof_destroy},
    { "sp_fof_init", _wrap_sp_fof_init},
    { "sp_fof_compute", _wrap_sp_fof_compute},
    { "sp_fog_create", _wrap_sp_fog_create},
    { "sp_fog_destroy", _wrap_sp_fog_destroy},
    { "sp_fog_init", _wrap_sp_fog_init},
    { "sp_fog_compute", _wrap_sp_fog_compute},
    { "sp_fofilt_create", _wrap_sp_fofilt_create},
    { "sp_fofilt_destroy", _wrap_sp_fofilt_destroy},
    { "sp_fofilt_init", _wrap_sp_fofilt_init},
    { "sp_fofilt_compute", _wrap_sp_fofilt_compute},
    { "sp_foo_create", _wrap_sp_foo_create},
    { "sp_foo_destroy", _wrap_sp_foo_destroy},
    { "sp_foo_init", _wrap_sp_foo_init},
    { "sp_foo_compute", _wrap_sp_foo_compute},
    { "sp_fosc_create", _wrap_sp_fosc_create},
    { "sp_fosc_destroy", _wrap_sp_fosc_destroy},
    { "sp_fosc_init", _wrap_sp_fosc_init},
    { "sp_fosc_compute", _wrap_sp_fosc_compute},
    { "sp_gbuzz_create", _wrap_sp_gbuzz_create},
    { "sp_gbuzz_destroy", _wrap_sp_gbuzz_destroy},
    { "sp_gbuzz_init", _wrap_sp_gbuzz_init},
    { "sp_gbuzz_compute", _wrap_sp_gbuzz_compute},
    { "sp_hilbert_create", _wrap_sp_hilbert_create},
    { "sp_hilbert_destroy", _wrap_sp_hilbert_destroy},
    { "sp_hilbert_init", _wrap_sp_hilbert_init},
    { "sp_hilbert_compute", _wrap_sp_hilbert_compute},
    { "sp_in_create", _wrap_sp_in_create},
    { "sp_in_destroy", _wrap_sp_in_destroy},
    { "sp_in_init", _wrap_sp_in_init},
    { "sp_in_compute", _wrap_sp_in_compute},
    { "sp_incr_create", _wrap_sp_incr_create},
    { "sp_incr_destroy", _wrap_sp_incr_destroy},
    { "sp_incr_init", _wrap_sp_incr_init},
    { "sp_incr_compute", _wrap_sp_incr_compute},
    { "sp_jcrev_create", _wrap_sp_jcrev_create},
    { "sp_jcrev_destroy", _wrap_sp_jcrev_destroy},
    { "sp_jcrev_init", _wrap_sp_jcrev_init},
    { "sp_jcrev_compute", _wrap_sp_jcrev_compute},
    { "sp_jitter_create", _wrap_sp_jitter_create},
    { "sp_jitter_destroy", _wrap_sp_jitter_destroy},
    { "sp_jitter_init", _wrap_sp_jitter_init},
    { "sp_jitter_compute", _wrap_sp_jitter_compute},
    { "sp_line_create", _wrap_sp_line_create},
    { "sp_line_destroy", _wrap_sp_line_destroy},
    { "sp_line_init", _wrap_sp_line_init},
    { "sp_line_compute", _wrap_sp_line_compute},
    { "sp_lpc_create", _wrap_sp_lpc_create},
    { "sp_lpc_destroy", _wrap_sp_lpc_destroy},
    { "sp_lpc_init", _wrap_sp_lpc_init},
    { "sp_lpc_synth", _wrap_sp_lpc_synth},
    { "sp_lpc_compute", _wrap_sp_lpc_compute},
    { "sp_lpf18_create", _wrap_sp_lpf18_create},
    { "sp_lpf18_destroy", _wrap_sp_lpf18_destroy},
    { "sp_lpf18_init", _wrap_sp_lpf18_init},
    { "sp_lpf18_compute", _wrap_sp_lpf18_compute},
    { "sp_maygate_create", _wrap_sp_maygate_create},
    { "sp_maygate_destroy", _wrap_sp_maygate_destroy},
    { "sp_maygate_init", _wrap_sp_maygate_init},
    { "sp_maygate_compute", _wrap_sp_maygate_compute},
    { "sp_metro_create", _wrap_sp_metro_create},
    { "sp_metro_destroy", _wrap_sp_metro_destroy},
    { "sp_metro_init", _wrap_sp_metro_init},
    { "sp_metro_compute", _wrap_sp_metro_compute},
    { "sp_mincer_create", _wrap_sp_mincer_create},
    { "sp_mincer_destroy", _wrap_sp_mincer_destroy},
    { "sp_mincer_init", _wrap_sp_mincer_init},
    { "sp_mincer_compute", _wrap_sp_mincer_compute},
    { "sp_mode_create", _wrap_sp_mode_create},
    { "sp_mode_destroy", _wrap_sp_mode_destroy},
    { "sp_mode_init", _wrap_sp_mode_init},
    { "sp_mode_compute", _wrap_sp_mode_compute},
    { "sp_moogladder_create", _wrap_sp_moogladder_create},
    { "sp_moogladder_destroy", _wrap_sp_moogladder_destroy},
    { "sp_moogladder_init", _wrap_sp_moogladder_init},
    { "sp_moogladder_compute", _wrap_sp_moogladder_compute},
    { "sp_noise_create", _wrap_sp_noise_create},
    { "sp_noise_init", _wrap_sp_noise_init},
    { "sp_noise_compute", _wrap_sp_noise_compute},
    { "sp_noise_destroy", _wrap_sp_noise_destroy},
    { "sp_nsmp_create", _wrap_sp_nsmp_create},
    { "sp_nsmp_destroy", _wrap_sp_nsmp_destroy},
    { "sp_nsmp_init", _wrap_sp_nsmp_init},
    { "sp_nsmp_compute", _wrap_sp_nsmp_compute},
    { "sp_nsmp_print_index", _wrap_sp_nsmp_print_index},
    { "sp_osc_create", _wrap_sp_osc_create},
    { "sp_osc_destroy", _wrap_sp_osc_destroy},
    { "sp_osc_init", _wrap_sp_osc_init},
    { "sp_osc_compute", _wrap_sp_osc_compute},
    { "sp_oscmorph_create", _wrap_sp_oscmorph_create},
    { "sp_oscmorph_destroy", _wrap_sp_oscmorph_destroy},
    { "sp_oscmorph_init", _wrap_sp_oscmorph_init},
    { "sp_oscmorph_compute", _wrap_sp_oscmorph_compute},
    { "sp_pan2_create", _wrap_sp_pan2_create},
    { "sp_pan2_destroy", _wrap_sp_pan2_destroy},
    { "sp_pan2_init", _wrap_sp_pan2_init},
    { "sp_pan2_compute", _wrap_sp_pan2_compute},
    { "sp_panst_create", _wrap_sp_panst_create},
    { "sp_panst_destroy", _wrap_sp_panst_destroy},
    { "sp_panst_init", _wrap_sp_panst_init},
    { "sp_panst_compute", _wrap_sp_panst_compute},
    { "sp_pareq_create", _wrap_sp_pareq_create},
    { "sp_pareq_destroy", _wrap_sp_pareq_destroy},
    { "sp_pareq_init", _wrap_sp_pareq_init},
    { "sp_pareq_compute", _wrap_sp_pareq_compute},
    { "sp_paulstretch_create", _wrap_sp_paulstretch_create},
    { "sp_paulstretch_destroy", _wrap_sp_paulstretch_destroy},
    { "sp_paulstretch_init", _wrap_sp_paulstretch_init},
    { "sp_paulstretch_compute", _wrap_sp_paulstretch_compute},
    { "sp_pdhalf_create", _wrap_sp_pdhalf_create},
    { "sp_pdhalf_destroy", _wrap_sp_pdhalf_destroy},
    { "sp_pdhalf_init", _wrap_sp_pdhalf_init},
    { "sp_pdhalf_compute", _wrap_sp_pdhalf_compute},
    { "sp_peaklim_create", _wrap_sp_peaklim_create},
    { "sp_peaklim_destroy", _wrap_sp_peaklim_destroy},
    { "sp_peaklim_init", _wrap_sp_peaklim_init},
    { "sp_peaklim_compute", _wrap_sp_peaklim_compute},
    { "sp_phaser_create", _wrap_sp_phaser_create},
    { "sp_phaser_destroy", _wrap_sp_phaser_destroy},
    { "sp_phaser_init", _wrap_sp_phaser_init},
    { "sp_phaser_compute", _wrap_sp_phaser_compute},
    { "sp_phasor_create", _wrap_sp_phasor_create},
    { "sp_phasor_destroy", _wrap_sp_phasor_destroy},
    { "sp_phasor_init", _wrap_sp_phasor_init},
    { "sp_phasor_compute", _wrap_sp_phasor_compute},
    { "sp_pinknoise_create", _wrap_sp_pinknoise_create},
    { "sp_pinknoise_destroy", _wrap_sp_pinknoise_destroy},
    { "sp_pinknoise_init", _wrap_sp_pinknoise_init},
    { "sp_pinknoise_compute", _wrap_sp_pinknoise_compute},
    { "sp_pitchamdf_create", _wrap_sp_pitchamdf_create},
    { "sp_pitchamdf_destroy", _wrap_sp_pitchamdf_destroy},
    { "sp_pitchamdf_init", _wrap_sp_pitchamdf_init},
    { "sp_pitchamdf_compute", _wrap_sp_pitchamdf_compute},
    { "sp_pluck_create", _wrap_sp_pluck_create},
    { "sp_pluck_destroy", _wrap_sp_pluck_destroy},
    { "sp_pluck_init", _wrap_sp_pluck_init},
    { "sp_pluck_compute", _wrap_sp_pluck_compute},
    { "sp_port_create", _wrap_sp_port_create},
    { "sp_port_destroy", _wrap_sp_port_destroy},
    { "sp_port_init", _wrap_sp_port_init},
    { "sp_port_compute", _wrap_sp_port_compute},
    { "sp_port_reset", _wrap_sp_port_reset},
    { "sp_posc3_create", _wrap_sp_posc3_create},
    { "sp_posc3_destroy", _wrap_sp_posc3_destroy},
    { "sp_posc3_init", _wrap_sp_posc3_init},
    { "sp_posc3_compute", _wrap_sp_posc3_compute},
    { "sp_progress_create", _wrap_sp_progress_create},
    { "sp_progress_destroy", _wrap_sp_progress_destroy},
    { "sp_progress_init", _wrap_sp_progress_init},
    { "sp_progress_compute", _wrap_sp_progress_compute},
    { "sp_prop_create", _wrap_sp_prop_create},
    { "sp_prop_destroy", _wrap_sp_prop_destroy},
    { "sp_prop_reset", _wrap_sp_prop_reset},
    { "sp_prop_init", _wrap_sp_prop_init},
    { "sp_prop_compute", _wrap_sp_prop_compute},
    { "sp_pshift_create", _wrap_sp_pshift_create},
    { "sp_pshift_destroy", _wrap_sp_pshift_destroy},
    { "sp_pshift_init", _wrap_sp_pshift_init},
    { "sp_pshift_compute", _wrap_sp_pshift_compute},
    { "sp_ptrack_create", _wrap_sp_ptrack_create},
    { "sp_ptrack_destroy", _wrap_sp_ptrack_destroy},
    { "sp_ptrack_init", _wrap_sp_ptrack_init},
    { "sp_ptrack_compute", _wrap_sp_ptrack_compute},
    { "sp_randh_create", _wrap_sp_randh_create},
    { "sp_randh_destroy", _wrap_sp_randh_destroy},
    { "sp_randh_init", _wrap_sp_randh_init},
    { "sp_randh_compute", _wrap_sp_randh_compute},
    { "sp_randi_create", _wrap_sp_randi_create},
    { "sp_randi_destroy", _wrap_sp_randi_destroy},
    { "sp_randi_init", _wrap_sp_randi_init},
    { "sp_randi_compute", _wrap_sp_randi_compute},
    { "sp_randmt_seed", _wrap_sp_randmt_seed},
    { "sp_randmt_compute", _wrap_sp_randmt_compute},
    { "sp_random_create", _wrap_sp_random_create},
    { "sp_random_destroy", _wrap_sp_random_destroy},
    { "sp_random_init", _wrap_sp_random_init},
    { "sp_random_compute", _wrap_sp_random_compute},
    { "sp_reverse_create", _wrap_sp_reverse_create},
    { "sp_reverse_destroy", _wrap_sp_reverse_destroy},
    { "sp_reverse_init", _wrap_sp_reverse_init},
    { "sp_reverse_compute", _wrap_sp_reverse_compute},
    { "sp_reson_create", _wrap_sp_reson_create},
    { "sp_reson_destroy", _wrap_sp_reson_destroy},
    { "sp_reson_init", _wrap_sp_reson_init},
    { "sp_reson_compute", _wrap_sp_reson_compute},
    { "sp_revsc_create", _wrap_sp_revsc_create},
    { "sp_revsc_destroy", _wrap_sp_revsc_destroy},
    { "sp_revsc_init", _wrap_sp_revsc_init},
    { "sp_revsc_compute", _wrap_sp_revsc_compute},
    { "sp_rms_create", _wrap_sp_rms_create},
    { "sp_rms_destroy", _wrap_sp_rms_destroy},
    { "sp_rms_init", _wrap_sp_rms_init},
    { "sp_rms_compute", _wrap_sp_rms_compute},
    { "sp_rpt_create", _wrap_sp_rpt_create},
    { "sp_rpt_destroy", _wrap_sp_rpt_destroy},
    { "sp_rpt_init", _wrap_sp_rpt_init},
    { "sp_rpt_compute", _wrap_sp_rpt_compute},
    { "sp_rspline_create", _wrap_sp_rspline_create},
    { "sp_rspline_destroy", _wrap_sp_rspline_destroy},
    { "sp_rspline_init", _wrap_sp_rspline_init},
    { "sp_rspline_compute", _wrap_sp_rspline_compute},
    { "sp_saturator_create", _wrap_sp_saturator_create},
    { "sp_saturator_destroy", _wrap_sp_saturator_destroy},
    { "sp_saturator_init", _wrap_sp_saturator_init},
    { "sp_saturator_compute", _wrap_sp_saturator_compute},
    { "sp_samphold_create", _wrap_sp_samphold_create},
    { "sp_samphold_destroy", _wrap_sp_samphold_destroy},
    { "sp_samphold_init", _wrap_sp_samphold_init},
    { "sp_samphold_compute", _wrap_sp_samphold_compute},
    { "sp_scale_create", _wrap_sp_scale_create},
    { "sp_scale_destroy", _wrap_sp_scale_destroy},
    { "sp_scale_init", _wrap_sp_scale_init},
    { "sp_scale_compute", _wrap_sp_scale_compute},
    { "sp_gen_scrambler", _wrap_sp_gen_scrambler},
    { "sp_sdelay_create", _wrap_sp_sdelay_create},
    { "sp_sdelay_destroy", _wrap_sp_sdelay_destroy},
    { "sp_sdelay_init", _wrap_sp_sdelay_init},
    { "sp_sdelay_compute", _wrap_sp_sdelay_compute},
    { "sp_slice_create", _wrap_sp_slice_create},
    { "sp_slice_destroy", _wrap_sp_slice_destroy},
    { "sp_slice_init", _wrap_sp_slice_init},
    { "sp_slice_compute", _wrap_sp_slice_compute},
    { "sp_smoothdelay_create", _wrap_sp_smoothdelay_create},
    { "sp_smoothdelay_destroy", _wrap_sp_smoothdelay_destroy},
    { "sp_smoothdelay_init", _wrap_sp_smoothdelay_init},
    { "sp_smoothdelay_compute", _wrap_sp_smoothdelay_compute},
    { "sp_spa_create", _wrap_sp_spa_create},
    { "sp_spa_destroy", _wrap_sp_spa_destroy},
    { "sp_spa_init", _wrap_sp_spa_init},
    { "sp_spa_compute", _wrap_sp_spa_compute},
    { "sp_sparec_create", _wrap_sp_sparec_create},
    { "sp_sparec_destroy", _wrap_sp_sparec_destroy},
    { "sp_sparec_init", _wrap_sp_sparec_init},
    { "sp_sparec_compute", _wrap_sp_sparec_compute},
    { "sp_sparec_close", _wrap_sp_sparec_close},
    { "sp_streson_create", _wrap_sp_streson_create},
    { "sp_streson_destroy", _wrap_sp_streson_destroy},
    { "sp_streson_init", _wrap_sp_streson_init},
    { "sp_streson_compute", _wrap_sp_streson_compute},
    { "sp_switch_create", _wrap_sp_switch_create},
    { "sp_switch_destroy", _wrap_sp_switch_destroy},
    { "sp_switch_init", _wrap_sp_switch_init},
    { "sp_switch_compute", _wrap_sp_switch_compute},
    { "sp_tabread_create", _wrap_sp_tabread_create},
    { "sp_tabread_destroy", _wrap_sp_tabread_destroy},
    { "sp_tabread_init", _wrap_sp_tabread_init},
    { "sp_tabread_compute", _wrap_sp_tabread_compute},
    { "sp_tadsr_create", _wrap_sp_tadsr_create},
    { "sp_tadsr_destroy", _wrap_sp_tadsr_destroy},
    { "sp_tadsr_init", _wrap_sp_tadsr_init},
    { "sp_tadsr_compute", _wrap_sp_tadsr_compute},
    { "sp_talkbox_create", _wrap_sp_talkbox_create},
    { "sp_talkbox_destroy", _wrap_sp_talkbox_destroy},
    { "sp_talkbox_init", _wrap_sp_talkbox_init},
    { "sp_talkbox_compute", _wrap_sp_talkbox_compute},
    { "sp_tblrec_create", _wrap_sp_tblrec_create},
    { "sp_tblrec_destroy", _wrap_sp_tblrec_destroy},
    { "sp_tblrec_init", _wrap_sp_tblrec_init},
    { "sp_tblrec_compute", _wrap_sp_tblrec_compute},
    { "sp_tbvcf_create", _wrap_sp_tbvcf_create},
    { "sp_tbvcf_destroy", _wrap_sp_tbvcf_destroy},
    { "sp_tbvcf_init", _wrap_sp_tbvcf_init},
    { "sp_tbvcf_compute", _wrap_sp_tbvcf_compute},
    { "sp_tdiv_create", _wrap_sp_tdiv_create},
    { "sp_tdiv_destroy", _wrap_sp_tdiv_destroy},
    { "sp_tdiv_init", _wrap_sp_tdiv_init},
    { "sp_tdiv_compute", _wrap_sp_tdiv_compute},
    { "sp_tenv_create", _wrap_sp_tenv_create},
    { "sp_tenv_destroy", _wrap_sp_tenv_destroy},
    { "sp_tenv_init", _wrap_sp_tenv_init},
    { "sp_tenv_compute", _wrap_sp_tenv_compute},
    { "sp_tenv2_create", _wrap_sp_tenv2_create},
    { "sp_tenv2_destroy", _wrap_sp_tenv2_destroy},
    { "sp_tenv2_init", _wrap_sp_tenv2_init},
    { "sp_tenv2_compute", _wrap_sp_tenv2_compute},
    { "sp_tenvx_create", _wrap_sp_tenvx_create},
    { "sp_tenvx_destroy", _wrap_sp_tenvx_destroy},
    { "sp_tenvx_init", _wrap_sp_tenvx_init},
    { "sp_tenvx_compute", _wrap_sp_tenvx_compute},
    { "sp_tgate_create", _wrap_sp_tgate_create},
    { "sp_tgate_destroy", _wrap_sp_tgate_destroy},
    { "sp_tgate_init", _wrap_sp_tgate_init},
    { "sp_tgate_compute", _wrap_sp_tgate_compute},
    { "sp_thresh_create", _wrap_sp_thresh_create},
    { "sp_thresh_destroy", _wrap_sp_thresh_destroy},
    { "sp_thresh_init", _wrap_sp_thresh_init},
    { "sp_thresh_compute", _wrap_sp_thresh_compute},
    { "sp_timer_create", _wrap_sp_timer_create},
    { "sp_timer_destroy", _wrap_sp_timer_destroy},
    { "sp_timer_init", _wrap_sp_timer_init},
    { "sp_timer_compute", _wrap_sp_timer_compute},
    { "sp_tin_create", _wrap_sp_tin_create},
    { "sp_tin_destroy", _wrap_sp_tin_destroy},
    { "sp_tin_init", _wrap_sp_tin_init},
    { "sp_tin_compute", _wrap_sp_tin_compute},
    { "sp_tone_create", _wrap_sp_tone_create},
    { "sp_tone_destroy", _wrap_sp_tone_destroy},
    { "sp_tone_init", _wrap_sp_tone_init},
    { "sp_tone_compute", _wrap_sp_tone_compute},
    { "sp_trand_create", _wrap_sp_trand_create},
    { "sp_trand_destroy", _wrap_sp_trand_destroy},
    { "sp_trand_init", _wrap_sp_trand_init},
    { "sp_trand_compute", _wrap_sp_trand_compute},
    { "sp_tseg_create", _wrap_sp_tseg_create},
    { "sp_tseg_destroy", _wrap_sp_tseg_destroy},
    { "sp_tseg_init", _wrap_sp_tseg_init},
    { "sp_tseg_compute", _wrap_sp_tseg_compute},
    { "sp_tseq_create", _wrap_sp_tseq_create},
    { "sp_tseq_destroy", _wrap_sp_tseq_destroy},
    { "sp_tseq_init", _wrap_sp_tseq_init},
    { "sp_tseq_compute", _wrap_sp_tseq_compute},
    { "sp_vdelay_create", _wrap_sp_vdelay_create},
    { "sp_vdelay_destroy", _wrap_sp_vdelay_destroy},
    { "sp_vdelay_init", _wrap_sp_vdelay_init},
    { "sp_vdelay_compute", _wrap_sp_vdelay_compute},
    { "sp_vdelay_reset", _wrap_sp_vdelay_reset},
    { "sp_voc_create", _wrap_sp_voc_create},
    { "sp_voc_destroy", _wrap_sp_voc_destroy},
    { "sp_voc_init", _wrap_sp_voc_init},
    { "sp_voc_compute", _wrap_sp_voc_compute},
    { "sp_voc_tract_compute", _wrap_sp_voc_tract_compute},
    { "sp_voc_set_frequency", _wrap_sp_voc_set_frequency},
    { "sp_voc_get_frequency_ptr", _wrap_sp_voc_get_frequency_ptr},
    { "sp_voc_get_tract_diameters", _wrap_sp_voc_get_tract_diameters},
    { "sp_voc_get_current_tract_diameters", _wrap_sp_voc_get_current_tract_diameters},
    { "sp_voc_get_tract_size", _wrap_sp_voc_get_tract_size},
    { "sp_voc_get_nose_diameters", _wrap_sp_voc_get_nose_diameters},
    { "sp_voc_get_nose_size", _wrap_sp_voc_get_nose_size},
    { "sp_voc_set_tongue_shape", _wrap_sp_voc_set_tongue_shape},
    { "sp_voc_set_tenseness", _wrap_sp_voc_set_tenseness},
    { "sp_voc_get_tenseness_ptr", _wrap_sp_voc_get_tenseness_ptr},
    { "sp_voc_set_velum", _wrap_sp_voc_set_velum},
    { "sp_voc_get_velum_ptr", _wrap_sp_voc_get_velum_ptr},
    { "sp_voc_set_diameters", _wrap_sp_voc_set_diameters},
    { "sp_voc_get_counter", _wrap_sp_voc_get_counter},
    { "sp_vocoder_create", _wrap_sp_vocoder_create},
    { "sp_vocoder_destroy", _wrap_sp_vocoder_destroy},
    { "sp_vocoder_init", _wrap_sp_vocoder_init},
    { "sp_vocoder_compute", _wrap_sp_vocoder_compute},
    { "sp_waveset_create", _wrap_sp_waveset_create},
    { "sp_waveset_destroy", _wrap_sp_waveset_destroy},
    { "sp_waveset_init", _wrap_sp_waveset_init},
    { "sp_waveset_compute", _wrap_sp_waveset_compute},
    { "sp_wavin_create", _wrap_sp_wavin_create},
    { "sp_wavin_destroy", _wrap_sp_wavin_destroy},
    { "sp_wavin_init", _wrap_sp_wavin_init},
    { "sp_wavin_compute", _wrap_sp_wavin_compute},
    { "sp_wavout_create", _wrap_sp_wavout_create},
    { "sp_wavout_destroy", _wrap_sp_wavout_destroy},
    { "sp_wavout_init", _wrap_sp_wavout_init},
    { "sp_wavout_compute", _wrap_sp_wavout_compute},
    { "sp_wpkorg35_create", _wrap_sp_wpkorg35_create},
    { "sp_wpkorg35_destroy", _wrap_sp_wpkorg35_destroy},
    { "sp_wpkorg35_init", _wrap_sp_wpkorg35_init},
    { "sp_wpkorg35_compute", _wrap_sp_wpkorg35_compute},
    { "sp_zitarev_create", _wrap_sp_zitarev_create},
    { "sp_zitarev_destroy", _wrap_sp_zitarev_destroy},
    { "sp_zitarev_init", _wrap_sp_zitarev_init},
    { "sp_zitarev_compute", _wrap_sp_zitarev_compute},
    { "sp_diskin_create", _wrap_sp_diskin_create},
    { "sp_diskin_destroy", _wrap_sp_diskin_destroy},
    { "sp_diskin_init", _wrap_sp_diskin_init},
    { "sp_diskin_compute", _wrap_sp_diskin_compute},
    { "FFTwrapper_create", _wrap_FFTwrapper_create},
    { "FFTwrapper_destroy", _wrap_FFTwrapper_destroy},
    { "newFFTFREQS", _wrap_newFFTFREQS},
    { "deleteFFTFREQS", _wrap_deleteFFTFREQS},
    { "smps2freqs", _wrap_smps2freqs},
    { "freqs2smps", _wrap_freqs2smps},
    { "sp_gen_padsynth", _wrap_sp_gen_padsynth},
    { "sp_padsynth_profile", _wrap_sp_padsynth_profile},
    { "sp_padsynth_ifft", _wrap_sp_padsynth_ifft},
    { "sp_padsynth_normalize", _wrap_sp_padsynth_normalize},
    { "spa_open", _wrap_spa_open},
    { "spa_write_buf", _wrap_spa_write_buf},
    { "spa_read_buf", _wrap_spa_read_buf},
    { "spa_close", _wrap_spa_close},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_float_vector,
&_wrap_class_double_vector,
&_wrap_class_sp_auxdata,
&_wrap_class_sp_data,
&_wrap_class_sp_param,
&_wrap_class_sp_fft,
&_wrap_class_kiss_fft_cpx,
&_wrap_class_spa_header,
&_wrap_class_sp_audio,
&_wrap_class_sp_ftbl,
&_wrap_class_sp_tevent,
&_wrap_class_sp_adsr,
&_wrap_class_sp_allpass,
&_wrap_class_sp_atone,
&_wrap_class_sp_autowah,
&_wrap_class_sp_bal,
&_wrap_class_sp_bar,
&_wrap_class_sp_biquad,
&_wrap_class_sp_biscale,
&_wrap_class_sp_blsaw,
&_wrap_class_sp_blsquare,
&_wrap_class_sp_bltriangle,
&_wrap_class_sp_fold,
&_wrap_class_sp_bitcrush,
&_wrap_class_sp_brown,
&_wrap_class_sp_butbp,
&_wrap_class_sp_butbr,
&_wrap_class_sp_buthp,
&_wrap_class_sp_butlp,
&_wrap_class_sp_clip,
&_wrap_class_sp_clock,
&_wrap_class_sp_comb,
&_wrap_class_sp_compressor,
&_wrap_class_sp_count,
&_wrap_class_sp_conv,
&_wrap_class_sp_crossfade,
&_wrap_class_sp_dcblock,
&_wrap_class_sp_delay,
&_wrap_class_sp_diode,
&_wrap_class_sp_dist,
&_wrap_class_sp_dmetro,
&_wrap_class_sp_drip,
&_wrap_class_sp_dtrig,
&_wrap_class_sp_dust,
&_wrap_class_sp_eqfil,
&_wrap_class_sp_expon,
&_wrap_class_sp_fof_overlap,
&_wrap_class_sp_fof,
&_wrap_class_sp_fog_overlap,
&_wrap_class_sp_fog,
&_wrap_class_sp_fofilt,
&_wrap_class_sp_foo,
&_wrap_class_sp_fosc,
&_wrap_class_sp_gbuzz,
&_wrap_class_sp_hilbert,
&_wrap_class_sp_in,
&_wrap_class_sp_incr,
&_wrap_class_sp_jcrev,
&_wrap_class_sp_jitter,
&_wrap_class_sp_line,
&_wrap_class_sp_lpc,
&_wrap_class_sp_lpf18,
&_wrap_class_sp_maygate,
&_wrap_class_sp_metro,
&_wrap_class_sp_mincer,
&_wrap_class_sp_mode,
&_wrap_class_sp_moogladder,
&_wrap_class_sp_noise,
&_wrap_class_nano_entry,
&_wrap_class_nano_dict,
&_wrap_class_nanosamp,
&_wrap_class_sp_nsmp,
&_wrap_class_sp_osc,
&_wrap_class_sp_oscmorph,
&_wrap_class_sp_pan2,
&_wrap_class_sp_panst,
&_wrap_class_sp_pareq,
&_wrap_class_sp_paulstretch,
&_wrap_class_sp_pdhalf,
&_wrap_class_sp_peaklim,
&_wrap_class_sp_phaser,
&_wrap_class_sp_phasor,
&_wrap_class_sp_pinknoise,
&_wrap_class_sp_pitchamdf,
&_wrap_class_sp_pluck,
&_wrap_class_sp_port,
&_wrap_class_sp_posc3,
&_wrap_class_sp_progress,
&_wrap_class_prop_event,
&_wrap_class_prop_val,
&_wrap_class_prop_entry,
&_wrap_class_prop_list,
&_wrap_class_prop_stack,
&_wrap_class_prop_data,
&_wrap_class_sp_prop,
&_wrap_class_sp_pshift,
&_wrap_class_sp_ptrack,
&_wrap_class_sp_randh,
&_wrap_class_sp_randi,
&_wrap_class_sp_randmt,
&_wrap_class_sp_random,
&_wrap_class_sp_reverse,
&_wrap_class_sp_reson,
&_wrap_class_sp_revsc_dl,
&_wrap_class_sp_revsc,
&_wrap_class_sp_rms,
&_wrap_class_sp_rpt,
&_wrap_class_sp_rspline,
&_wrap_class_sp_saturator,
&_wrap_class_sp_samphold,
&_wrap_class_sp_scale,
&_wrap_class_sp_sdelay,
&_wrap_class_sp_slice,
&_wrap_class_sp_smoothdelay,
&_wrap_class_sp_spa,
&_wrap_class_sp_sparec,
&_wrap_class_sp_streson,
&_wrap_class_sp_switch,
&_wrap_class_sp_tabread,
&_wrap_class_sp_tadsr,
&_wrap_class_sp_talkbox,
&_wrap_class_sp_tblrec,
&_wrap_class_sp_tbvcf,
&_wrap_class_sp_tdiv,
&_wrap_class_sp_tenv,
&_wrap_class_sp_tenv2,
&_wrap_class_sp_tenvx,
&_wrap_class_sp_tgate,
&_wrap_class_sp_thresh,
&_wrap_class_sp_timer,
&_wrap_class_sp_tin,
&_wrap_class_sp_tone,
&_wrap_class_sp_trand,
&_wrap_class_sp_tseg,
&_wrap_class_sp_tseq,
&_wrap_class_sp_vdelay,
&_wrap_class_sp_vocoder,
&_wrap_class_sp_waveset,
&_wrap_class_sp_wpkorg35,
&_wrap_class_sp_zitarev,
&_wrap_class_FFTFREQS,
&_wrap_class_FFTwrapper,
&_wrap_class_sp_padsynth,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "soundpipe",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_FFTFREQS = {"_p_FFTFREQS", "FFTFREQS *", 0, 0, (void*)&_wrap_class_FFTFREQS, 0};
static swig_type_info _swigt__p_FFTwrapper = {"_p_FFTwrapper", "FFTwrapper *", 0, 0, (void*)&_wrap_class_FFTwrapper, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_7__float = {"_p_a_7__float", "float (*)[7]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_sp_data_p_void__void = {"_p_f_p_sp_data_p_void__void", "void (*)(sp_data *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_float__void = {"_p_f_p_void_p_float__void", "void (*)(void *,float *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int16_t = {"_p_int16_t", "int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kiss_fft_cpx = {"_p_kiss_fft_cpx", "kiss_fft_cpx *", 0, 0, (void*)&_wrap_class_kiss_fft_cpx, 0};
static swig_type_info _swigt__p_kiss_fftr_state = {"_p_kiss_fftr_state", "kiss_fftr_state *|kiss_fftr_cfg", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nano_dict = {"_p_nano_dict", "nano_dict *", 0, 0, (void*)&_wrap_class_nano_dict, 0};
static swig_type_info _swigt__p_nano_entry = {"_p_nano_entry", "nano_entry *", 0, 0, (void*)&_wrap_class_nano_entry, 0};
static swig_type_info _swigt__p_nanosamp = {"_p_nanosamp", "nanosamp *", 0, 0, (void*)&_wrap_class_nanosamp, 0};
static swig_type_info _swigt__p_openlpc_d_state = {"_p_openlpc_d_state", "openlpc_d_state *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openlpc_e_state = {"_p_openlpc_e_state", "openlpc_e_state *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_FFTwrapper = {"_p_p_FFTwrapper", "FFTwrapper **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_float = {"_p_p_float", "float **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_nano_entry = {"_p_p_nano_entry", "nano_entry **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_adsr = {"_p_p_sp_adsr", "sp_adsr **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_allpass = {"_p_p_sp_allpass", "sp_allpass **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_atone = {"_p_p_sp_atone", "sp_atone **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_autowah = {"_p_p_sp_autowah", "sp_autowah **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_bal = {"_p_p_sp_bal", "sp_bal **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_bar = {"_p_p_sp_bar", "sp_bar **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_biquad = {"_p_p_sp_biquad", "sp_biquad **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_biscale = {"_p_p_sp_biscale", "sp_biscale **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_bitcrush = {"_p_p_sp_bitcrush", "sp_bitcrush **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_blsaw = {"_p_p_sp_blsaw", "sp_blsaw **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_blsquare = {"_p_p_sp_blsquare", "sp_blsquare **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_bltriangle = {"_p_p_sp_bltriangle", "sp_bltriangle **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_brown = {"_p_p_sp_brown", "sp_brown **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_butbp = {"_p_p_sp_butbp", "sp_butbp **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_butbr = {"_p_p_sp_butbr", "sp_butbr **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_buthp = {"_p_p_sp_buthp", "sp_buthp **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_butlp = {"_p_p_sp_butlp", "sp_butlp **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_clip = {"_p_p_sp_clip", "sp_clip **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_clock = {"_p_p_sp_clock", "sp_clock **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_comb = {"_p_p_sp_comb", "sp_comb **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_compressor = {"_p_p_sp_compressor", "sp_compressor **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_conv = {"_p_p_sp_conv", "sp_conv **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_count = {"_p_p_sp_count", "sp_count **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_crossfade = {"_p_p_sp_crossfade", "sp_crossfade **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_data = {"_p_p_sp_data", "sp_data **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_dcblock = {"_p_p_sp_dcblock", "sp_dcblock **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_delay = {"_p_p_sp_delay", "sp_delay **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_diode = {"_p_p_sp_diode", "sp_diode **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_diskin = {"_p_p_sp_diskin", "sp_diskin **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_dist = {"_p_p_sp_dist", "sp_dist **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_dmetro = {"_p_p_sp_dmetro", "sp_dmetro **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_drip = {"_p_p_sp_drip", "sp_drip **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_dtrig = {"_p_p_sp_dtrig", "sp_dtrig **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_dust = {"_p_p_sp_dust", "sp_dust **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_eqfil = {"_p_p_sp_eqfil", "sp_eqfil **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_expon = {"_p_p_sp_expon", "sp_expon **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_fof = {"_p_p_sp_fof", "sp_fof **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_fofilt = {"_p_p_sp_fofilt", "sp_fofilt **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_fog = {"_p_p_sp_fog", "sp_fog **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_fold = {"_p_p_sp_fold", "sp_fold **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_foo = {"_p_p_sp_foo", "sp_foo **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_fosc = {"_p_p_sp_fosc", "sp_fosc **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_ftbl = {"_p_p_sp_ftbl", "sp_ftbl **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_gbuzz = {"_p_p_sp_gbuzz", "sp_gbuzz **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_hilbert = {"_p_p_sp_hilbert", "sp_hilbert **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_in = {"_p_p_sp_in", "sp_in **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_incr = {"_p_p_sp_incr", "sp_incr **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_jcrev = {"_p_p_sp_jcrev", "sp_jcrev **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_jitter = {"_p_p_sp_jitter", "sp_jitter **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_line = {"_p_p_sp_line", "sp_line **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_lpc = {"_p_p_sp_lpc", "sp_lpc **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_lpf18 = {"_p_p_sp_lpf18", "sp_lpf18 **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_maygate = {"_p_p_sp_maygate", "sp_maygate **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_metro = {"_p_p_sp_metro", "sp_metro **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_mincer = {"_p_p_sp_mincer", "sp_mincer **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_mode = {"_p_p_sp_mode", "sp_mode **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_moogladder = {"_p_p_sp_moogladder", "sp_moogladder **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_noise = {"_p_p_sp_noise", "sp_noise **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_nsmp = {"_p_p_sp_nsmp", "sp_nsmp **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_osc = {"_p_p_sp_osc", "sp_osc **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_oscmorph = {"_p_p_sp_oscmorph", "sp_oscmorph **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_pan2 = {"_p_p_sp_pan2", "sp_pan2 **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_panst = {"_p_p_sp_panst", "sp_panst **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_pareq = {"_p_p_sp_pareq", "sp_pareq **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_paulstretch = {"_p_p_sp_paulstretch", "sp_paulstretch **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_pdhalf = {"_p_p_sp_pdhalf", "sp_pdhalf **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_peaklim = {"_p_p_sp_peaklim", "sp_peaklim **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_phaser = {"_p_p_sp_phaser", "sp_phaser **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_phasor = {"_p_p_sp_phasor", "sp_phasor **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_pinknoise = {"_p_p_sp_pinknoise", "sp_pinknoise **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_pitchamdf = {"_p_p_sp_pitchamdf", "sp_pitchamdf **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_pluck = {"_p_p_sp_pluck", "sp_pluck **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_port = {"_p_p_sp_port", "sp_port **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_posc3 = {"_p_p_sp_posc3", "sp_posc3 **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_progress = {"_p_p_sp_progress", "sp_progress **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_prop = {"_p_p_sp_prop", "sp_prop **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_pshift = {"_p_p_sp_pshift", "sp_pshift **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_ptrack = {"_p_p_sp_ptrack", "sp_ptrack **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_randh = {"_p_p_sp_randh", "sp_randh **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_randi = {"_p_p_sp_randi", "sp_randi **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_random = {"_p_p_sp_random", "sp_random **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_reson = {"_p_p_sp_reson", "sp_reson **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_reverse = {"_p_p_sp_reverse", "sp_reverse **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_revsc = {"_p_p_sp_revsc", "sp_revsc **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_rms = {"_p_p_sp_rms", "sp_rms **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_rpt = {"_p_p_sp_rpt", "sp_rpt **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_rspline = {"_p_p_sp_rspline", "sp_rspline **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_samphold = {"_p_p_sp_samphold", "sp_samphold **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_saturator = {"_p_p_sp_saturator", "sp_saturator **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_scale = {"_p_p_sp_scale", "sp_scale **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_sdelay = {"_p_p_sp_sdelay", "sp_sdelay **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_slice = {"_p_p_sp_slice", "sp_slice **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_smoothdelay = {"_p_p_sp_smoothdelay", "sp_smoothdelay **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_spa = {"_p_p_sp_spa", "sp_spa **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_sparec = {"_p_p_sp_sparec", "sp_sparec **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_streson = {"_p_p_sp_streson", "sp_streson **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_switch = {"_p_p_sp_switch", "sp_switch **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_tabread = {"_p_p_sp_tabread", "sp_tabread **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_tadsr = {"_p_p_sp_tadsr", "sp_tadsr **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_talkbox = {"_p_p_sp_talkbox", "sp_talkbox **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_tblrec = {"_p_p_sp_tblrec", "sp_tblrec **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_tbvcf = {"_p_p_sp_tbvcf", "sp_tbvcf **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_tdiv = {"_p_p_sp_tdiv", "sp_tdiv **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_tenv = {"_p_p_sp_tenv", "sp_tenv **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_tenv2 = {"_p_p_sp_tenv2", "sp_tenv2 **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_tenvx = {"_p_p_sp_tenvx", "sp_tenvx **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_tevent = {"_p_p_sp_tevent", "sp_tevent **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_tgate = {"_p_p_sp_tgate", "sp_tgate **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_thresh = {"_p_p_sp_thresh", "sp_thresh **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_timer = {"_p_p_sp_timer", "sp_timer **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_tin = {"_p_p_sp_tin", "sp_tin **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_tone = {"_p_p_sp_tone", "sp_tone **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_trand = {"_p_p_sp_trand", "sp_trand **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_tseg = {"_p_p_sp_tseg", "sp_tseg **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_tseq = {"_p_p_sp_tseq", "sp_tseq **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_vdelay = {"_p_p_sp_vdelay", "sp_vdelay **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_voc = {"_p_p_sp_voc", "sp_voc **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_vocoder = {"_p_p_sp_vocoder", "sp_vocoder **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_waveset = {"_p_p_sp_waveset", "sp_waveset **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_wavin = {"_p_p_sp_wavin", "sp_wavin **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_wavout = {"_p_p_sp_wavout", "sp_wavout **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_wpkorg35 = {"_p_p_sp_wpkorg35", "sp_wpkorg35 **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sp_zitarev = {"_p_p_sp_zitarev", "sp_zitarev **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_prop_data = {"_p_prop_data", "prop_data *", 0, 0, (void*)&_wrap_class_prop_data, 0};
static swig_type_info _swigt__p_prop_entry = {"_p_prop_entry", "prop_entry *", 0, 0, (void*)&_wrap_class_prop_entry, 0};
static swig_type_info _swigt__p_prop_event = {"_p_prop_event", "prop_event *", 0, 0, (void*)&_wrap_class_prop_event, 0};
static swig_type_info _swigt__p_prop_list = {"_p_prop_list", "prop_list *", 0, 0, (void*)&_wrap_class_prop_list, 0};
static swig_type_info _swigt__p_prop_stack = {"_p_prop_stack", "prop_stack *", 0, 0, (void*)&_wrap_class_prop_stack, 0};
static swig_type_info _swigt__p_prop_val = {"_p_prop_val", "prop_val *", 0, 0, (void*)&_wrap_class_prop_val, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sp_adsr = {"_p_sp_adsr", "sp_adsr *", 0, 0, (void*)&_wrap_class_sp_adsr, 0};
static swig_type_info _swigt__p_sp_allpass = {"_p_sp_allpass", "sp_allpass *", 0, 0, (void*)&_wrap_class_sp_allpass, 0};
static swig_type_info _swigt__p_sp_atone = {"_p_sp_atone", "sp_atone *", 0, 0, (void*)&_wrap_class_sp_atone, 0};
static swig_type_info _swigt__p_sp_audio = {"_p_sp_audio", "sp_audio *", 0, 0, (void*)&_wrap_class_sp_audio, 0};
static swig_type_info _swigt__p_sp_autowah = {"_p_sp_autowah", "sp_autowah *", 0, 0, (void*)&_wrap_class_sp_autowah, 0};
static swig_type_info _swigt__p_sp_auxdata = {"_p_sp_auxdata", "sp_auxdata *", 0, 0, (void*)&_wrap_class_sp_auxdata, 0};
static swig_type_info _swigt__p_sp_bal = {"_p_sp_bal", "sp_bal *", 0, 0, (void*)&_wrap_class_sp_bal, 0};
static swig_type_info _swigt__p_sp_bar = {"_p_sp_bar", "sp_bar *", 0, 0, (void*)&_wrap_class_sp_bar, 0};
static swig_type_info _swigt__p_sp_biquad = {"_p_sp_biquad", "sp_biquad *", 0, 0, (void*)&_wrap_class_sp_biquad, 0};
static swig_type_info _swigt__p_sp_biscale = {"_p_sp_biscale", "sp_biscale *", 0, 0, (void*)&_wrap_class_sp_biscale, 0};
static swig_type_info _swigt__p_sp_bitcrush = {"_p_sp_bitcrush", "sp_bitcrush *", 0, 0, (void*)&_wrap_class_sp_bitcrush, 0};
static swig_type_info _swigt__p_sp_blsaw = {"_p_sp_blsaw", "sp_blsaw *", 0, 0, (void*)&_wrap_class_sp_blsaw, 0};
static swig_type_info _swigt__p_sp_blsquare = {"_p_sp_blsquare", "sp_blsquare *", 0, 0, (void*)&_wrap_class_sp_blsquare, 0};
static swig_type_info _swigt__p_sp_bltriangle = {"_p_sp_bltriangle", "sp_bltriangle *", 0, 0, (void*)&_wrap_class_sp_bltriangle, 0};
static swig_type_info _swigt__p_sp_brown = {"_p_sp_brown", "sp_brown *", 0, 0, (void*)&_wrap_class_sp_brown, 0};
static swig_type_info _swigt__p_sp_butbp = {"_p_sp_butbp", "sp_butbp *", 0, 0, (void*)&_wrap_class_sp_butbp, 0};
static swig_type_info _swigt__p_sp_butbr = {"_p_sp_butbr", "sp_butbr *", 0, 0, (void*)&_wrap_class_sp_butbr, 0};
static swig_type_info _swigt__p_sp_buthp = {"_p_sp_buthp", "sp_buthp *", 0, 0, (void*)&_wrap_class_sp_buthp, 0};
static swig_type_info _swigt__p_sp_butlp = {"_p_sp_butlp", "sp_butlp *", 0, 0, (void*)&_wrap_class_sp_butlp, 0};
static swig_type_info _swigt__p_sp_clip = {"_p_sp_clip", "sp_clip *", 0, 0, (void*)&_wrap_class_sp_clip, 0};
static swig_type_info _swigt__p_sp_clock = {"_p_sp_clock", "sp_clock *", 0, 0, (void*)&_wrap_class_sp_clock, 0};
static swig_type_info _swigt__p_sp_comb = {"_p_sp_comb", "sp_comb *", 0, 0, (void*)&_wrap_class_sp_comb, 0};
static swig_type_info _swigt__p_sp_compressor = {"_p_sp_compressor", "sp_compressor *", 0, 0, (void*)&_wrap_class_sp_compressor, 0};
static swig_type_info _swigt__p_sp_conv = {"_p_sp_conv", "sp_conv *", 0, 0, (void*)&_wrap_class_sp_conv, 0};
static swig_type_info _swigt__p_sp_count = {"_p_sp_count", "sp_count *", 0, 0, (void*)&_wrap_class_sp_count, 0};
static swig_type_info _swigt__p_sp_crossfade = {"_p_sp_crossfade", "sp_crossfade *", 0, 0, (void*)&_wrap_class_sp_crossfade, 0};
static swig_type_info _swigt__p_sp_data = {"_p_sp_data", "sp_data *", 0, 0, (void*)&_wrap_class_sp_data, 0};
static swig_type_info _swigt__p_sp_dcblock = {"_p_sp_dcblock", "sp_dcblock *", 0, 0, (void*)&_wrap_class_sp_dcblock, 0};
static swig_type_info _swigt__p_sp_delay = {"_p_sp_delay", "sp_delay *", 0, 0, (void*)&_wrap_class_sp_delay, 0};
static swig_type_info _swigt__p_sp_diode = {"_p_sp_diode", "sp_diode *", 0, 0, (void*)&_wrap_class_sp_diode, 0};
static swig_type_info _swigt__p_sp_diskin = {"_p_sp_diskin", "sp_diskin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sp_dist = {"_p_sp_dist", "sp_dist *", 0, 0, (void*)&_wrap_class_sp_dist, 0};
static swig_type_info _swigt__p_sp_dmetro = {"_p_sp_dmetro", "sp_dmetro *", 0, 0, (void*)&_wrap_class_sp_dmetro, 0};
static swig_type_info _swigt__p_sp_drip = {"_p_sp_drip", "sp_drip *", 0, 0, (void*)&_wrap_class_sp_drip, 0};
static swig_type_info _swigt__p_sp_dtrig = {"_p_sp_dtrig", "sp_dtrig *", 0, 0, (void*)&_wrap_class_sp_dtrig, 0};
static swig_type_info _swigt__p_sp_dust = {"_p_sp_dust", "sp_dust *", 0, 0, (void*)&_wrap_class_sp_dust, 0};
static swig_type_info _swigt__p_sp_eqfil = {"_p_sp_eqfil", "sp_eqfil *", 0, 0, (void*)&_wrap_class_sp_eqfil, 0};
static swig_type_info _swigt__p_sp_expon = {"_p_sp_expon", "sp_expon *", 0, 0, (void*)&_wrap_class_sp_expon, 0};
static swig_type_info _swigt__p_sp_fft = {"_p_sp_fft", "sp_fft *", 0, 0, (void*)&_wrap_class_sp_fft, 0};
static swig_type_info _swigt__p_sp_fof = {"_p_sp_fof", "sp_fof *", 0, 0, (void*)&_wrap_class_sp_fof, 0};
static swig_type_info _swigt__p_sp_fof_overlap = {"_p_sp_fof_overlap", "sp_fof_overlap *", 0, 0, (void*)&_wrap_class_sp_fof_overlap, 0};
static swig_type_info _swigt__p_sp_fofilt = {"_p_sp_fofilt", "sp_fofilt *", 0, 0, (void*)&_wrap_class_sp_fofilt, 0};
static swig_type_info _swigt__p_sp_fog = {"_p_sp_fog", "sp_fog *", 0, 0, (void*)&_wrap_class_sp_fog, 0};
static swig_type_info _swigt__p_sp_fog_overlap = {"_p_sp_fog_overlap", "sp_fog_overlap *", 0, 0, (void*)&_wrap_class_sp_fog_overlap, 0};
static swig_type_info _swigt__p_sp_fold = {"_p_sp_fold", "sp_fold *", 0, 0, (void*)&_wrap_class_sp_fold, 0};
static swig_type_info _swigt__p_sp_foo = {"_p_sp_foo", "sp_foo *", 0, 0, (void*)&_wrap_class_sp_foo, 0};
static swig_type_info _swigt__p_sp_fosc = {"_p_sp_fosc", "sp_fosc *", 0, 0, (void*)&_wrap_class_sp_fosc, 0};
static swig_type_info _swigt__p_sp_ftbl = {"_p_sp_ftbl", "sp_ftbl *", 0, 0, (void*)&_wrap_class_sp_ftbl, 0};
static swig_type_info _swigt__p_sp_gbuzz = {"_p_sp_gbuzz", "sp_gbuzz *", 0, 0, (void*)&_wrap_class_sp_gbuzz, 0};
static swig_type_info _swigt__p_sp_hilbert = {"_p_sp_hilbert", "sp_hilbert *", 0, 0, (void*)&_wrap_class_sp_hilbert, 0};
static swig_type_info _swigt__p_sp_in = {"_p_sp_in", "sp_in *", 0, 0, (void*)&_wrap_class_sp_in, 0};
static swig_type_info _swigt__p_sp_incr = {"_p_sp_incr", "sp_incr *", 0, 0, (void*)&_wrap_class_sp_incr, 0};
static swig_type_info _swigt__p_sp_jcrev = {"_p_sp_jcrev", "sp_jcrev *", 0, 0, (void*)&_wrap_class_sp_jcrev, 0};
static swig_type_info _swigt__p_sp_jitter = {"_p_sp_jitter", "sp_jitter *", 0, 0, (void*)&_wrap_class_sp_jitter, 0};
static swig_type_info _swigt__p_sp_line = {"_p_sp_line", "sp_line *", 0, 0, (void*)&_wrap_class_sp_line, 0};
static swig_type_info _swigt__p_sp_lpc = {"_p_sp_lpc", "sp_lpc *", 0, 0, (void*)&_wrap_class_sp_lpc, 0};
static swig_type_info _swigt__p_sp_lpf18 = {"_p_sp_lpf18", "sp_lpf18 *", 0, 0, (void*)&_wrap_class_sp_lpf18, 0};
static swig_type_info _swigt__p_sp_maygate = {"_p_sp_maygate", "sp_maygate *", 0, 0, (void*)&_wrap_class_sp_maygate, 0};
static swig_type_info _swigt__p_sp_metro = {"_p_sp_metro", "sp_metro *", 0, 0, (void*)&_wrap_class_sp_metro, 0};
static swig_type_info _swigt__p_sp_mincer = {"_p_sp_mincer", "sp_mincer *", 0, 0, (void*)&_wrap_class_sp_mincer, 0};
static swig_type_info _swigt__p_sp_mode = {"_p_sp_mode", "sp_mode *", 0, 0, (void*)&_wrap_class_sp_mode, 0};
static swig_type_info _swigt__p_sp_moogladder = {"_p_sp_moogladder", "sp_moogladder *", 0, 0, (void*)&_wrap_class_sp_moogladder, 0};
static swig_type_info _swigt__p_sp_noise = {"_p_sp_noise", "sp_noise *", 0, 0, (void*)&_wrap_class_sp_noise, 0};
static swig_type_info _swigt__p_sp_nsmp = {"_p_sp_nsmp", "sp_nsmp *", 0, 0, (void*)&_wrap_class_sp_nsmp, 0};
static swig_type_info _swigt__p_sp_osc = {"_p_sp_osc", "sp_osc *", 0, 0, (void*)&_wrap_class_sp_osc, 0};
static swig_type_info _swigt__p_sp_oscmorph = {"_p_sp_oscmorph", "sp_oscmorph *", 0, 0, (void*)&_wrap_class_sp_oscmorph, 0};
static swig_type_info _swigt__p_sp_padsynth = {"_p_sp_padsynth", "sp_padsynth *", 0, 0, (void*)&_wrap_class_sp_padsynth, 0};
static swig_type_info _swigt__p_sp_pan2 = {"_p_sp_pan2", "sp_pan2 *", 0, 0, (void*)&_wrap_class_sp_pan2, 0};
static swig_type_info _swigt__p_sp_panst = {"_p_sp_panst", "sp_panst *", 0, 0, (void*)&_wrap_class_sp_panst, 0};
static swig_type_info _swigt__p_sp_param = {"_p_sp_param", "sp_param *", 0, 0, (void*)&_wrap_class_sp_param, 0};
static swig_type_info _swigt__p_sp_pareq = {"_p_sp_pareq", "sp_pareq *", 0, 0, (void*)&_wrap_class_sp_pareq, 0};
static swig_type_info _swigt__p_sp_paulstretch = {"_p_sp_paulstretch", "sp_paulstretch *", 0, 0, (void*)&_wrap_class_sp_paulstretch, 0};
static swig_type_info _swigt__p_sp_pdhalf = {"_p_sp_pdhalf", "sp_pdhalf *", 0, 0, (void*)&_wrap_class_sp_pdhalf, 0};
static swig_type_info _swigt__p_sp_peaklim = {"_p_sp_peaklim", "sp_peaklim *", 0, 0, (void*)&_wrap_class_sp_peaklim, 0};
static swig_type_info _swigt__p_sp_phaser = {"_p_sp_phaser", "sp_phaser *", 0, 0, (void*)&_wrap_class_sp_phaser, 0};
static swig_type_info _swigt__p_sp_phasor = {"_p_sp_phasor", "sp_phasor *", 0, 0, (void*)&_wrap_class_sp_phasor, 0};
static swig_type_info _swigt__p_sp_pinknoise = {"_p_sp_pinknoise", "sp_pinknoise *", 0, 0, (void*)&_wrap_class_sp_pinknoise, 0};
static swig_type_info _swigt__p_sp_pitchamdf = {"_p_sp_pitchamdf", "sp_pitchamdf *", 0, 0, (void*)&_wrap_class_sp_pitchamdf, 0};
static swig_type_info _swigt__p_sp_pluck = {"_p_sp_pluck", "sp_pluck *", 0, 0, (void*)&_wrap_class_sp_pluck, 0};
static swig_type_info _swigt__p_sp_port = {"_p_sp_port", "sp_port *", 0, 0, (void*)&_wrap_class_sp_port, 0};
static swig_type_info _swigt__p_sp_posc3 = {"_p_sp_posc3", "sp_posc3 *", 0, 0, (void*)&_wrap_class_sp_posc3, 0};
static swig_type_info _swigt__p_sp_progress = {"_p_sp_progress", "sp_progress *", 0, 0, (void*)&_wrap_class_sp_progress, 0};
static swig_type_info _swigt__p_sp_prop = {"_p_sp_prop", "sp_prop *", 0, 0, (void*)&_wrap_class_sp_prop, 0};
static swig_type_info _swigt__p_sp_pshift = {"_p_sp_pshift", "sp_pshift *", 0, 0, (void*)&_wrap_class_sp_pshift, 0};
static swig_type_info _swigt__p_sp_ptrack = {"_p_sp_ptrack", "sp_ptrack *", 0, 0, (void*)&_wrap_class_sp_ptrack, 0};
static swig_type_info _swigt__p_sp_randh = {"_p_sp_randh", "sp_randh *", 0, 0, (void*)&_wrap_class_sp_randh, 0};
static swig_type_info _swigt__p_sp_randi = {"_p_sp_randi", "sp_randi *", 0, 0, (void*)&_wrap_class_sp_randi, 0};
static swig_type_info _swigt__p_sp_randmt = {"_p_sp_randmt", "sp_randmt *", 0, 0, (void*)&_wrap_class_sp_randmt, 0};
static swig_type_info _swigt__p_sp_random = {"_p_sp_random", "sp_random *", 0, 0, (void*)&_wrap_class_sp_random, 0};
static swig_type_info _swigt__p_sp_reson = {"_p_sp_reson", "sp_reson *", 0, 0, (void*)&_wrap_class_sp_reson, 0};
static swig_type_info _swigt__p_sp_reverse = {"_p_sp_reverse", "sp_reverse *", 0, 0, (void*)&_wrap_class_sp_reverse, 0};
static swig_type_info _swigt__p_sp_revsc = {"_p_sp_revsc", "sp_revsc *", 0, 0, (void*)&_wrap_class_sp_revsc, 0};
static swig_type_info _swigt__p_sp_revsc_dl = {"_p_sp_revsc_dl", "sp_revsc_dl *", 0, 0, (void*)&_wrap_class_sp_revsc_dl, 0};
static swig_type_info _swigt__p_sp_rms = {"_p_sp_rms", "sp_rms *", 0, 0, (void*)&_wrap_class_sp_rms, 0};
static swig_type_info _swigt__p_sp_rpt = {"_p_sp_rpt", "sp_rpt *", 0, 0, (void*)&_wrap_class_sp_rpt, 0};
static swig_type_info _swigt__p_sp_rspline = {"_p_sp_rspline", "sp_rspline *", 0, 0, (void*)&_wrap_class_sp_rspline, 0};
static swig_type_info _swigt__p_sp_samphold = {"_p_sp_samphold", "sp_samphold *", 0, 0, (void*)&_wrap_class_sp_samphold, 0};
static swig_type_info _swigt__p_sp_saturator = {"_p_sp_saturator", "sp_saturator *", 0, 0, (void*)&_wrap_class_sp_saturator, 0};
static swig_type_info _swigt__p_sp_scale = {"_p_sp_scale", "sp_scale *", 0, 0, (void*)&_wrap_class_sp_scale, 0};
static swig_type_info _swigt__p_sp_sdelay = {"_p_sp_sdelay", "sp_sdelay *", 0, 0, (void*)&_wrap_class_sp_sdelay, 0};
static swig_type_info _swigt__p_sp_slice = {"_p_sp_slice", "sp_slice *", 0, 0, (void*)&_wrap_class_sp_slice, 0};
static swig_type_info _swigt__p_sp_smoothdelay = {"_p_sp_smoothdelay", "sp_smoothdelay *", 0, 0, (void*)&_wrap_class_sp_smoothdelay, 0};
static swig_type_info _swigt__p_sp_spa = {"_p_sp_spa", "sp_spa *", 0, 0, (void*)&_wrap_class_sp_spa, 0};
static swig_type_info _swigt__p_sp_sparec = {"_p_sp_sparec", "sp_sparec *", 0, 0, (void*)&_wrap_class_sp_sparec, 0};
static swig_type_info _swigt__p_sp_streson = {"_p_sp_streson", "sp_streson *", 0, 0, (void*)&_wrap_class_sp_streson, 0};
static swig_type_info _swigt__p_sp_switch = {"_p_sp_switch", "sp_switch *", 0, 0, (void*)&_wrap_class_sp_switch, 0};
static swig_type_info _swigt__p_sp_tabread = {"_p_sp_tabread", "sp_tabread *", 0, 0, (void*)&_wrap_class_sp_tabread, 0};
static swig_type_info _swigt__p_sp_tadsr = {"_p_sp_tadsr", "sp_tadsr *", 0, 0, (void*)&_wrap_class_sp_tadsr, 0};
static swig_type_info _swigt__p_sp_talkbox = {"_p_sp_talkbox", "sp_talkbox *", 0, 0, (void*)&_wrap_class_sp_talkbox, 0};
static swig_type_info _swigt__p_sp_tblrec = {"_p_sp_tblrec", "sp_tblrec *", 0, 0, (void*)&_wrap_class_sp_tblrec, 0};
static swig_type_info _swigt__p_sp_tbvcf = {"_p_sp_tbvcf", "sp_tbvcf *", 0, 0, (void*)&_wrap_class_sp_tbvcf, 0};
static swig_type_info _swigt__p_sp_tdiv = {"_p_sp_tdiv", "sp_tdiv *", 0, 0, (void*)&_wrap_class_sp_tdiv, 0};
static swig_type_info _swigt__p_sp_tenv = {"_p_sp_tenv", "sp_tenv *", 0, 0, (void*)&_wrap_class_sp_tenv, 0};
static swig_type_info _swigt__p_sp_tenv2 = {"_p_sp_tenv2", "sp_tenv2 *", 0, 0, (void*)&_wrap_class_sp_tenv2, 0};
static swig_type_info _swigt__p_sp_tenvx = {"_p_sp_tenvx", "sp_tenvx *", 0, 0, (void*)&_wrap_class_sp_tenvx, 0};
static swig_type_info _swigt__p_sp_tevent = {"_p_sp_tevent", "sp_tevent *", 0, 0, (void*)&_wrap_class_sp_tevent, 0};
static swig_type_info _swigt__p_sp_tgate = {"_p_sp_tgate", "sp_tgate *", 0, 0, (void*)&_wrap_class_sp_tgate, 0};
static swig_type_info _swigt__p_sp_thresh = {"_p_sp_thresh", "sp_thresh *", 0, 0, (void*)&_wrap_class_sp_thresh, 0};
static swig_type_info _swigt__p_sp_timer = {"_p_sp_timer", "sp_timer *", 0, 0, (void*)&_wrap_class_sp_timer, 0};
static swig_type_info _swigt__p_sp_tin = {"_p_sp_tin", "sp_tin *", 0, 0, (void*)&_wrap_class_sp_tin, 0};
static swig_type_info _swigt__p_sp_tone = {"_p_sp_tone", "sp_tone *", 0, 0, (void*)&_wrap_class_sp_tone, 0};
static swig_type_info _swigt__p_sp_trand = {"_p_sp_trand", "sp_trand *", 0, 0, (void*)&_wrap_class_sp_trand, 0};
static swig_type_info _swigt__p_sp_tseg = {"_p_sp_tseg", "sp_tseg *", 0, 0, (void*)&_wrap_class_sp_tseg, 0};
static swig_type_info _swigt__p_sp_tseq = {"_p_sp_tseq", "sp_tseq *", 0, 0, (void*)&_wrap_class_sp_tseq, 0};
static swig_type_info _swigt__p_sp_vdelay = {"_p_sp_vdelay", "sp_vdelay *", 0, 0, (void*)&_wrap_class_sp_vdelay, 0};
static swig_type_info _swigt__p_sp_voc = {"_p_sp_voc", "sp_voc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sp_vocoder = {"_p_sp_vocoder", "sp_vocoder *", 0, 0, (void*)&_wrap_class_sp_vocoder, 0};
static swig_type_info _swigt__p_sp_waveset = {"_p_sp_waveset", "sp_waveset *", 0, 0, (void*)&_wrap_class_sp_waveset, 0};
static swig_type_info _swigt__p_sp_wavin = {"_p_sp_wavin", "sp_wavin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sp_wavout = {"_p_sp_wavout", "sp_wavout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sp_wpkorg35 = {"_p_sp_wpkorg35", "sp_wpkorg35 *", 0, 0, (void*)&_wrap_class_sp_wpkorg35, 0};
static swig_type_info _swigt__p_sp_zitarev = {"_p_sp_zitarev", "sp_zitarev *", 0, 0, (void*)&_wrap_class_sp_zitarev, 0};
static swig_type_info _swigt__p_spa_header = {"_p_spa_header", "spa_header *", 0, 0, (void*)&_wrap_class_spa_header, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)&_wrap_class_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)&_wrap_class_float_vector, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_double_t = {"_p_std__vector_iteratorT_double_t", "std::vector_iterator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_float_t = {"_p_std__vector_iteratorT_float_t", "std::vector_iterator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16_t = {"_p_uint16_t", "uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *|sp_frame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FFTFREQS,
  &_swigt__p_FFTwrapper,
  &_swigt__p_FILE,
  &_swigt__p_a_7__float,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_f_p_sp_data_p_void__void,
  &_swigt__p_f_p_void__void,
  &_swigt__p_f_p_void_p_float__void,
  &_swigt__p_float,
  &_swigt__p_int16_t,
  &_swigt__p_int32_t,
  &_swigt__p_kiss_fft_cpx,
  &_swigt__p_kiss_fftr_state,
  &_swigt__p_nano_dict,
  &_swigt__p_nano_entry,
  &_swigt__p_nanosamp,
  &_swigt__p_openlpc_d_state,
  &_swigt__p_openlpc_e_state,
  &_swigt__p_p_FFTwrapper,
  &_swigt__p_p_float,
  &_swigt__p_p_nano_entry,
  &_swigt__p_p_sp_adsr,
  &_swigt__p_p_sp_allpass,
  &_swigt__p_p_sp_atone,
  &_swigt__p_p_sp_autowah,
  &_swigt__p_p_sp_bal,
  &_swigt__p_p_sp_bar,
  &_swigt__p_p_sp_biquad,
  &_swigt__p_p_sp_biscale,
  &_swigt__p_p_sp_bitcrush,
  &_swigt__p_p_sp_blsaw,
  &_swigt__p_p_sp_blsquare,
  &_swigt__p_p_sp_bltriangle,
  &_swigt__p_p_sp_brown,
  &_swigt__p_p_sp_butbp,
  &_swigt__p_p_sp_butbr,
  &_swigt__p_p_sp_buthp,
  &_swigt__p_p_sp_butlp,
  &_swigt__p_p_sp_clip,
  &_swigt__p_p_sp_clock,
  &_swigt__p_p_sp_comb,
  &_swigt__p_p_sp_compressor,
  &_swigt__p_p_sp_conv,
  &_swigt__p_p_sp_count,
  &_swigt__p_p_sp_crossfade,
  &_swigt__p_p_sp_data,
  &_swigt__p_p_sp_dcblock,
  &_swigt__p_p_sp_delay,
  &_swigt__p_p_sp_diode,
  &_swigt__p_p_sp_diskin,
  &_swigt__p_p_sp_dist,
  &_swigt__p_p_sp_dmetro,
  &_swigt__p_p_sp_drip,
  &_swigt__p_p_sp_dtrig,
  &_swigt__p_p_sp_dust,
  &_swigt__p_p_sp_eqfil,
  &_swigt__p_p_sp_expon,
  &_swigt__p_p_sp_fof,
  &_swigt__p_p_sp_fofilt,
  &_swigt__p_p_sp_fog,
  &_swigt__p_p_sp_fold,
  &_swigt__p_p_sp_foo,
  &_swigt__p_p_sp_fosc,
  &_swigt__p_p_sp_ftbl,
  &_swigt__p_p_sp_gbuzz,
  &_swigt__p_p_sp_hilbert,
  &_swigt__p_p_sp_in,
  &_swigt__p_p_sp_incr,
  &_swigt__p_p_sp_jcrev,
  &_swigt__p_p_sp_jitter,
  &_swigt__p_p_sp_line,
  &_swigt__p_p_sp_lpc,
  &_swigt__p_p_sp_lpf18,
  &_swigt__p_p_sp_maygate,
  &_swigt__p_p_sp_metro,
  &_swigt__p_p_sp_mincer,
  &_swigt__p_p_sp_mode,
  &_swigt__p_p_sp_moogladder,
  &_swigt__p_p_sp_noise,
  &_swigt__p_p_sp_nsmp,
  &_swigt__p_p_sp_osc,
  &_swigt__p_p_sp_oscmorph,
  &_swigt__p_p_sp_pan2,
  &_swigt__p_p_sp_panst,
  &_swigt__p_p_sp_pareq,
  &_swigt__p_p_sp_paulstretch,
  &_swigt__p_p_sp_pdhalf,
  &_swigt__p_p_sp_peaklim,
  &_swigt__p_p_sp_phaser,
  &_swigt__p_p_sp_phasor,
  &_swigt__p_p_sp_pinknoise,
  &_swigt__p_p_sp_pitchamdf,
  &_swigt__p_p_sp_pluck,
  &_swigt__p_p_sp_port,
  &_swigt__p_p_sp_posc3,
  &_swigt__p_p_sp_progress,
  &_swigt__p_p_sp_prop,
  &_swigt__p_p_sp_pshift,
  &_swigt__p_p_sp_ptrack,
  &_swigt__p_p_sp_randh,
  &_swigt__p_p_sp_randi,
  &_swigt__p_p_sp_random,
  &_swigt__p_p_sp_reson,
  &_swigt__p_p_sp_reverse,
  &_swigt__p_p_sp_revsc,
  &_swigt__p_p_sp_rms,
  &_swigt__p_p_sp_rpt,
  &_swigt__p_p_sp_rspline,
  &_swigt__p_p_sp_samphold,
  &_swigt__p_p_sp_saturator,
  &_swigt__p_p_sp_scale,
  &_swigt__p_p_sp_sdelay,
  &_swigt__p_p_sp_slice,
  &_swigt__p_p_sp_smoothdelay,
  &_swigt__p_p_sp_spa,
  &_swigt__p_p_sp_sparec,
  &_swigt__p_p_sp_streson,
  &_swigt__p_p_sp_switch,
  &_swigt__p_p_sp_tabread,
  &_swigt__p_p_sp_tadsr,
  &_swigt__p_p_sp_talkbox,
  &_swigt__p_p_sp_tblrec,
  &_swigt__p_p_sp_tbvcf,
  &_swigt__p_p_sp_tdiv,
  &_swigt__p_p_sp_tenv,
  &_swigt__p_p_sp_tenv2,
  &_swigt__p_p_sp_tenvx,
  &_swigt__p_p_sp_tevent,
  &_swigt__p_p_sp_tgate,
  &_swigt__p_p_sp_thresh,
  &_swigt__p_p_sp_timer,
  &_swigt__p_p_sp_tin,
  &_swigt__p_p_sp_tone,
  &_swigt__p_p_sp_trand,
  &_swigt__p_p_sp_tseg,
  &_swigt__p_p_sp_tseq,
  &_swigt__p_p_sp_vdelay,
  &_swigt__p_p_sp_voc,
  &_swigt__p_p_sp_vocoder,
  &_swigt__p_p_sp_waveset,
  &_swigt__p_p_sp_wavin,
  &_swigt__p_p_sp_wavout,
  &_swigt__p_p_sp_wpkorg35,
  &_swigt__p_p_sp_zitarev,
  &_swigt__p_prop_data,
  &_swigt__p_prop_entry,
  &_swigt__p_prop_event,
  &_swigt__p_prop_list,
  &_swigt__p_prop_stack,
  &_swigt__p_prop_val,
  &_swigt__p_short,
  &_swigt__p_sp_adsr,
  &_swigt__p_sp_allpass,
  &_swigt__p_sp_atone,
  &_swigt__p_sp_audio,
  &_swigt__p_sp_autowah,
  &_swigt__p_sp_auxdata,
  &_swigt__p_sp_bal,
  &_swigt__p_sp_bar,
  &_swigt__p_sp_biquad,
  &_swigt__p_sp_biscale,
  &_swigt__p_sp_bitcrush,
  &_swigt__p_sp_blsaw,
  &_swigt__p_sp_blsquare,
  &_swigt__p_sp_bltriangle,
  &_swigt__p_sp_brown,
  &_swigt__p_sp_butbp,
  &_swigt__p_sp_butbr,
  &_swigt__p_sp_buthp,
  &_swigt__p_sp_butlp,
  &_swigt__p_sp_clip,
  &_swigt__p_sp_clock,
  &_swigt__p_sp_comb,
  &_swigt__p_sp_compressor,
  &_swigt__p_sp_conv,
  &_swigt__p_sp_count,
  &_swigt__p_sp_crossfade,
  &_swigt__p_sp_data,
  &_swigt__p_sp_dcblock,
  &_swigt__p_sp_delay,
  &_swigt__p_sp_diode,
  &_swigt__p_sp_diskin,
  &_swigt__p_sp_dist,
  &_swigt__p_sp_dmetro,
  &_swigt__p_sp_drip,
  &_swigt__p_sp_dtrig,
  &_swigt__p_sp_dust,
  &_swigt__p_sp_eqfil,
  &_swigt__p_sp_expon,
  &_swigt__p_sp_fft,
  &_swigt__p_sp_fof,
  &_swigt__p_sp_fof_overlap,
  &_swigt__p_sp_fofilt,
  &_swigt__p_sp_fog,
  &_swigt__p_sp_fog_overlap,
  &_swigt__p_sp_fold,
  &_swigt__p_sp_foo,
  &_swigt__p_sp_fosc,
  &_swigt__p_sp_ftbl,
  &_swigt__p_sp_gbuzz,
  &_swigt__p_sp_hilbert,
  &_swigt__p_sp_in,
  &_swigt__p_sp_incr,
  &_swigt__p_sp_jcrev,
  &_swigt__p_sp_jitter,
  &_swigt__p_sp_line,
  &_swigt__p_sp_lpc,
  &_swigt__p_sp_lpf18,
  &_swigt__p_sp_maygate,
  &_swigt__p_sp_metro,
  &_swigt__p_sp_mincer,
  &_swigt__p_sp_mode,
  &_swigt__p_sp_moogladder,
  &_swigt__p_sp_noise,
  &_swigt__p_sp_nsmp,
  &_swigt__p_sp_osc,
  &_swigt__p_sp_oscmorph,
  &_swigt__p_sp_padsynth,
  &_swigt__p_sp_pan2,
  &_swigt__p_sp_panst,
  &_swigt__p_sp_param,
  &_swigt__p_sp_pareq,
  &_swigt__p_sp_paulstretch,
  &_swigt__p_sp_pdhalf,
  &_swigt__p_sp_peaklim,
  &_swigt__p_sp_phaser,
  &_swigt__p_sp_phasor,
  &_swigt__p_sp_pinknoise,
  &_swigt__p_sp_pitchamdf,
  &_swigt__p_sp_pluck,
  &_swigt__p_sp_port,
  &_swigt__p_sp_posc3,
  &_swigt__p_sp_progress,
  &_swigt__p_sp_prop,
  &_swigt__p_sp_pshift,
  &_swigt__p_sp_ptrack,
  &_swigt__p_sp_randh,
  &_swigt__p_sp_randi,
  &_swigt__p_sp_randmt,
  &_swigt__p_sp_random,
  &_swigt__p_sp_reson,
  &_swigt__p_sp_reverse,
  &_swigt__p_sp_revsc,
  &_swigt__p_sp_revsc_dl,
  &_swigt__p_sp_rms,
  &_swigt__p_sp_rpt,
  &_swigt__p_sp_rspline,
  &_swigt__p_sp_samphold,
  &_swigt__p_sp_saturator,
  &_swigt__p_sp_scale,
  &_swigt__p_sp_sdelay,
  &_swigt__p_sp_slice,
  &_swigt__p_sp_smoothdelay,
  &_swigt__p_sp_spa,
  &_swigt__p_sp_sparec,
  &_swigt__p_sp_streson,
  &_swigt__p_sp_switch,
  &_swigt__p_sp_tabread,
  &_swigt__p_sp_tadsr,
  &_swigt__p_sp_talkbox,
  &_swigt__p_sp_tblrec,
  &_swigt__p_sp_tbvcf,
  &_swigt__p_sp_tdiv,
  &_swigt__p_sp_tenv,
  &_swigt__p_sp_tenv2,
  &_swigt__p_sp_tenvx,
  &_swigt__p_sp_tevent,
  &_swigt__p_sp_tgate,
  &_swigt__p_sp_thresh,
  &_swigt__p_sp_timer,
  &_swigt__p_sp_tin,
  &_swigt__p_sp_tone,
  &_swigt__p_sp_trand,
  &_swigt__p_sp_tseg,
  &_swigt__p_sp_tseq,
  &_swigt__p_sp_vdelay,
  &_swigt__p_sp_voc,
  &_swigt__p_sp_vocoder,
  &_swigt__p_sp_waveset,
  &_swigt__p_sp_wavin,
  &_swigt__p_sp_wavout,
  &_swigt__p_sp_wpkorg35,
  &_swigt__p_sp_zitarev,
  &_swigt__p_spa_header,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vector_iteratorT_double_t,
  &_swigt__p_std__vector_iteratorT_float_t,
  &_swigt__p_uint16_t,
  &_swigt__p_uint32_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_FFTFREQS[] = {  {&_swigt__p_FFTFREQS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FFTwrapper[] = {  {&_swigt__p_FFTwrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_7__float[] = {  {&_swigt__p_a_7__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_sp_data_p_void__void[] = {  {&_swigt__p_f_p_sp_data_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_float__void[] = {  {&_swigt__p_f_p_void_p_float__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int16_t[] = {  {&_swigt__p_int16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kiss_fft_cpx[] = {  {&_swigt__p_kiss_fft_cpx, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kiss_fftr_state[] = {  {&_swigt__p_kiss_fftr_state, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nano_dict[] = {  {&_swigt__p_nano_dict, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nano_entry[] = {  {&_swigt__p_nano_entry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nanosamp[] = {  {&_swigt__p_nanosamp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openlpc_d_state[] = {  {&_swigt__p_openlpc_d_state, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openlpc_e_state[] = {  {&_swigt__p_openlpc_e_state, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_FFTwrapper[] = {  {&_swigt__p_p_FFTwrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float[] = {  {&_swigt__p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_nano_entry[] = {  {&_swigt__p_p_nano_entry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_adsr[] = {  {&_swigt__p_p_sp_adsr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_allpass[] = {  {&_swigt__p_p_sp_allpass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_atone[] = {  {&_swigt__p_p_sp_atone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_autowah[] = {  {&_swigt__p_p_sp_autowah, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_bal[] = {  {&_swigt__p_p_sp_bal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_bar[] = {  {&_swigt__p_p_sp_bar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_biquad[] = {  {&_swigt__p_p_sp_biquad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_biscale[] = {  {&_swigt__p_p_sp_biscale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_bitcrush[] = {  {&_swigt__p_p_sp_bitcrush, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_blsaw[] = {  {&_swigt__p_p_sp_blsaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_blsquare[] = {  {&_swigt__p_p_sp_blsquare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_bltriangle[] = {  {&_swigt__p_p_sp_bltriangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_brown[] = {  {&_swigt__p_p_sp_brown, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_butbp[] = {  {&_swigt__p_p_sp_butbp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_butbr[] = {  {&_swigt__p_p_sp_butbr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_buthp[] = {  {&_swigt__p_p_sp_buthp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_butlp[] = {  {&_swigt__p_p_sp_butlp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_clip[] = {  {&_swigt__p_p_sp_clip, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_clock[] = {  {&_swigt__p_p_sp_clock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_comb[] = {  {&_swigt__p_p_sp_comb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_compressor[] = {  {&_swigt__p_p_sp_compressor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_conv[] = {  {&_swigt__p_p_sp_conv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_count[] = {  {&_swigt__p_p_sp_count, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_crossfade[] = {  {&_swigt__p_p_sp_crossfade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_data[] = {  {&_swigt__p_p_sp_data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_dcblock[] = {  {&_swigt__p_p_sp_dcblock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_delay[] = {  {&_swigt__p_p_sp_delay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_diode[] = {  {&_swigt__p_p_sp_diode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_diskin[] = {  {&_swigt__p_p_sp_diskin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_dist[] = {  {&_swigt__p_p_sp_dist, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_dmetro[] = {  {&_swigt__p_p_sp_dmetro, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_drip[] = {  {&_swigt__p_p_sp_drip, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_dtrig[] = {  {&_swigt__p_p_sp_dtrig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_dust[] = {  {&_swigt__p_p_sp_dust, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_eqfil[] = {  {&_swigt__p_p_sp_eqfil, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_expon[] = {  {&_swigt__p_p_sp_expon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_fof[] = {  {&_swigt__p_p_sp_fof, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_fofilt[] = {  {&_swigt__p_p_sp_fofilt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_fog[] = {  {&_swigt__p_p_sp_fog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_fold[] = {  {&_swigt__p_p_sp_fold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_foo[] = {  {&_swigt__p_p_sp_foo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_fosc[] = {  {&_swigt__p_p_sp_fosc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_ftbl[] = {  {&_swigt__p_p_sp_ftbl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_gbuzz[] = {  {&_swigt__p_p_sp_gbuzz, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_hilbert[] = {  {&_swigt__p_p_sp_hilbert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_in[] = {  {&_swigt__p_p_sp_in, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_incr[] = {  {&_swigt__p_p_sp_incr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_jcrev[] = {  {&_swigt__p_p_sp_jcrev, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_jitter[] = {  {&_swigt__p_p_sp_jitter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_line[] = {  {&_swigt__p_p_sp_line, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_lpc[] = {  {&_swigt__p_p_sp_lpc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_lpf18[] = {  {&_swigt__p_p_sp_lpf18, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_maygate[] = {  {&_swigt__p_p_sp_maygate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_metro[] = {  {&_swigt__p_p_sp_metro, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_mincer[] = {  {&_swigt__p_p_sp_mincer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_mode[] = {  {&_swigt__p_p_sp_mode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_moogladder[] = {  {&_swigt__p_p_sp_moogladder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_noise[] = {  {&_swigt__p_p_sp_noise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_nsmp[] = {  {&_swigt__p_p_sp_nsmp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_osc[] = {  {&_swigt__p_p_sp_osc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_oscmorph[] = {  {&_swigt__p_p_sp_oscmorph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_pan2[] = {  {&_swigt__p_p_sp_pan2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_panst[] = {  {&_swigt__p_p_sp_panst, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_pareq[] = {  {&_swigt__p_p_sp_pareq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_paulstretch[] = {  {&_swigt__p_p_sp_paulstretch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_pdhalf[] = {  {&_swigt__p_p_sp_pdhalf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_peaklim[] = {  {&_swigt__p_p_sp_peaklim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_phaser[] = {  {&_swigt__p_p_sp_phaser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_phasor[] = {  {&_swigt__p_p_sp_phasor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_pinknoise[] = {  {&_swigt__p_p_sp_pinknoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_pitchamdf[] = {  {&_swigt__p_p_sp_pitchamdf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_pluck[] = {  {&_swigt__p_p_sp_pluck, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_port[] = {  {&_swigt__p_p_sp_port, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_posc3[] = {  {&_swigt__p_p_sp_posc3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_progress[] = {  {&_swigt__p_p_sp_progress, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_prop[] = {  {&_swigt__p_p_sp_prop, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_pshift[] = {  {&_swigt__p_p_sp_pshift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_ptrack[] = {  {&_swigt__p_p_sp_ptrack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_randh[] = {  {&_swigt__p_p_sp_randh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_randi[] = {  {&_swigt__p_p_sp_randi, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_random[] = {  {&_swigt__p_p_sp_random, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_reson[] = {  {&_swigt__p_p_sp_reson, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_reverse[] = {  {&_swigt__p_p_sp_reverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_revsc[] = {  {&_swigt__p_p_sp_revsc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_rms[] = {  {&_swigt__p_p_sp_rms, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_rpt[] = {  {&_swigt__p_p_sp_rpt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_rspline[] = {  {&_swigt__p_p_sp_rspline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_samphold[] = {  {&_swigt__p_p_sp_samphold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_saturator[] = {  {&_swigt__p_p_sp_saturator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_scale[] = {  {&_swigt__p_p_sp_scale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_sdelay[] = {  {&_swigt__p_p_sp_sdelay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_slice[] = {  {&_swigt__p_p_sp_slice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_smoothdelay[] = {  {&_swigt__p_p_sp_smoothdelay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_spa[] = {  {&_swigt__p_p_sp_spa, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_sparec[] = {  {&_swigt__p_p_sp_sparec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_streson[] = {  {&_swigt__p_p_sp_streson, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_switch[] = {  {&_swigt__p_p_sp_switch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_tabread[] = {  {&_swigt__p_p_sp_tabread, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_tadsr[] = {  {&_swigt__p_p_sp_tadsr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_talkbox[] = {  {&_swigt__p_p_sp_talkbox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_tblrec[] = {  {&_swigt__p_p_sp_tblrec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_tbvcf[] = {  {&_swigt__p_p_sp_tbvcf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_tdiv[] = {  {&_swigt__p_p_sp_tdiv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_tenv[] = {  {&_swigt__p_p_sp_tenv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_tenv2[] = {  {&_swigt__p_p_sp_tenv2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_tenvx[] = {  {&_swigt__p_p_sp_tenvx, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_tevent[] = {  {&_swigt__p_p_sp_tevent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_tgate[] = {  {&_swigt__p_p_sp_tgate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_thresh[] = {  {&_swigt__p_p_sp_thresh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_timer[] = {  {&_swigt__p_p_sp_timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_tin[] = {  {&_swigt__p_p_sp_tin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_tone[] = {  {&_swigt__p_p_sp_tone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_trand[] = {  {&_swigt__p_p_sp_trand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_tseg[] = {  {&_swigt__p_p_sp_tseg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_tseq[] = {  {&_swigt__p_p_sp_tseq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_vdelay[] = {  {&_swigt__p_p_sp_vdelay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_voc[] = {  {&_swigt__p_p_sp_voc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_vocoder[] = {  {&_swigt__p_p_sp_vocoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_waveset[] = {  {&_swigt__p_p_sp_waveset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_wavin[] = {  {&_swigt__p_p_sp_wavin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_wavout[] = {  {&_swigt__p_p_sp_wavout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_wpkorg35[] = {  {&_swigt__p_p_sp_wpkorg35, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sp_zitarev[] = {  {&_swigt__p_p_sp_zitarev, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prop_data[] = {  {&_swigt__p_prop_data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prop_entry[] = {  {&_swigt__p_prop_entry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prop_event[] = {  {&_swigt__p_prop_event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prop_list[] = {  {&_swigt__p_prop_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prop_stack[] = {  {&_swigt__p_prop_stack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_prop_val[] = {  {&_swigt__p_prop_val, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_adsr[] = {  {&_swigt__p_sp_adsr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_allpass[] = {  {&_swigt__p_sp_allpass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_atone[] = {  {&_swigt__p_sp_atone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_audio[] = {  {&_swigt__p_sp_audio, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_autowah[] = {  {&_swigt__p_sp_autowah, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_auxdata[] = {  {&_swigt__p_sp_auxdata, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_bal[] = {  {&_swigt__p_sp_bal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_bar[] = {  {&_swigt__p_sp_bar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_biquad[] = {  {&_swigt__p_sp_biquad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_biscale[] = {  {&_swigt__p_sp_biscale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_bitcrush[] = {  {&_swigt__p_sp_bitcrush, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_blsaw[] = {  {&_swigt__p_sp_blsaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_blsquare[] = {  {&_swigt__p_sp_blsquare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_bltriangle[] = {  {&_swigt__p_sp_bltriangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_brown[] = {  {&_swigt__p_sp_brown, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_butbp[] = {  {&_swigt__p_sp_butbp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_butbr[] = {  {&_swigt__p_sp_butbr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_buthp[] = {  {&_swigt__p_sp_buthp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_butlp[] = {  {&_swigt__p_sp_butlp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_clip[] = {  {&_swigt__p_sp_clip, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_clock[] = {  {&_swigt__p_sp_clock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_comb[] = {  {&_swigt__p_sp_comb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_compressor[] = {  {&_swigt__p_sp_compressor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_conv[] = {  {&_swigt__p_sp_conv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_count[] = {  {&_swigt__p_sp_count, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_crossfade[] = {  {&_swigt__p_sp_crossfade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_data[] = {  {&_swigt__p_sp_data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_dcblock[] = {  {&_swigt__p_sp_dcblock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_delay[] = {  {&_swigt__p_sp_delay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_diode[] = {  {&_swigt__p_sp_diode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_diskin[] = {  {&_swigt__p_sp_diskin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_dist[] = {  {&_swigt__p_sp_dist, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_dmetro[] = {  {&_swigt__p_sp_dmetro, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_drip[] = {  {&_swigt__p_sp_drip, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_dtrig[] = {  {&_swigt__p_sp_dtrig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_dust[] = {  {&_swigt__p_sp_dust, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_eqfil[] = {  {&_swigt__p_sp_eqfil, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_expon[] = {  {&_swigt__p_sp_expon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_fft[] = {  {&_swigt__p_sp_fft, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_fof[] = {  {&_swigt__p_sp_fof, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_fof_overlap[] = {  {&_swigt__p_sp_fof_overlap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_fofilt[] = {  {&_swigt__p_sp_fofilt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_fog[] = {  {&_swigt__p_sp_fog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_fog_overlap[] = {  {&_swigt__p_sp_fog_overlap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_fold[] = {  {&_swigt__p_sp_fold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_foo[] = {  {&_swigt__p_sp_foo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_fosc[] = {  {&_swigt__p_sp_fosc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_ftbl[] = {  {&_swigt__p_sp_ftbl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_gbuzz[] = {  {&_swigt__p_sp_gbuzz, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_hilbert[] = {  {&_swigt__p_sp_hilbert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_in[] = {  {&_swigt__p_sp_in, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_incr[] = {  {&_swigt__p_sp_incr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_jcrev[] = {  {&_swigt__p_sp_jcrev, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_jitter[] = {  {&_swigt__p_sp_jitter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_line[] = {  {&_swigt__p_sp_line, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_lpc[] = {  {&_swigt__p_sp_lpc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_lpf18[] = {  {&_swigt__p_sp_lpf18, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_maygate[] = {  {&_swigt__p_sp_maygate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_metro[] = {  {&_swigt__p_sp_metro, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_mincer[] = {  {&_swigt__p_sp_mincer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_mode[] = {  {&_swigt__p_sp_mode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_moogladder[] = {  {&_swigt__p_sp_moogladder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_noise[] = {  {&_swigt__p_sp_noise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_nsmp[] = {  {&_swigt__p_sp_nsmp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_osc[] = {  {&_swigt__p_sp_osc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_oscmorph[] = {  {&_swigt__p_sp_oscmorph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_padsynth[] = {  {&_swigt__p_sp_padsynth, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_pan2[] = {  {&_swigt__p_sp_pan2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_panst[] = {  {&_swigt__p_sp_panst, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_param[] = {  {&_swigt__p_sp_param, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_pareq[] = {  {&_swigt__p_sp_pareq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_paulstretch[] = {  {&_swigt__p_sp_paulstretch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_pdhalf[] = {  {&_swigt__p_sp_pdhalf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_peaklim[] = {  {&_swigt__p_sp_peaklim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_phaser[] = {  {&_swigt__p_sp_phaser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_phasor[] = {  {&_swigt__p_sp_phasor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_pinknoise[] = {  {&_swigt__p_sp_pinknoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_pitchamdf[] = {  {&_swigt__p_sp_pitchamdf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_pluck[] = {  {&_swigt__p_sp_pluck, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_port[] = {  {&_swigt__p_sp_port, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_posc3[] = {  {&_swigt__p_sp_posc3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_progress[] = {  {&_swigt__p_sp_progress, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_prop[] = {  {&_swigt__p_sp_prop, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_pshift[] = {  {&_swigt__p_sp_pshift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_ptrack[] = {  {&_swigt__p_sp_ptrack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_randh[] = {  {&_swigt__p_sp_randh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_randi[] = {  {&_swigt__p_sp_randi, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_randmt[] = {  {&_swigt__p_sp_randmt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_random[] = {  {&_swigt__p_sp_random, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_reson[] = {  {&_swigt__p_sp_reson, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_reverse[] = {  {&_swigt__p_sp_reverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_revsc[] = {  {&_swigt__p_sp_revsc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_revsc_dl[] = {  {&_swigt__p_sp_revsc_dl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_rms[] = {  {&_swigt__p_sp_rms, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_rpt[] = {  {&_swigt__p_sp_rpt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_rspline[] = {  {&_swigt__p_sp_rspline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_samphold[] = {  {&_swigt__p_sp_samphold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_saturator[] = {  {&_swigt__p_sp_saturator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_scale[] = {  {&_swigt__p_sp_scale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_sdelay[] = {  {&_swigt__p_sp_sdelay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_slice[] = {  {&_swigt__p_sp_slice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_smoothdelay[] = {  {&_swigt__p_sp_smoothdelay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_spa[] = {  {&_swigt__p_sp_spa, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_sparec[] = {  {&_swigt__p_sp_sparec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_streson[] = {  {&_swigt__p_sp_streson, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_switch[] = {  {&_swigt__p_sp_switch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_tabread[] = {  {&_swigt__p_sp_tabread, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_tadsr[] = {  {&_swigt__p_sp_tadsr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_talkbox[] = {  {&_swigt__p_sp_talkbox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_tblrec[] = {  {&_swigt__p_sp_tblrec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_tbvcf[] = {  {&_swigt__p_sp_tbvcf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_tdiv[] = {  {&_swigt__p_sp_tdiv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_tenv[] = {  {&_swigt__p_sp_tenv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_tenv2[] = {  {&_swigt__p_sp_tenv2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_tenvx[] = {  {&_swigt__p_sp_tenvx, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_tevent[] = {  {&_swigt__p_sp_tevent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_tgate[] = {  {&_swigt__p_sp_tgate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_thresh[] = {  {&_swigt__p_sp_thresh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_timer[] = {  {&_swigt__p_sp_timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_tin[] = {  {&_swigt__p_sp_tin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_tone[] = {  {&_swigt__p_sp_tone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_trand[] = {  {&_swigt__p_sp_trand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_tseg[] = {  {&_swigt__p_sp_tseg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_tseq[] = {  {&_swigt__p_sp_tseq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_vdelay[] = {  {&_swigt__p_sp_vdelay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_voc[] = {  {&_swigt__p_sp_voc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_vocoder[] = {  {&_swigt__p_sp_vocoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_waveset[] = {  {&_swigt__p_sp_waveset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_wavin[] = {  {&_swigt__p_sp_wavin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_wavout[] = {  {&_swigt__p_sp_wavout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_wpkorg35[] = {  {&_swigt__p_sp_wpkorg35, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sp_zitarev[] = {  {&_swigt__p_sp_zitarev, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spa_header[] = {  {&_swigt__p_spa_header, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_double_t[] = {  {&_swigt__p_std__vector_iteratorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_float_t[] = {  {&_swigt__p_std__vector_iteratorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16_t[] = {  {&_swigt__p_uint16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FFTFREQS,
  _swigc__p_FFTwrapper,
  _swigc__p_FILE,
  _swigc__p_a_7__float,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_f_p_sp_data_p_void__void,
  _swigc__p_f_p_void__void,
  _swigc__p_f_p_void_p_float__void,
  _swigc__p_float,
  _swigc__p_int16_t,
  _swigc__p_int32_t,
  _swigc__p_kiss_fft_cpx,
  _swigc__p_kiss_fftr_state,
  _swigc__p_nano_dict,
  _swigc__p_nano_entry,
  _swigc__p_nanosamp,
  _swigc__p_openlpc_d_state,
  _swigc__p_openlpc_e_state,
  _swigc__p_p_FFTwrapper,
  _swigc__p_p_float,
  _swigc__p_p_nano_entry,
  _swigc__p_p_sp_adsr,
  _swigc__p_p_sp_allpass,
  _swigc__p_p_sp_atone,
  _swigc__p_p_sp_autowah,
  _swigc__p_p_sp_bal,
  _swigc__p_p_sp_bar,
  _swigc__p_p_sp_biquad,
  _swigc__p_p_sp_biscale,
  _swigc__p_p_sp_bitcrush,
  _swigc__p_p_sp_blsaw,
  _swigc__p_p_sp_blsquare,
  _swigc__p_p_sp_bltriangle,
  _swigc__p_p_sp_brown,
  _swigc__p_p_sp_butbp,
  _swigc__p_p_sp_butbr,
  _swigc__p_p_sp_buthp,
  _swigc__p_p_sp_butlp,
  _swigc__p_p_sp_clip,
  _swigc__p_p_sp_clock,
  _swigc__p_p_sp_comb,
  _swigc__p_p_sp_compressor,
  _swigc__p_p_sp_conv,
  _swigc__p_p_sp_count,
  _swigc__p_p_sp_crossfade,
  _swigc__p_p_sp_data,
  _swigc__p_p_sp_dcblock,
  _swigc__p_p_sp_delay,
  _swigc__p_p_sp_diode,
  _swigc__p_p_sp_diskin,
  _swigc__p_p_sp_dist,
  _swigc__p_p_sp_dmetro,
  _swigc__p_p_sp_drip,
  _swigc__p_p_sp_dtrig,
  _swigc__p_p_sp_dust,
  _swigc__p_p_sp_eqfil,
  _swigc__p_p_sp_expon,
  _swigc__p_p_sp_fof,
  _swigc__p_p_sp_fofilt,
  _swigc__p_p_sp_fog,
  _swigc__p_p_sp_fold,
  _swigc__p_p_sp_foo,
  _swigc__p_p_sp_fosc,
  _swigc__p_p_sp_ftbl,
  _swigc__p_p_sp_gbuzz,
  _swigc__p_p_sp_hilbert,
  _swigc__p_p_sp_in,
  _swigc__p_p_sp_incr,
  _swigc__p_p_sp_jcrev,
  _swigc__p_p_sp_jitter,
  _swigc__p_p_sp_line,
  _swigc__p_p_sp_lpc,
  _swigc__p_p_sp_lpf18,
  _swigc__p_p_sp_maygate,
  _swigc__p_p_sp_metro,
  _swigc__p_p_sp_mincer,
  _swigc__p_p_sp_mode,
  _swigc__p_p_sp_moogladder,
  _swigc__p_p_sp_noise,
  _swigc__p_p_sp_nsmp,
  _swigc__p_p_sp_osc,
  _swigc__p_p_sp_oscmorph,
  _swigc__p_p_sp_pan2,
  _swigc__p_p_sp_panst,
  _swigc__p_p_sp_pareq,
  _swigc__p_p_sp_paulstretch,
  _swigc__p_p_sp_pdhalf,
  _swigc__p_p_sp_peaklim,
  _swigc__p_p_sp_phaser,
  _swigc__p_p_sp_phasor,
  _swigc__p_p_sp_pinknoise,
  _swigc__p_p_sp_pitchamdf,
  _swigc__p_p_sp_pluck,
  _swigc__p_p_sp_port,
  _swigc__p_p_sp_posc3,
  _swigc__p_p_sp_progress,
  _swigc__p_p_sp_prop,
  _swigc__p_p_sp_pshift,
  _swigc__p_p_sp_ptrack,
  _swigc__p_p_sp_randh,
  _swigc__p_p_sp_randi,
  _swigc__p_p_sp_random,
  _swigc__p_p_sp_reson,
  _swigc__p_p_sp_reverse,
  _swigc__p_p_sp_revsc,
  _swigc__p_p_sp_rms,
  _swigc__p_p_sp_rpt,
  _swigc__p_p_sp_rspline,
  _swigc__p_p_sp_samphold,
  _swigc__p_p_sp_saturator,
  _swigc__p_p_sp_scale,
  _swigc__p_p_sp_sdelay,
  _swigc__p_p_sp_slice,
  _swigc__p_p_sp_smoothdelay,
  _swigc__p_p_sp_spa,
  _swigc__p_p_sp_sparec,
  _swigc__p_p_sp_streson,
  _swigc__p_p_sp_switch,
  _swigc__p_p_sp_tabread,
  _swigc__p_p_sp_tadsr,
  _swigc__p_p_sp_talkbox,
  _swigc__p_p_sp_tblrec,
  _swigc__p_p_sp_tbvcf,
  _swigc__p_p_sp_tdiv,
  _swigc__p_p_sp_tenv,
  _swigc__p_p_sp_tenv2,
  _swigc__p_p_sp_tenvx,
  _swigc__p_p_sp_tevent,
  _swigc__p_p_sp_tgate,
  _swigc__p_p_sp_thresh,
  _swigc__p_p_sp_timer,
  _swigc__p_p_sp_tin,
  _swigc__p_p_sp_tone,
  _swigc__p_p_sp_trand,
  _swigc__p_p_sp_tseg,
  _swigc__p_p_sp_tseq,
  _swigc__p_p_sp_vdelay,
  _swigc__p_p_sp_voc,
  _swigc__p_p_sp_vocoder,
  _swigc__p_p_sp_waveset,
  _swigc__p_p_sp_wavin,
  _swigc__p_p_sp_wavout,
  _swigc__p_p_sp_wpkorg35,
  _swigc__p_p_sp_zitarev,
  _swigc__p_prop_data,
  _swigc__p_prop_entry,
  _swigc__p_prop_event,
  _swigc__p_prop_list,
  _swigc__p_prop_stack,
  _swigc__p_prop_val,
  _swigc__p_short,
  _swigc__p_sp_adsr,
  _swigc__p_sp_allpass,
  _swigc__p_sp_atone,
  _swigc__p_sp_audio,
  _swigc__p_sp_autowah,
  _swigc__p_sp_auxdata,
  _swigc__p_sp_bal,
  _swigc__p_sp_bar,
  _swigc__p_sp_biquad,
  _swigc__p_sp_biscale,
  _swigc__p_sp_bitcrush,
  _swigc__p_sp_blsaw,
  _swigc__p_sp_blsquare,
  _swigc__p_sp_bltriangle,
  _swigc__p_sp_brown,
  _swigc__p_sp_butbp,
  _swigc__p_sp_butbr,
  _swigc__p_sp_buthp,
  _swigc__p_sp_butlp,
  _swigc__p_sp_clip,
  _swigc__p_sp_clock,
  _swigc__p_sp_comb,
  _swigc__p_sp_compressor,
  _swigc__p_sp_conv,
  _swigc__p_sp_count,
  _swigc__p_sp_crossfade,
  _swigc__p_sp_data,
  _swigc__p_sp_dcblock,
  _swigc__p_sp_delay,
  _swigc__p_sp_diode,
  _swigc__p_sp_diskin,
  _swigc__p_sp_dist,
  _swigc__p_sp_dmetro,
  _swigc__p_sp_drip,
  _swigc__p_sp_dtrig,
  _swigc__p_sp_dust,
  _swigc__p_sp_eqfil,
  _swigc__p_sp_expon,
  _swigc__p_sp_fft,
  _swigc__p_sp_fof,
  _swigc__p_sp_fof_overlap,
  _swigc__p_sp_fofilt,
  _swigc__p_sp_fog,
  _swigc__p_sp_fog_overlap,
  _swigc__p_sp_fold,
  _swigc__p_sp_foo,
  _swigc__p_sp_fosc,
  _swigc__p_sp_ftbl,
  _swigc__p_sp_gbuzz,
  _swigc__p_sp_hilbert,
  _swigc__p_sp_in,
  _swigc__p_sp_incr,
  _swigc__p_sp_jcrev,
  _swigc__p_sp_jitter,
  _swigc__p_sp_line,
  _swigc__p_sp_lpc,
  _swigc__p_sp_lpf18,
  _swigc__p_sp_maygate,
  _swigc__p_sp_metro,
  _swigc__p_sp_mincer,
  _swigc__p_sp_mode,
  _swigc__p_sp_moogladder,
  _swigc__p_sp_noise,
  _swigc__p_sp_nsmp,
  _swigc__p_sp_osc,
  _swigc__p_sp_oscmorph,
  _swigc__p_sp_padsynth,
  _swigc__p_sp_pan2,
  _swigc__p_sp_panst,
  _swigc__p_sp_param,
  _swigc__p_sp_pareq,
  _swigc__p_sp_paulstretch,
  _swigc__p_sp_pdhalf,
  _swigc__p_sp_peaklim,
  _swigc__p_sp_phaser,
  _swigc__p_sp_phasor,
  _swigc__p_sp_pinknoise,
  _swigc__p_sp_pitchamdf,
  _swigc__p_sp_pluck,
  _swigc__p_sp_port,
  _swigc__p_sp_posc3,
  _swigc__p_sp_progress,
  _swigc__p_sp_prop,
  _swigc__p_sp_pshift,
  _swigc__p_sp_ptrack,
  _swigc__p_sp_randh,
  _swigc__p_sp_randi,
  _swigc__p_sp_randmt,
  _swigc__p_sp_random,
  _swigc__p_sp_reson,
  _swigc__p_sp_reverse,
  _swigc__p_sp_revsc,
  _swigc__p_sp_revsc_dl,
  _swigc__p_sp_rms,
  _swigc__p_sp_rpt,
  _swigc__p_sp_rspline,
  _swigc__p_sp_samphold,
  _swigc__p_sp_saturator,
  _swigc__p_sp_scale,
  _swigc__p_sp_sdelay,
  _swigc__p_sp_slice,
  _swigc__p_sp_smoothdelay,
  _swigc__p_sp_spa,
  _swigc__p_sp_sparec,
  _swigc__p_sp_streson,
  _swigc__p_sp_switch,
  _swigc__p_sp_tabread,
  _swigc__p_sp_tadsr,
  _swigc__p_sp_talkbox,
  _swigc__p_sp_tblrec,
  _swigc__p_sp_tbvcf,
  _swigc__p_sp_tdiv,
  _swigc__p_sp_tenv,
  _swigc__p_sp_tenv2,
  _swigc__p_sp_tenvx,
  _swigc__p_sp_tevent,
  _swigc__p_sp_tgate,
  _swigc__p_sp_thresh,
  _swigc__p_sp_timer,
  _swigc__p_sp_tin,
  _swigc__p_sp_tone,
  _swigc__p_sp_trand,
  _swigc__p_sp_tseg,
  _swigc__p_sp_tseq,
  _swigc__p_sp_vdelay,
  _swigc__p_sp_voc,
  _swigc__p_sp_vocoder,
  _swigc__p_sp_waveset,
  _swigc__p_sp_wavin,
  _swigc__p_sp_wavout,
  _swigc__p_sp_wpkorg35,
  _swigc__p_sp_zitarev,
  _swigc__p_spa_header,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vector_iteratorT_double_t,
  _swigc__p_std__vector_iteratorT_float_t,
  _swigc__p_uint16_t,
  _swigc__p_uint32_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

