# Build dexed with JUCE buidls

trigger:
- master

pr:
- master

jobs:

- job: Build
  strategy:
    matrix:
      mac:
        imageName: 'macos-10.14'
        isMac: True
      win:
        imageName: 'vs2017-win2016'
        isWindows: True
      lin:
        imageName: 'ubuntu-18.04'
        isLinux: True

  pool:
    vmImage: $(imageName)

  steps:
  - checkout: self
    fetchDepth: 1
    # submodules: recursive # can't do submodules here b'cuz depth=1 fails with Github

  - bash: |
      make all
    displayName: Build with make

  - bash: |
      sudo locale-gen es_ES
      sudo locale-gen fr_FR
      sudo locale-gen ja_JP
      sudo locale-gen zh_CN
      sudo update-locale
    displayName: Install Locales on Linux
    condition: variables.isLinux

  - bash: |
      make runtests
    displayName: Run tests with make

  - bash: |
      mkdir products/
      cd build/

      GIT_TAG=`git rev-parse --short HEAD`
      BUILDDATE=`date +%Y%m%d`
      ZIPV="${GIT_TAG}-${BUILDDATE}"
      
      7z.exe a ../products/Tuning-Library-Utils-Win64bit-${ZIPV}.zip windows
    displayName: Build Windows Zip
    condition: variables.isWindows

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'WINDOWS_BUILD'
      targetPath: 'products/'
    displayName: Publish Windows Zip
    condition: variables.isWindows

  - bash: |
      mkdir products/
      cd build/

      GIT_TAG=`git rev-parse --short HEAD`
      BUILDDATE=`date +%Y%m%d`
      ZIPV="${GIT_TAG}-${BUILDDATE}"
      
      tar cvzf ../products/Tuning-Library-Linux-Utils-${ZIPV}.tgz linux
    displayName: Build Linux TGZ
    condition: variables.isLinux

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'LINUX_BUILD'
      targetPath: 'products/'
    displayName: Publish Linux Zip
    condition: variables.isLinux


  - bash: |
      mkdir products/
      cd build/

      GIT_TAG=`git rev-parse --short HEAD`
      BUILDDATE=`date +%Y%m%d`
      ZIPV="${GIT_TAG}-${BUILDDATE}"
      
      tar cvzf ../products/Tuning-Library-Utils-MacOS-${ZIPV}.tgz macos
    displayName: Build Mac TGZ
    condition: variables.isMac

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'MACOS_BUILD'
      targetPath: 'products/'
    displayName: Publish Mac Zip
    condition: variables.isMac


- job: UpdateGithubRelease
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  steps:
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'MACOS_BUILD'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'WINDOWS_BUILD'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'LINUX_BUILD'
      targetPath: $(Build.ArtifactStagingDirectory)

  - bash: |
     scripts/release-notes.sh > $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
     ls $(Build.ArtifactStagingDirectory)
     md5sum $(Build.ArtifactStagingDirectory)/*

    displayName: Fake up release notes and tag release

  - task: GitHubRelease@0
    displayName: "Create New Github Release"
    inputs:
      gitHubConnection: surge-rackupdater
      repositoryName: surge-synthesizer/tuning-library
      action: 'edit'
      tag: Nightly
      target: '$(Build.SourceVersion)'
      addChangeLog: false
      assetUploadMode: 'delete'
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      assets: $(Build.ArtifactStagingDirectory)/*.*

