/**
\mainpage Artifastring

Artifastring ("artificial fast string") is a highly optimized
physical simulation of a violin for sound synthesis.


\section quick_start 1. Quick start

\subsection download 1.1 Download

The latest tarball release can be downloaded from:
http://percival-music.ca/artifastring/artifastring-latest.tar.gz

Development takes place at:
https://github.com/gperciva/artifastring


\subsection compile 1.2 Compile

Requires a typical development environment including \c g++, with
the additional \c libfftwf library.

\code
mkdir build/
cd build/
../configure
make
\endcode

If you do not want to use the autotools build system, you can
still compile with the \c .c and \c .h files directly.  This is
demonstrated in \ref use_in_code "use in code".


\subsection generate_audio 1.3 Generate audio

\code
./actions2wav twinkle.actions
\endcode

The format of the \c ".actions" file is described in
\ref file_format "file format".

You may also use it in C++ code directly; this is described in
\ref use_in_code "use in code".  Python bindings are available;
see \ref swig "swig".


\subsection generate_video 1.4 Generate video

Video can be produced with \c blender.  Use \c --enable-blender
during the \c ../configure stage.  Individual pictures are
produced with <c>actions2images.py</c>; these pictures can be
combined with audio with <c>artifastring_movie.py</c>.

There are 3 preset levels of image quality.  Most machines can
process multiple threads at once; the speed of rendering images
can be increased by manually splitting the range of frames and
calling \c actions2imges.py multiple times (i.e.
<c>artifastring2images.py -q 1 -s 1 -e 100</c> and
<c>artifastring2images.py -q 1 -s 101 -e 200</c>).  For more
information, check the \c --help of both scripts.


\subsection generate_audio 1.5 Benchmarks

I recommend generating a 30-second test file:

\code
cd build/
../actions/benchmark.py
./actions2wav benchmark.actions
\endcode

This tests many aspects of the physical modelling.  Be aware that
the bowing parameters (notably bow velocity and bow force) are not
tweaked, so the violin control will be fairly poor.


\section background 2. Background

\subsection references 2.1 References

Artifastring is discussed extensively in my PhD dissertation:

- G. Percival, "Physical modelling meets machine learning:
  performing music with a virtual string ensemble", PhD
  dissertation, University of Glasgow, 2013,
  http://theses.gla.ac.uk/4253/1/2013percivalphd.pdf

The fundamental model was described by Demoucron, subjected to a
few changes to avoid undesirable behaviour (described in my PhD).

- M. Demoucron's 2008 PhD thesis:
  http://recherche.ircam.fr/equipes/instruments/demoucron

- M. Demoucron and N. Rasamimanana, "Score based real-time
  performance with a virtual violin", Proceedings of the 12th
  International Conference on Digital Audio Effects (DAFx-09),
  Como, Italy, September 1-4, 2009.
  http://articles.ircam.fr/textes/Demoucron09a/index.pdf


\subsection known_limits 2.2 Known limitations

Despite the recent dates, this model is relatively old (early
1990s?) and does not represent the most accurate simulation known
to researchers.  In particular, the friction of bowing is
estimated with a hyperbolic curve, rather than a more accurate
double-exponential curve, or hysteresis behaviour due to the rosin
melting and cooling during bowing.

This model was not chosen for accuracy; rather for being simple
yet still "good enough" for our desires.  Don't criticize it for
being "not sufficiently accurate" for whatever you want to do.


\subsection ack 2.3 Acknowledgements

This project would not have been possible without initial work by
my supervisor, Dr. Nick Bailey, in understanding and explaining
the model (in language, diagrams, and code).  Many thanks also to
Dr. John Williamson and Dr. Martin Macauley for clarifying some
more abstract parts of the model.

Many thanks also to Matthias Demoucron for clarifying some
physical constants (especially the slope of friction charactistics
v<SUB>0</SUB>) in personal email.


\section file_format 3. File format

The general syntax of each line is:

\code
action_type   seconds   parameters...
\endcode

Lines must be divided with tabs, with one command per line.  A
line beginning with a # hash is a comment.

There are four types of commands.  All commands begin with the \c
action_type and \c seconds.  \c seconds is the absolute time since
the beginning of the audio, not the relative time since the last
command.

- wait: no extra parameters
  \code
  w       2.0
  \endcode

- finger: 2 extra parameters: string number, and finger position
  \code
  f       2.0       3       0.109101
  \endcode

- pluck: 3 extra parameters: string number, pluck position, and
  pluck force.
  \code
  p       2.5       3       0.25       0.8
  \endcode

- bow: 4 extra parameters: string number, bow position, bow force,
  and bow velocity
  \code
  b       3.0       3       0.12       0.6       0.4
  \endcode

- accelerate bow: 5 extra parameters: string number, bow position, bow force,
  target bow velocity, and bow acceleration
  \code
  a       3.0       3       0.12       0.6       0.4    10.0
  \endcode

See files in the \c actions/ directory for examples.



\section use_in_code 4. Use in code

Input code:

\include "simple.cpp"

To compile (after installing):

\code
g++ simple.cpp -lartifastring -lmonowav -lfftwf
\endcode


\section swig 5. Swig python bindings

SWIG bindings are built automatically if possible.

\code
./play-file.py twinkle.actions
\endcode


\section copyright 6. Copyright

Short answer: GNU GPL 3.0+

Long answer:

\verbatim
Copyright 2010--2013 Graham Percival

Artifastring is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

Artifastring is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with Artifastring.  If not, see
<http://www.gnu.org/licenses/>.
\endverbatim


\section future_work 7. Future work

It would be nice to extend the physical modelling algorithm to use
(at least) two bow positions (to accommodate bow width), and two
finger forces during bowing.  I hope to have the latter working in
the next few weeks.

More instruments would be fantastic, especially double bass.  If I
feel inspired then I might try renting a double bass for a week so
I can take the required measurements.

In general, though, my attention is on virtual musicians to
control the physical model.  This takes place in a separate
software project: http://percival-music.ca/vivi.html

*/

