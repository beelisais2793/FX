//############################################################### csound.lib ###
//
// A library for csound opcodes
//
// *
// *
// *
// *
// *
//
//##############################################################################

/*******************************************************************************
Except where noted otherwise, Copyright (C) 2019-2020 by SEAM

GRAME LICENSE

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 2.1 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with the GNU C Library; if not, write to the Free Software Foundation, Inc., 59
Temple Place, Suite 330, Boston, MA 02111-1307 USA.

EXCEPTION TO THE LGPL LICENSE : As a special exception, you may create a larger
FAUST program which directly or indirectly imports this library file and still
distribute the compiled code generated by the FAUST compiler, or a modified
version of this compiled code, under your own copyright and license. This
EXCEPTION TO THE LGPL LICENSE explicitly grants you the right to freely choose
the license for the resulting compiled code. In particular the resulting compiled
code has no obligation to be LGPL or GPL. For example you are free to choose a
commercial or closed source license or any other license if you decide so.
*******************************************************************************/

declare name "CSound Opcodes Faust Library";
declare version "0.1";
declare author "Giuseppe Silvi";
declare license "CC4";

scs = library("seam.csound.lib");

//================================================================== OPCODES ===
//==============================================================================
//------------------------------------------------------------------------------
// DCBLOCK
// dcblock — A DC blocking filter.
//------------------------------------------------------------------------------
// Implements the DC blocking filter
// Y[i] = X[i] - X[i-1] + (igain * Y[i-1])
// Based on work by Perry Cook.
// Syntax
// ares dcblock ain [, igain]
// Initialization
// igain -- the gain of the filter, which defaults to 0.99
//
// #### Reference
// https://csound.com/docs/manual/dcblock.html
//
// #### Usage
//
// ```
// _ : dcblock(igain) : _
// ```
//------------------------------------------------------------------------------
csdcblock(igain) = _ <: _ - mem: +~*(igain);
//
//------------------------------------------------------------------------------
// TONE
// A first-order recursive low-pass filter with variable frequency response.
//------------------------------------------------------------------------------
// tone is a 1 term IIR filter. Its formula is:
// y[n] = c1 * x[n] + c2 * y[n-1]
// where
// b = 2 - cos(2 π hp/sr)
// c2 = b - sqrt(b2 - 1.0)
// c1 = 1 - c2
//
// #### Reference
// https://csound.com/docs/manual//tone.html
//
// #### Usage
//
// ```
// _ : tone(cf) : _
// ```
//
//------------------------------------------------------------------------------
tone(cf) = _*c1 : (+~_ *(c2))
with{
  b = 2 - (cos(2*ma.PI*(cf/ma.SR)));
  c1 = 1-c2;
  c2 = b - sqrt((b*b)-1.0);
};
//
//------------------------------------------------------------------------------
// ATONE
// atone — A hi-pass filter whose transfer functions are the complements of the
// tone opcode.
//------------------------------------------------------------------------------
// atone is a filter whose transfer functions is the complement of tone.
// atone is thus a form of high-pass filter whose transfer functions represent
// the “filtered out” aspects of their complements. However, power scaling is
// not normalized in atone but remains the true complement of the corresponding
// unit. Thus an audio signal, filtered by parallel matching tone and atone
// units, would under addition simply reconstruct the original spectrum.
//
// #### Reference
// https://csound.com/docs/manual//tone.html
//
// #### Usage
//
// ```
// _ : atone(freq) : _
// ```
//
//------------------------------------------------------------------------------
atone(freq) = _ <: _ - tone(freq);
//
//------------------------------------------------------------------------------
// PHASER1
// First-order allpass filters arranged in a series.
//------------------------------------------------------------------------------
// An implementation of iord number of first-order allpass filters in series.
//
// phaser1 implements iord number of first-order allpass sections, serially
// connected, all sharing the same coefficient. Each allpass section can be
// represented by the following difference equation:
//
// y(n) = C * x(n) + x(n-1) - C * y(n-1)
//
// where x(n) is the input, x(n-1) is the previous input, y(n) is the output,
// y(n-1) is the previous output, and C is a coefficient which is calculated
// from the value of kfreq, using the bilinear z-transform.
//
// #### Reference
// https://csound.com/docs/manual/phaser1.html
//
// CSOUND Syntax
// ares phaser1 asig, kfreq, kord, kfeedback [, iskip]
// kfreq -- frequency (in Hz) of the filter(s). This is the frequency at which
//          each filter in the series shifts its input by 90 degrees.
// kord -- the number of allpass stages in series. These are first-order filters
//         and can range from 1 to 4999.
// kfeedback -- amount of the output which is fed back into the input of the
//              allpass chain. With larger amounts of feedback, more prominent
//              notches appear in the spectrum of the output. kfeedback must
//              be between -1 and +1. for stability.
// #### Usage
//
// ```
// _ : phaser1(order,freq,g) : _
// ```
//
//------------------------------------------------------------------------------
//freq = vslider("Frequency", 0,0,1,0.01);
phaser1(order,C,g) = ( + : seq(i,order,ap(C/4/order)))~*(g)
with{
  ap(C) = _ <: _*(C) + mem : -~*(C);
  clip = min(1) : max(-1);
};
//process = phaser1(4,freq);

aa = library("aanl.lib");
sf = library("all.lib");
an = library("analyzers.lib");
ba = library("basics.lib");
co = library("compressors.lib");
de = library("delays.lib");
dm = library("demos.lib");
dx = library("dx7.lib");
en = library("envelopes.lib");
fd = library("fds.lib");
fi = library("filters.lib");
ho = library("hoa.lib");
it = library("interpolators.lib");
ma = library("maths.lib");
mi = library("mi.lib");
ef = library("misceffects.lib");
os = library("oscillators.lib");
no = library("noises.lib");
pf = library("phaflangers.lib");
pl = library("platform.lib");
pm = library("physmodels.lib");
qu = library("quantizers.lib");
rm = library("reducemaps.lib");
re = library("reverbs.lib");
ro = library("routes.lib");
sp = library("spats.lib");
si = library("signals.lib");
so = library("soundfiles.lib");
sy = library("synths.lib");
ve = library("vaeffects.lib");
vl = library("version.lib");
wa = library("webaudio.lib");
wd = library("wdmodels.lib");
