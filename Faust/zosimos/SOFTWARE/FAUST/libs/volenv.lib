//-----------------ENVELOPE----------------//
//Simple volume envelope with attack, release and a release curve control.
//--------------PARAMETERS:
//  1 - Attack : envelope attack time
//  2 - Release : envelope release time
//  3 - Hold : envelope hold time
//  4 - Curve : curve type (linear to exponential) for attack and release


import("stdfaust.lib");
import("utilities.lib");

volenv(at, ht, rt, curve, gate) = (linenv,expenv) : si.interpolate(curve)
with {
    linenv = ahr(at, ht, rt, gate);
    expenv = ahre(at*2, ht, rt*2, gate);
};

// Linear AHR envelope
ahr(at, ht, rt, trig) = AS - R : max(0)
with {
    hgate = trig : holdN(hn);

    // Durations in samples
    an = max(1, at*ma.SR);
    rn = max(1, rt*ma.SR);
    hn = max(1, ht*ma.SR);

    // Deltas per samples
    adelta = 1/an;
    rdelta = 1/rn;

    // Attack time (starts at gate upfront and raises infinitely)

    atime = (raise * reset + upfront)  ~ _
    with {
        upfront = trig > trig';
        reset = trig <= trig';
        raise(x) = (x + (x>0));
    };

    // Attack curve
    A = atime * adelta;

    // AS part
    AS = min(A, 1);

    // Release time starts when the delayed gate is at 0
    rtime = (+(1) : *((hgate == 0))) ~ _;

    // Release curve starts when the delayed gate is 0 with the current value of the envelope
    R = rtime * rdelta;
};

// Exponential AHR envelope
ahre(at, ht, rt, trig) = AS - R : max(0)
with {
    hgate = trig : holdN(hn);
    // Durations in samples
    an = max(1, at*ma.SR);
    rn = max(1, rt*ma.SR);
    hn = max(1, ht*ma.SR);

    // Deltas per samples
    adelta = 1./an;
    rdelta = 1./rn;

    // Attack time (starts at gate upfront and raises infinitely)
    atime = ((raise * reset + upfront)  ~ _)
    with {
        upfront = trig > trig';
        reset = (trig <= trig');
        raise(x) = (x + (exp(1)));
    };

    // Attack curve
    A = atime * adelta;

    // AS part
    AS = min(A, 1.);

    // Release time starts when hold gate is 0
    rtime = (+(exp(1)) : *(hgate == 0)) ~ _;

    // Release curve starts when hold gate is 0 with the current value of the envelope
    R = rtime * rdelta;

};


//old versions without hold control

ar(at,rt,gate) = AR : max(0)
with {

    // Durations in samples
    an = max(1, at*ma.SR);
    rn = max(1, rt*ma.SR);

    // Deltas per samples
    adelta = 1/an;
    rdelta = 1/rn;

    // Attack time (starts at gate upfront and raises infinitely)
    atime = (raise * reset + upfront) ~ _
    with {
        upfront = gate > gate';
        reset = gate <= gate';
        raise(x) = (x + (x > 0));
    };

    // Attack curve
    A = atime * adelta;

    // Release curve
    D0 = 1 + an * rdelta;
    D = D0 - atime * rdelta;

    // AR part
    AR = min(A, D);

};

are(at,rt,gate) = AR : max(0)
with {

    // Durations in samples
    an = max(1, at*ma.SR);
    rn = max(1, rt*ma.SR);

    // Deltas per samples
    adelta = 1/an;
    rdelta = 1/rn;

    // Attack time (starts at gate upfront and raises infinitely)
    atime = (raise * reset + upfront) ~ _
    with {
        upfront = gate > gate';
        reset = gate <= gate';
        raise(x) = (x + exp(x > 0));
    };

    // Attack curve
    A = atime * adelta;

    // Release curve
    D0 = 1 + an * rdelta;
    D = D0 - atime * rdelta;

    // AR part
    AR = min(A, D);

};
